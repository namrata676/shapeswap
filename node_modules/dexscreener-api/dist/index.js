"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAveragePrice = exports.searchPairsMatchingQuery = exports.getPairsMatchingBaseTokenAddress = exports.getPairInformationByChain = exports.baseUri = void 0;
const axios_1 = __importDefault(require("axios"));
const PairNotFoundError_1 = __importDefault(require("./errors/PairNotFoundError"));
exports.baseUri = "https://api.dexscreener.io/latest/dex/";
const getPairInformationByChain = (chainId, pairAddress) => __awaiter(void 0, void 0, void 0, function* () {
    const url = `${exports.baseUri}pairs/${chainId}/${pairAddress}`;
    const response = yield axios_1.default.get(url);
    const pairsResponse = response.data;
    if (!pairsResponse.pair) {
        throw new PairNotFoundError_1.default(pairAddress);
    }
    return pairsResponse;
});
exports.getPairInformationByChain = getPairInformationByChain;
const getPairsMatchingBaseTokenAddress = (tokenAddress) => __awaiter(void 0, void 0, void 0, function* () {
    const url = `${exports.baseUri}tokens/${tokenAddress}`;
    const response = yield axios_1.default.get(url);
    const tokensResponse = response.data;
    if (!tokensResponse.pairs) {
        tokensResponse.pairs = [];
    }
    return tokensResponse;
});
exports.getPairsMatchingBaseTokenAddress = getPairsMatchingBaseTokenAddress;
const searchPairsMatchingQuery = (query) => __awaiter(void 0, void 0, void 0, function* () {
    const url = `${exports.baseUri}search/?q=${query}`;
    const response = yield axios_1.default.get(url);
    return response.data;
});
exports.searchPairsMatchingQuery = searchPairsMatchingQuery;
const getAveragePrice = (tokenAddress) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const tokensResponse = yield (0, exports.getPairsMatchingBaseTokenAddress)(tokenAddress);
        const usdPrices = tokensResponse.pairs
            .filter((pair) => pair.priceUsd)
            .map((pair) => Number(pair.priceUsd));
        if (usdPrices.length === 0)
            return 0;
        return usdPrices.reduce((previousValue, currentValue) => (previousValue + currentValue), 0) / usdPrices.length;
    }
    catch (err) {
        if (err instanceof Error)
            console.error(`An error occurred retrieving the average usd price for token: ${tokenAddress}, ${err.message}`);
    }
});
exports.getAveragePrice = getAveragePrice;
