{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { BIG_TEN } from './bigNumber';\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = function (amount) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals));\n};\nexport const getBalanceAmount = function (amount) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals));\n};\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = function (balance) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  return getBalanceAmount(balance, decimals).toNumber();\n};\nexport const getFullDisplayBalance = function (balance) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let displayDecimals = arguments.length > 2 ? arguments[2] : undefined;\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals);\n};\nexport const formatNumber = function (number) {\n  let minPrecision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let maxPrecision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision\n  };\n  return number.toLocaleString(undefined, options);\n};\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object\n * Note: does NOT round\n */\nexport const formatBigNumber = function (number) {\n  let displayDecimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals));\n  return formatUnits(number.sub(remainder), decimals);\n};\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\n * Note: rounds\n */\nexport const formatBigNumberToFixed = function (number) {\n  let displayDecimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  const formattedString = formatUnits(number, decimals);\n  return (+formattedString).toFixed(displayDecimals);\n};\n\n/**\n * Formats a FixedNumber like BigNumber\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\n */\nexport const formatFixedNumber = function (number) {\n  let displayDecimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  // Remove decimal\n  const [leftSide] = number.toString().split('.');\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals);\n};","map":{"version":3,"names":["BigNumber","ethers","formatUnits","BIG_TEN","getDecimalAmount","amount","decimals","times","pow","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","getFullDisplayBalance","displayDecimals","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined","formatBigNumber","remainder","mod","from","sub","formatBigNumberToFixed","formattedString","formatFixedNumber","leftSide","toString","split"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/formatBalance.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport { BIG_TEN } from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object\n * Note: does NOT round\n */\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\n  return formatUnits(number.sub(remainder), decimals)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\n * Note: rounds\n */\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const formattedString = formatUnits(number, decimals)\n  return (+formattedString).toFixed(displayDecimals)\n}\n\n/**\n * Formats a FixedNumber like BigNumber\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\n */\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\n  // Remove decimal\n  const [leftSide] = number.toString().split('.')\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,cAAc;AACpC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,aAAa;;AAErC;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,UAACC,MAAiB,EAAoB;EAAA,IAAlBC,QAAQ,uEAAG,EAAE;EAC/D,OAAO,IAAIN,SAAS,CAACK,MAAM,CAAC,CAACE,KAAK,CAACJ,OAAO,CAACK,GAAG,CAACF,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,UAACJ,MAAiB,EAAoB;EAAA,IAAlBC,QAAQ,uEAAG,EAAE;EAC/D,OAAO,IAAIN,SAAS,CAACK,MAAM,CAAC,CAACK,SAAS,CAACP,OAAO,CAACK,GAAG,CAACF,QAAQ,CAAC,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAG,UAACC,OAAkB,EAAoB;EAAA,IAAlBN,QAAQ,uEAAG,EAAE;EAChE,OAAOG,gBAAgB,CAACG,OAAO,EAAEN,QAAQ,CAAC,CAACO,QAAQ,EAAE;AACvD,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,UAACF,OAAkB,EAA8C;EAAA,IAA5CN,QAAQ,uEAAG,EAAE;EAAA,IAAES,eAAwB;EAC/F,OAAON,gBAAgB,CAACG,OAAO,EAAEN,QAAQ,CAAC,CAACU,OAAO,CAACD,eAAe,CAAC;AACrE,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,UAACC,MAAc,EAAyC;EAAA,IAAvCC,YAAY,uEAAG,CAAC;EAAA,IAAEC,YAAY,uEAAG,CAAC;EAC7E,MAAMC,OAAO,GAAG;IACdC,qBAAqB,EAAEH,YAAY;IACnCI,qBAAqB,EAAEH;EACzB,CAAC;EACD,OAAOF,MAAM,CAACM,cAAc,CAACC,SAAS,EAAEJ,OAAO,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAG,UAACR,MAAwB,EAA0C;EAAA,IAAxCH,eAAe,uEAAG,EAAE;EAAA,IAAET,QAAQ,uEAAG,EAAE;EAC3F,MAAMqB,SAAS,GAAGT,MAAM,CAACU,GAAG,CAAC3B,MAAM,CAACD,SAAS,CAAC6B,IAAI,CAAC,EAAE,CAAC,CAACrB,GAAG,CAACF,QAAQ,GAAGS,eAAe,CAAC,CAAC;EACvF,OAAOb,WAAW,CAACgB,MAAM,CAACY,GAAG,CAACH,SAAS,CAAC,EAAErB,QAAQ,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMyB,sBAAsB,GAAG,UAACb,MAAwB,EAA0C;EAAA,IAAxCH,eAAe,uEAAG,EAAE;EAAA,IAAET,QAAQ,uEAAG,EAAE;EAClG,MAAM0B,eAAe,GAAG9B,WAAW,CAACgB,MAAM,EAAEZ,QAAQ,CAAC;EACrD,OAAO,CAAC,CAAC0B,eAAe,EAAEhB,OAAO,CAACD,eAAe,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMkB,iBAAiB,GAAG,UAACf,MAA0B,EAA0C;EAAA,IAAxCH,eAAe,uEAAG,EAAE;EAAA,IAAET,QAAQ,uEAAG,EAAE;EAC/F;EACA,MAAM,CAAC4B,QAAQ,CAAC,GAAGhB,MAAM,CAACiB,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;EAC/C,OAAOV,eAAe,CAACzB,MAAM,CAACD,SAAS,CAAC6B,IAAI,CAACK,QAAQ,CAAC,EAAEnB,eAAe,EAAET,QAAQ,CAAC;AACpF,CAAC"},"metadata":{},"sourceType":"module"}