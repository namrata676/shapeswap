{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable import/no-cycle */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi';\nimport { Token } from '../token';\nimport { TokenAmount } from './tokenAmount';\nimport { TEN } from '../../constants';\nimport { Fraction } from './fraction';\nimport { CurrencyAmount } from './currencyAmount';\nexport class Price extends Fraction {\n  // input i.e. denominator\n\n  // output i.e. numerator\n\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route) {\n    const prices = [];\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency, quoteCurrency, denominator, numerator) {\n    super(numerator, denominator);\n    this.baseCurrency = void 0;\n    this.quoteCurrency = void 0;\n    this.scalar = void 0;\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n  }\n  get raw() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n  get adjusted() {\n    return super.multiply(this.scalar);\n  }\n  invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  multiply(other) {\n    // invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n\n  // performs floor division on overflow\n  quote(currencyAmount) {\n    // invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient);\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient);\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}","map":{"version":3,"names":["JSBI","Token","TokenAmount","TEN","Fraction","CurrencyAmount","Price","fromRoute","route","prices","i","pair","pairs","entries","push","path","equals","token0","reserve0","currency","reserve1","raw","slice","reduce","accumulator","currentValue","multiply","constructor","baseCurrency","quoteCurrency","denominator","numerator","scalar","exponentiate","BigInt","decimals","adjusted","invert","other","fraction","quote","currencyAmount","quotient","ether","toSignificant","significantDigits","format","rounding","toFixed","decimalPlaces"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/price.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable import/no-cycle */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Token, currencyEquals } from '../token'\nimport { TokenAmount } from './tokenAmount'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  \n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    // invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}