{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nimport { _100 } from '../../constants';\nimport { Fraction } from './fraction';\nconst _100_PERCENT = new Fraction(_100);\nexport class Percent extends Fraction {\n  toSignificant(significantDigits = 5, format, rounding) {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n  toFixed(decimalPlaces = 2, format, rounding) {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}","map":{"version":3,"names":["_100","Fraction","_100_PERCENT","Percent","toSignificant","significantDigits","format","rounding","multiply","toFixed","decimalPlaces"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/percent.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nimport { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAAmBA,IAAI,QAAQ,iBAAiB;AAChD,SAASC,QAAQ,QAAQ,YAAY;AAErC,MAAMC,YAAY,GAAG,IAAID,QAAQ,CAACD,IAAI,CAAC;AAEvC,OAAO,MAAMG,OAAO,SAASF,QAAQ,CAAC;EAC7BG,aAAaA,CAACC,iBAAyB,GAAG,CAAC,EAAEC,MAAe,EAAEC,QAAmB,EAAU;IAChG,OAAO,IAAI,CAACC,QAAQ,CAACN,YAAY,CAAC,CAACE,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;EACvF;EAEOE,OAAOA,CAACC,aAAqB,GAAG,CAAC,EAAEJ,MAAe,EAAEC,QAAmB,EAAU;IACtF,OAAO,IAAI,CAACC,QAAQ,CAACN,YAAY,CAAC,CAACO,OAAO,CAACC,aAAa,EAAEJ,MAAM,EAAEC,QAAQ,CAAC;EAC7E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}