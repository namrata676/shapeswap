{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types *//* eslint-disable @typescript-eslint/no-inferrable-types *//* eslint-disable no-restricted-syntax *//* eslint-disable import/no-cycle */// import invariant from 'tiny-invariant'\nimport JSBI from'jsbi';import{Token}from'../token';import{TokenAmount}from'./tokenAmount';import{TEN}from'../../constants';import{Fraction}from'./fraction';import{CurrencyAmount}from'./currencyAmount';export class Price extends Fraction{// used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\nstatic fromRoute(route){const prices=[];for(const[i,pair]of route.pairs.entries()){prices.push(route.path[i].equals(pair.token0)?new Price(pair.reserve0.currency,pair.reserve1.currency,pair.reserve0.raw,pair.reserve1.raw):new Price(pair.reserve1.currency,pair.reserve0.currency,pair.reserve1.raw,pair.reserve0.raw));}return prices.slice(1).reduce((accumulator,currentValue)=>accumulator.multiply(currentValue),prices[0]);}// denominator and numerator _must_ be raw, i.e. in the native representation\nconstructor(baseCurrency,quoteCurrency,denominator,numerator){super(numerator,denominator);this.baseCurrency=void 0;// input i.e. denominator\nthis.quoteCurrency=void 0;// output i.e. numerator\nthis.scalar=void 0;this.baseCurrency=baseCurrency;this.quoteCurrency=quoteCurrency;this.scalar=new Fraction(JSBI.exponentiate(TEN,JSBI.BigInt(baseCurrency.decimals)),JSBI.exponentiate(TEN,JSBI.BigInt(quoteCurrency.decimals)));}get raw(){return new Fraction(this.numerator,this.denominator);}get adjusted(){return super.multiply(this.scalar);}invert(){return new Price(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator);}multiply(other){// invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\nconst fraction=super.multiply(other);return new Price(this.baseCurrency,other.quoteCurrency,fraction.denominator,fraction.numerator);}// performs floor division on overflow\nquote(currencyAmount){// invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\nif(this.quoteCurrency instanceof Token){return new TokenAmount(this.quoteCurrency,super.multiply(currencyAmount.raw).quotient);}return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient);}toSignificant(){let significantDigits=arguments.length>0&&arguments[0]!==undefined?arguments[0]:6;let format=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2?arguments[2]:undefined;return this.adjusted.toSignificant(significantDigits,format,rounding);}toFixed(){let decimalPlaces=arguments.length>0&&arguments[0]!==undefined?arguments[0]:4;let format=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2?arguments[2]:undefined;return this.adjusted.toFixed(decimalPlaces,format,rounding);}}","map":{"version":3,"names":["JSBI","Token","TokenAmount","TEN","Fraction","CurrencyAmount","Price","fromRoute","route","prices","i","pair","pairs","entries","push","path","equals","token0","reserve0","currency","reserve1","raw","slice","reduce","accumulator","currentValue","multiply","constructor","baseCurrency","quoteCurrency","denominator","numerator","scalar","exponentiate","BigInt","decimals","adjusted","invert","other","fraction","quote","currencyAmount","quotient","ether","toSignificant","significantDigits","arguments","length","undefined","format","rounding","toFixed","decimalPlaces"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/price.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable import/no-cycle */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Token, currencyEquals } from '../token'\nimport { TokenAmount } from './tokenAmount'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  \n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    // invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}