{"ast":null,"code":"import request, { gql } from 'graphql-request';\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints';\nimport { ProposalState } from 'state/types';\nimport { simpleRpcProvider } from 'utils/providers';\nexport const getProposals = async function () {\n  let first = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  let skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ProposalState.ACTIVE;\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    first,\n    skip,\n    state\n  });\n  return response.proposals;\n};\nexport const getProposal = async id => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    id\n  });\n  return response.proposal;\n};\nexport const getVotes = async (first, skip, where) => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `, {\n    first,\n    skip,\n    where\n  });\n  return response.votes;\n};\nexport const getVoteVerificationStatuses = async (votes, block) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n  const votesToVerify = votes.map(vote => {\n    var _vote$metadata, _vote$metadata2;\n    return {\n      address: vote.voter,\n      verificationHash: (_vote$metadata = vote.metadata) === null || _vote$metadata === void 0 ? void 0 : _vote$metadata.verificationHash,\n      total: (_vote$metadata2 = vote.metadata) === null || _vote$metadata2 === void 0 ? void 0 : _vote$metadata2.votingPower\n    };\n  });\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify\n    })\n  });\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const data = await response.json();\n  return votes.reduce((accum, vote) => {\n    var _data$data$vote$voter;\n    return {\n      ...accum,\n      [vote.id]: ((_data$data$vote$voter = data.data[vote.voter.toLowerCase()]) === null || _data$data$vote$voter === void 0 ? void 0 : _data$data$vote$voter.isValid) === true\n    };\n  }, {});\n};\nexport const getAllVotes = async function (proposalId, block) {\n  let votesPerChunk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes = [];\n    const fetchVoteChunk = async newSkip => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, {\n          proposal: proposalId\n        });\n        if (voteChunk.length === 0) {\n          resolve(votes);\n        } else {\n          votes = [...votes, ...voteChunk];\n          fetchVoteChunk(newSkip + votesPerChunk);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    fetchVoteChunk(0);\n  });\n};","map":{"version":3,"names":["request","gql","SNAPSHOT_API","SNAPSHOT_VOTING_API","ProposalState","simpleRpcProvider","getProposals","first","skip","state","ACTIVE","response","proposals","getProposal","id","proposal","getVotes","where","votes","getVoteVerificationStatuses","block","blockNumber","getBlockNumber","votesToVerify","map","vote","address","voter","verificationHash","metadata","total","votingPower","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","reduce","accum","toLowerCase","isValid","getAllVotes","proposalId","votesPerChunk","Promise","resolve","reject","fetchVoteChunk","newSkip","voteChunk","length","error"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/voting/helpers.ts"],"sourcesContent":["import request, { gql } from 'graphql-request'\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\n\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\n  const response: { proposals: Proposal[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { first, skip, state },\n  )\n  return response.proposals\n}\n\nexport const getProposal = async (id: string): Promise<Proposal> => {\n  const response: { proposal: Proposal } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { id },\n  )\n  return response.proposal\n}\n\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\n  const response: { votes: Vote[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.votes\n}\n\nexport const getVoteVerificationStatuses = async (\n  votes: Vote[],\n  block?: number,\n): Promise<{ [key: string]: boolean }> => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n\n  const votesToVerify = votes.map((vote) => ({\n    address: vote.voter,\n    verificationHash: vote.metadata?.verificationHash,\n    total: vote.metadata?.votingPower,\n  }))\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify,\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n  return votes.reduce((accum, vote) => {\n    return {\n      ...accum,\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\n    }\n  }, {})\n}\n\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes: Vote[] = []\n\n    const fetchVoteChunk = async (newSkip: number) => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\n\n        if (voteChunk.length === 0) {\n          resolve(votes)\n        } else {\n          votes = [...votes, ...voteChunk]\n          fetchVoteChunk(newSkip + votesPerChunk)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    fetchVoteChunk(0)\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}