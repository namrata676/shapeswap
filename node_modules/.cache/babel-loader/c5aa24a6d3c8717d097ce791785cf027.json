{"ast":null,"code":"import _objectSpread from\"/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/* eslint-disable @typescript-eslint/no-empty-function *//* eslint-disable no-useless-constructor */// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\nimport{Contract}from'@ethersproject/contracts';import{getNetwork}from'@ethersproject/networks';import{getDefaultProvider}from'@ethersproject/providers';import{TokenAmount}from'./entities/fractions/tokenAmount';import{Pair}from'./entities/pair';import ERC20 from'./abis/ERC20.json';import{ChainId}from'./constants';import{Token}from'./entities/token';let TOKEN_DECIMALS_CACHE={[ChainId.MAINNET]:{'0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A':9// DGD\n}};/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */export class Fetcher{/**\n   * Cannot be constructed.\n   */constructor(){}/**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */static async fetchTokenData(chainId,address){var _TOKEN_DECIMALS_CACHE,_TOKEN_DECIMALS_CACHE2;let provider=arguments.length>2&&arguments[2]!==undefined?arguments[2]:getDefaultProvider(getNetwork(chainId));let symbol=arguments.length>3?arguments[3]:undefined;let name=arguments.length>4?arguments[4]:undefined;const parsedDecimals=typeof((_TOKEN_DECIMALS_CACHE=TOKEN_DECIMALS_CACHE)===null||_TOKEN_DECIMALS_CACHE===void 0?void 0:(_TOKEN_DECIMALS_CACHE2=_TOKEN_DECIMALS_CACHE[chainId])===null||_TOKEN_DECIMALS_CACHE2===void 0?void 0:_TOKEN_DECIMALS_CACHE2[address])==='number'?TOKEN_DECIMALS_CACHE[chainId][address]:await new Contract(address,ERC20,provider).decimals().then(decimals=>{var _TOKEN_DECIMALS_CACHE3;TOKEN_DECIMALS_CACHE=_objectSpread(_objectSpread({},TOKEN_DECIMALS_CACHE),{},{[chainId]:_objectSpread(_objectSpread({},(_TOKEN_DECIMALS_CACHE3=TOKEN_DECIMALS_CACHE)===null||_TOKEN_DECIMALS_CACHE3===void 0?void 0:_TOKEN_DECIMALS_CACHE3[chainId]),{},{[address]:decimals})});return decimals;});return new Token(chainId,address,parsedDecimals,symbol,name);}/**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */static async fetchPairData(tokenA,tokenB){let provider=arguments.length>2&&arguments[2]!==undefined?arguments[2]:getDefaultProvider(getNetwork(tokenA.chainId));// invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\nconst address=Pair.getAddress(tokenA,tokenB);const[reserves0,reserves1]=await new Contract(address,'IPancakePair.abi',provider).getReserves();const balances=tokenA.sortsBefore(tokenB)?[reserves0,reserves1]:[reserves1,reserves0];return new Pair(new TokenAmount(tokenA,balances[0]),new TokenAmount(tokenB,balances[1]));}}","map":{"version":3,"names":["Contract","getNetwork","getDefaultProvider","TokenAmount","Pair","ERC20","ChainId","Token","TOKEN_DECIMALS_CACHE","MAINNET","Fetcher","constructor","fetchTokenData","chainId","address","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","provider","arguments","length","undefined","symbol","name","parsedDecimals","decimals","then","_TOKEN_DECIMALS_CACHE3","_objectSpread","fetchPairData","tokenA","tokenB","getAddress","reserves0","reserves1","getReserves","balances","sortsBefore"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/fetcher.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable no-useless-constructor */\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    // invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, 'IPancakePair.abi', provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}