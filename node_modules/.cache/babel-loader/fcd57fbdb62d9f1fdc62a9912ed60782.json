{"ast":null,"code":"export let PoolIds=/*#__PURE__*/function(PoolIds){PoolIds[\"poolBasic\"]=\"poolBasic\";PoolIds[\"poolUnlimited\"]=\"poolUnlimited\";return PoolIds;}({});export let PoolCategory=/*#__PURE__*/function(PoolCategory){PoolCategory[\"COMMUNITY\"]=\"Community\";PoolCategory[\"CORE\"]=\"Core\";PoolCategory[\"BINANCE\"]=\"Binance\";PoolCategory[\"AUTO\"]=\"Auto\";return PoolCategory;}({});export let NftType=/*#__PURE__*/function(NftType){NftType[\"PANCAKE\"]=\"pancake\";NftType[\"MIXIE\"]=\"mixie\";return NftType;}({});export let LotteryStatus=/*#__PURE__*/function(LotteryStatus){LotteryStatus[\"PENDING\"]=\"pending\";LotteryStatus[\"OPEN\"]=\"open\";LotteryStatus[\"CLOSE\"]=\"close\";LotteryStatus[\"CLAIMABLE\"]=\"claimable\";return LotteryStatus;}({});","map":{"version":3,"names":["PoolIds","PoolCategory","NftType","LotteryStatus"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/config/constants/types.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { SerializedBigNumber, TranslatableText } from 'state/types'\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface Token {\n  symbol: string\n  address?: Address\n  decimals?: number\n  projectLink?: string\n  busdPrice?: string\n}\n\nexport enum PoolIds {\n  poolBasic = 'poolBasic',\n  poolUnlimited = 'poolUnlimited',\n}\n\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\n\ninterface IfoPoolInfo {\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  distributionRatio: number // Range [0-1]\n}\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  currency: Token\n  token: Token\n  releaseBlockNumber: number\n  articleUrl: string\n  campaignId: string\n  tokenOfferingPrice: number\n  version: number\n  [PoolIds.poolBasic]?: IfoPoolInfo\n  [PoolIds.poolUnlimited]: IfoPoolInfo\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n  'AUTO' = 'Auto',\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  token: Token\n  quoteToken: Token\n  multiplier?: string\n  isCommunity?: boolean\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  earningToken: Token\n  stakingToken: Token\n  contractAddress: Address\n  poolCategory: PoolCategory\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  enableEmergencyWithdraw?: boolean\n}\n\nexport type Images = {\n  lg: string\n  md: string\n  sm: string\n  ipfs?: string\n}\n\nexport type NftImages = {\n  blur?: string\n} & Images\n\nexport type NftVideo = {\n  webm: string\n  mp4: string\n}\n\nexport type NftSource = {\n  [key in NftType]: {\n    address: Address\n    identifierKey: string\n  }\n}\n\nexport enum NftType {\n  PANCAKE = 'pancake',\n  MIXIE = 'mixie',\n}\n\nexport type Nft = {\n  description: string\n  name: string\n  images: NftImages\n  sortOrder: number\n  type: NftType\n  video?: NftVideo\n\n  // Uniquely identifies the nft.\n  // Used for matching an NFT from the config with the data from the NFT's tokenURI\n  identifier: string\n\n  // Used to be \"bunnyId\". Used when minting NFT\n  variationId?: number | string\n}\n\nexport type TeamImages = {\n  alt: string\n} & Images\n\nexport type Team = {\n  id: number\n  name: string\n  description: string\n  isJoinable?: boolean\n  users: number\n  points: number\n  images: TeamImages\n  background: string\n  textColor: string\n}\n\nexport type CampaignType = 'ifo' | 'teambattle' | 'participation'\n\nexport type Campaign = {\n  id: string\n  type: CampaignType\n  title?: TranslatableText\n  description?: TranslatableText\n  badge?: string\n}\n\nexport type PageMeta = {\n  title: string\n  description?: string\n  image?: string\n}\n\nexport enum LotteryStatus {\n  PENDING = 'pending',\n  OPEN = 'open',\n  CLOSE = 'close',\n  CLAIMABLE = 'claimable',\n}\n\nexport interface LotteryTicket {\n  id: string\n  number: string\n  status: boolean\n  rewardBracket?: number\n  roundId?: string\n  blhReward?: SerializedBigNumber\n}\n\nexport interface LotteryTicketClaimData {\n  ticketsWithUnclaimedRewards: LotteryTicket[]\n  allWinningTickets: LotteryTicket[]\n  cakeTotal: BigNumber\n  roundId: string\n}\n"],"mappings":"AAgBA,UAAY,CAAAA,OAAO,uBAAPA,OAAO,EAAPA,OAAO,0BAAPA,OAAO,wCAAP,CAAAA,OAAO,OA8BnB,UAAY,CAAAC,YAAY,uBAAZA,YAAY,EAAZA,YAAY,0BAAZA,YAAY,gBAAZA,YAAY,sBAAZA,YAAY,sBAAZ,CAAAA,YAAY,OA0DxB,UAAY,CAAAC,OAAO,uBAAPA,OAAO,EAAPA,OAAO,sBAAPA,OAAO,wBAAP,CAAAA,OAAO,OAqDnB,UAAY,CAAAC,aAAa,uBAAbA,aAAa,EAAbA,aAAa,sBAAbA,aAAa,gBAAbA,aAAa,kBAAbA,aAAa,gCAAb,CAAAA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}