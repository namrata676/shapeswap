{"ast":null,"code":"import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{BscConnector}from'@binance-chain/bsc-connector';import{ConnectorNames}from'toolkit/uikit';import{ethers}from'ethers';import getNodeUrl from'./getRpcUrl';const POLLING_INTERVAL=12000;const rpcUrl=getNodeUrl();const chainId=parseInt(process.env.REACT_APP_CHAIN_ID,10);const injected=new InjectedConnector({supportedChainIds:[43114,137,56,25,250,1,43113]});// const injected = new InjectedConnector({ supportedChainIds: [43113] })\nconst walletconnect=new WalletConnectConnector({rpc:{[chainId]:rpcUrl},bridge:'https://pancakeswap.bridge.walletconnect.org/',qrcode:true// pollingInterval: POLLING_INTERVAL,\n});const avaxConnector=new BscConnector({supportedChainIds:[43114,137]});export const connectorsByName={[ConnectorNames.Injected]:injected,[ConnectorNames.WalletConnect]:walletconnect,[ConnectorNames.AVAX]:avaxConnector};export const getLibrary=provider=>{const library=new ethers.providers.Web3Provider(provider);library.pollingInterval=POLLING_INTERVAL;return library;};/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */export const signMessage=async(provider,account,message)=>{var _provider$provider;if(window.BinanceChain){const{signature}=await window.BinanceChain.bnbSign(account,message);return signature;}/**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */if((_provider$provider=provider.provider)!==null&&_provider$provider!==void 0&&_provider$provider.wc){var _provider$provider2;const wcMessage=ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));const signature=await((_provider$provider2=provider.provider)===null||_provider$provider2===void 0?void 0:_provider$provider2.wc.signPersonalMessage([wcMessage,account]));return signature;}return provider.getSigner(account).signMessage(message);};","map":{"version":3,"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","ethers","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","avaxConnector","connectorsByName","Injected","WalletConnect","AVAX","getLibrary","provider","library","providers","Web3Provider","pollingInterval","signMessage","account","message","_provider$provider","window","BinanceChain","signature","bnbSign","wc","_provider$provider2","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/web3React.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from 'toolkit/uikit'\nimport { ethers } from 'ethers'\nimport Web3 from \"web3\";\nimport getNodeUrl from './getRpcUrl'\n\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\n\n\nconst injected = new InjectedConnector({ supportedChainIds: [43114,137,56,25,250,1,43113] })\n// const injected = new InjectedConnector({ supportedChainIds: [43113] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\n  qrcode: true,\n  // pollingInterval: POLLING_INTERVAL,\n})\n\nconst avaxConnector = new BscConnector({ supportedChainIds: [43114,137] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.AVAX]: avaxConnector,\n}\n\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = POLLING_INTERVAL\n  return library\n}\n\n/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n  if (window.BinanceChain) {\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\n    return signature\n  }\n\n  /**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */\n  if (provider.provider?.wc) {\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\n    return signature\n  }\n\n  return provider.getSigner(account).signMessage(message)\n}\n"],"mappings":"AACA,OAASA,iBAAiB,KAAQ,gCAAgC,CAClE,OAASC,sBAAsB,KAAQ,qCAAqC,CAC5E,OAASC,YAAY,KAAQ,8BAA8B,CAC3D,OAASC,cAAc,KAAQ,eAAe,CAC9C,OAASC,MAAM,KAAQ,QAAQ,CAE/B,MAAO,CAAAC,UAAU,KAAM,aAAa,CAGpC,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAC9B,KAAM,CAAAC,MAAM,CAAGF,UAAU,CAAC,CAAC,CAC3B,KAAM,CAAAG,OAAO,CAAGC,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAE,EAAE,CAAC,CAI5D,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAb,iBAAiB,CAAC,CAAEc,iBAAiB,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAE,CAAC,CAAC,CAC5F;AAEA,KAAM,CAAAC,aAAa,CAAG,GAAI,CAAAd,sBAAsB,CAAC,CAC/Ce,GAAG,CAAE,CAAE,CAACR,OAAO,EAAGD,MAAO,CAAC,CAC1BU,MAAM,CAAE,+CAA+C,CACvDC,MAAM,CAAE,IACR;AACF,CAAC,CAAC,CAEF,KAAM,CAAAC,aAAa,CAAG,GAAI,CAAAjB,YAAY,CAAC,CAAEY,iBAAiB,CAAE,CAAC,KAAK,CAAC,GAAG,CAAE,CAAC,CAAC,CAE1E,MAAO,MAAM,CAAAM,gBAA4D,CAAG,CAE1E,CAACjB,cAAc,CAACkB,QAAQ,EAAGR,QAAQ,CACnC,CAACV,cAAc,CAACmB,aAAa,EAAGP,aAAa,CAC7C,CAACZ,cAAc,CAACoB,IAAI,EAAGJ,aACzB,CAAC,CAED,MAAO,MAAM,CAAAK,UAAU,CAAIC,QAAQ,EAAoC,CACrE,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAtB,MAAM,CAACuB,SAAS,CAACC,YAAY,CAACH,QAAQ,CAAC,CAC3DC,OAAO,CAACG,eAAe,CAAGvB,gBAAgB,CAC1C,MAAO,CAAAoB,OAAO,CAChB,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,WAAW,CAAG,KAAAA,CAAOL,QAAa,CAAEM,OAAe,CAAEC,OAAe,GAAsB,KAAAC,kBAAA,CACrG,GAAIC,MAAM,CAACC,YAAY,CAAE,CACvB,KAAM,CAAEC,SAAU,CAAC,CAAG,KAAM,CAAAF,MAAM,CAACC,YAAY,CAACE,OAAO,CAACN,OAAO,CAAEC,OAAO,CAAC,CACzE,MAAO,CAAAI,SAAS,CAClB,CAEA;AACF;AACA;AACA,KACE,IAAAH,kBAAA,CAAIR,QAAQ,CAACA,QAAQ,UAAAQ,kBAAA,WAAjBA,kBAAA,CAAmBK,EAAE,CAAE,KAAAC,mBAAA,CACzB,KAAM,CAAAC,SAAS,CAAGpC,MAAM,CAACqC,KAAK,CAACC,OAAO,CAACtC,MAAM,CAACqC,KAAK,CAACE,WAAW,CAACX,OAAO,CAAC,CAAC,CACzE,KAAM,CAAAI,SAAS,CAAG,OAAAG,mBAAA,CAAMd,QAAQ,CAACA,QAAQ,UAAAc,mBAAA,iBAAjBA,mBAAA,CAAmBD,EAAE,CAACM,mBAAmB,CAAC,CAACJ,SAAS,CAAET,OAAO,CAAC,CAAC,EACvF,MAAO,CAAAK,SAAS,CAClB,CAEA,MAAO,CAAAX,QAAQ,CAACoB,SAAS,CAACd,OAAO,CAAC,CAACD,WAAW,CAACE,OAAO,CAAC,CACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}