{"ast":null,"code":"var _jsxFileName = \"/Users/namratapatel/upwork/SmartFinance-OmniDex/src/contexts/RefreshContext.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\nconst RefreshContext = /*#__PURE__*/React.createContext({\n  slow: 0,\n  fast: 0\n});\n\n// Check if the tab is active in the user browser\nconst useIsBrowserTabActive = () => {\n  const isBrowserTabActiveRef = useRef(true);\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden;\n    };\n    window.addEventListener('visibilitychange', onVisibilityChange);\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, []);\n  return isBrowserTabActiveRef;\n};\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({\n  children\n}) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const isBrowserTabActiveRef = useIsBrowserTabActive();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast(prev => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow(prev => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  return /*#__PURE__*/_jsxDEV(RefreshContext.Provider, {\n    value: {\n      slow,\n      fast\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\nexport { RefreshContext, RefreshContextProvider };","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","useIsBrowserTabActive","isBrowserTabActiveRef","onVisibilityChange","current","document","hidden","window","addEventListener","removeEventListener","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/contexts/RefreshContext.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// Check if the tab is active in the user browser\nconst useIsBrowserTabActive = () => {\n  const isBrowserTabActiveRef = useRef(true)\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden\n    }\n\n    window.addEventListener('visibilitychange', onVisibilityChange)\n\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange)\n    }\n  }, [])\n\n  return isBrowserTabActiveRef\n}\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const isBrowserTabActiveRef = useIsBrowserTabActive()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [isBrowserTabActiveRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [isBrowserTabActiveRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAG,KAAK;AAC3B,MAAMC,aAAa,GAAG,KAAK;AAE3B,MAAMC,cAAc,gBAAGR,KAAK,CAACS,aAAa,CAAC;EAAEC,IAAI,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAE,CAAC,CAAC;;AAEhE;AACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAClC,MAAMC,qBAAqB,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMY,kBAAkB,GAAGA,CAAA,KAAM;MAC/BD,qBAAqB,CAACE,OAAO,GAAG,CAACC,QAAQ,CAACC,MAAM;IAClD,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,kBAAkB,EAAEL,kBAAkB,CAAC;IAE/D,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAmB,CAAC,kBAAkB,EAAEN,kBAAkB,CAAC;IACpE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,qBAAqB;AAC9B,CAAC;;AAED;AACA,MAAMQ,sBAAsB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC/C,MAAM,CAACZ,IAAI,EAAEa,OAAO,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACU,IAAI,EAAEa,OAAO,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMY,qBAAqB,GAAGD,qBAAqB,CAAC,CAAC;EAErDV,SAAS,CAAC,MAAM;IACd,MAAMuB,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,IAAIb,qBAAqB,CAACE,OAAO,EAAE;QACjCS,OAAO,CAAEG,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MAC7B;IACF,CAAC,EAAErB,aAAa,CAAC;IACjB,OAAO,MAAMsB,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACZ,qBAAqB,CAAC,CAAC;EAE3BX,SAAS,CAAC,MAAM;IACd,MAAMuB,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,IAAIb,qBAAqB,CAACE,OAAO,EAAE;QACjCQ,OAAO,CAAEI,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MAC7B;IACF,CAAC,EAAEpB,aAAa,CAAC;IACjB,OAAO,MAAMqB,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACZ,qBAAqB,CAAC,CAAC;EAE3B,oBAAOR,OAAA,CAACG,cAAc,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,IAAI;MAAEC;IAAK,CAAE;IAAAW,QAAA,EAAEA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA0B,CAAC;AAC7F,CAAC;AAED,SAAS1B,cAAc,EAAEa,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module"}