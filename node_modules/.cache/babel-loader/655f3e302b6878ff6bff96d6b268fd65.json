{"ast":null,"code":"import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from 'hooks/useRefresh';\nimport { nonArchivedFarms } from '.';\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n  }, [includeArchive, dispatch, slowRefresh, account]);\n};\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    // dispatch(fetchFarmsPublicDataAsync([251, 252]))  \n    // dispatch(fetchFarmsPublicDataAsync([0, 1]))  // pid_config\n  }, [dispatch, fastRefresh]);\n};\nexport const useFarms = () => {\n  const farms = useSelector(state => state.farms);\n  return farms;\n};\nexport const useFarmFromPid = pid => {\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\nexport const useFarmFromLpSymbol = lpSymbol => {\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\nexport const useFarmUser = pid => {\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n};\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = pid => {\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.token.busdPrice);\n};\nexport const useLpTokenPrice = symbol => {\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal);\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2);\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n  return lpTokenPrice;\n};\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n\nexport const usePriceBnbBusd = () => {\n  // const bnbBusdFarm = useFarmFromPid(252)\n  const bnbBusdFarm = useFarmFromPid(1); // pid_config\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice);\n};\nexport const usePriceCakeBusd = () => {\n  // const cakeBnbFarm = useFarmFromPid(251)\n  const cakeBnbFarm = useFarmFromPid(0); // pid_config\n  return new BigNumber(cakeBnbFarm.token.busdPrice);\n};","map":{"version":3,"names":["useEffect","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","nonArchivedFarms","usePollFarmsData","includeArchive","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","bnbBusdFarm","quoteToken","usePriceCakeBusd","cakeBnbFarm"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/farms/hooks.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\nimport { State, Farm, FarmsState } from '../types'\n\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    // dispatch(fetchFarmsPublicDataAsync([251, 252]))  \n    // dispatch(fetchFarmsPublicDataAsync([0, 1]))  // pid_config\n  }, [dispatch, fastRefresh])\n}\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.token.busdPrice)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  // const bnbBusdFarm = useFarmFromPid(252)\n  const bnbBusdFarm = useFarmFromPid(1) // pid_config\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice)\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const cakeBnbFarm = useFarmFromPid(251)\n  const cakeBnbFarm = useFarmFromPid(0) // pid_config\n  return new BigNumber(cakeBnbFarm.token.busdPrice)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}