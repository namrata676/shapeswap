{"ast":null,"code":"import { ChainId, JSBI, Percent, WETH } from 'toolkit/sdk';\nimport { BUSD, DAI, USDT, BTCB, CAKE, WBNB, UST, ETH, USDC } from './tokens';\n\n// export const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\nexport const ROUTER_ADDRESS = 'process.env.REACT_APP_ROUTER';\n\n// a list of tokens by chain\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], USDT, BTCB, UST, ETH, USDC],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\n\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\nexport const ADDITIONAL_BASES = {\n  [ChainId.MAINNET]: {},\n  [ChainId.TESTNET]: {}\n};\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {}\n};\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES = {\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], DAI, BUSD[ChainId.MAINNET], USDT],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[CAKE[ChainId.MAINNET], WBNB], [BUSD[ChainId.MAINNET], USDT], [DAI, USDT]]\n};\nexport const NetworkContextName = 'NETWORK';\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50;\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\nexport const BIG_INT_ZERO = JSBI.BigInt(0);\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000);\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport const MIN_BNB = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 BNB\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000));\nexport const ZERO_PERCENT = new Percent('0');\nexport const ONE_HUNDRED_PERCENT = new Percent('1');\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES = ['0x7F367cC41522cE07553e823bf3be79A889DEbe1B', '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b', '0x901bb9583b24D97e995513C6778dc6888AB6870e', '0xA7e5d5A720f06526557c513402f2e6B5fA20b008', '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C'];\nexport { default as farmsConfig } from './farms';\nexport { default as poolsConfig } from './pools';\nexport { default as ifosConfig } from './ifo';","map":{"version":3,"names":["ChainId","JSBI","Percent","WETH","BUSD","DAI","USDT","BTCB","CAKE","WBNB","UST","ETH","USDC","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","TESTNET","ADDITIONAL_BASES","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_BNB","exponentiate","BETTER_TRADE_LESS_HOPS_THRESHOLD","ZERO_PERCENT","ONE_HUNDRED_PERCENT","BLOCKED_ADDRESSES","default","farmsConfig","poolsConfig","ifosConfig"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/config/constants/index.ts"],"sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from 'toolkit/sdk'\nimport { BUSD, DAI, USDT, BTCB, CAKE, WBNB, UST, ETH, USDC } from './tokens'\n\n// export const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\nexport const ROUTER_ADDRESS = 'process.env.REACT_APP_ROUTER'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], USDT, BTCB, UST, ETH, USDC],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n  [ChainId.TESTNET]: {},\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], DAI, BUSD[ChainId.MAINNET], USDT],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [CAKE[ChainId.MAINNET], WBNB],\n    [BUSD[ChainId.MAINNET], USDT],\n    [DAI, USDT],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\n\nexport const ZERO_PERCENT = new Percent('0')\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES: string[] = [\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\n]\n\nexport { default as farmsConfig } from './farms'\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}