{"ast":null,"code":"import Cookies from'js-cookie';import{getProfileContract}from'utils/contractHelpers';import{getNftByTokenId}from'utils/collectibles';import{getTeam}from'state/teams/helpers';import{transformProfileResponse}from'./helpers';const profileContract=getProfileContract();const profileApi=process.env.REACT_APP_API_PROFILE;const getUsername=async address=>{try{const response=await fetch(\"\".concat(profileApi,\"/api/users/\").concat(address));if(!response.ok){return'';}const{username=''}=await response.json();return username;}catch(error){return'';}};const getProfile=async address=>{try{const hasRegistered=await profileContract.hasRegistered(address);if(!hasRegistered){return{hasRegistered,profile:null};}const profileResponse=await profileContract.getUserProfile(address);const{userId,points,teamId,tokenId,nftAddress,isActive}=transformProfileResponse(profileResponse);const team=await getTeam(teamId);const username=await getUsername(address);// If the profile is not active the tokenId returns 0, which is still a valid token id\n// so only fetch the nft data if active\nlet nft;if(isActive){var _nft;nft=await getNftByTokenId(nftAddress,tokenId);// Save the preview image in a cookie so it can be used on the exchange\nCookies.set(\"profile_\".concat(address),{username,avatar:\"https://pancakeswap.finance/images/nfts/\".concat((_nft=nft)===null||_nft===void 0?void 0:_nft.images.sm)},{domain:'pancakeswap.finance',secure:true,expires:30});}const profile={userId,points,teamId,tokenId,username,nftAddress,isActive,nft,team};return{hasRegistered,profile};}catch(error){return null;}};export default getProfile;","map":{"version":3,"names":["Cookies","getProfileContract","getNftByTokenId","getTeam","transformProfileResponse","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","response","fetch","concat","ok","username","json","error","getProfile","hasRegistered","profile","profileResponse","getUserProfile","userId","points","teamId","tokenId","nftAddress","isActive","team","nft","_nft","set","avatar","images","sm","domain","secure","expires"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/profile/getProfile.ts"],"sourcesContent":["import Cookies from 'js-cookie'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { getNftByTokenId } from 'utils/collectibles'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.hasRegistered(address)) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      nft = await getNftByTokenId(nftAddress, tokenId)\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n"],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,WAAW,CAC/B,OAASC,kBAAkB,KAAQ,uBAAuB,CAE1D,OAASC,eAAe,KAAQ,oBAAoB,CAEpD,OAASC,OAAO,KAAQ,qBAAqB,CAC7C,OAASC,wBAAwB,KAAQ,WAAW,CAEpD,KAAM,CAAAC,eAAe,CAAGJ,kBAAkB,CAAC,CAAC,CAC5C,KAAM,CAAAK,UAAU,CAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAOpD,KAAM,CAAAC,WAAW,CAAG,KAAO,CAAAC,OAAe,EAAsB,CAC9D,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIR,UAAU,gBAAAQ,MAAA,CAAcH,OAAO,CAAE,CAAC,CAElE,GAAI,CAACC,QAAQ,CAACG,EAAE,CAAE,CAChB,MAAO,EAAE,CACX,CAEA,KAAM,CAAEC,QAAQ,CAAG,EAAG,CAAC,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAE/C,MAAO,CAAAD,QAAQ,CACjB,CAAE,MAAOE,KAAK,CAAE,CACd,MAAO,EAAE,CACX,CACF,CAAC,CAED,KAAM,CAAAC,UAAU,CAAG,KAAO,CAAAR,OAAe,EAAkC,CACzE,GAAI,CACF,KAAM,CAAAS,aAAa,CAAI,KAAM,CAAAf,eAAe,CAACe,aAAa,CAACT,OAAO,CAAa,CAE/E,GAAI,CAACS,aAAa,CAAE,CAClB,MAAO,CAAEA,aAAa,CAAEC,OAAO,CAAE,IAAK,CAAC,CACzC,CAEA,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAAjB,eAAe,CAACkB,cAAc,CAACZ,OAAO,CAAC,CACrE,KAAM,CAAEa,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,OAAO,CAAEC,UAAU,CAAEC,QAAS,CAAC,CAAGzB,wBAAwB,CAACkB,eAAe,CAAC,CAC3G,KAAM,CAAAQ,IAAI,CAAG,KAAM,CAAA3B,OAAO,CAACuB,MAAM,CAAC,CAClC,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,WAAW,CAACC,OAAO,CAAC,CAE3C;AACA;AACA,GAAI,CAAAoB,GAAQ,CACZ,GAAIF,QAAQ,CAAE,KAAAG,IAAA,CACZD,GAAG,CAAG,KAAM,CAAA7B,eAAe,CAAC0B,UAAU,CAAED,OAAO,CAAC,CAEhD;AACA3B,OAAO,CAACiC,GAAG,YAAAnB,MAAA,CACEH,OAAO,EAClB,CACEK,QAAQ,CACRkB,MAAM,4CAAApB,MAAA,EAAAkB,IAAA,CAA6CD,GAAG,UAAAC,IAAA,iBAAHA,IAAA,CAAKG,MAAM,CAACC,EAAE,CACnE,CAAC,CACD,CAAEC,MAAM,CAAE,qBAAqB,CAAEC,MAAM,CAAE,IAAI,CAAEC,OAAO,CAAE,EAAG,CAC7D,CAAC,CACH,CAEA,KAAM,CAAAlB,OAAO,CAAG,CACdG,MAAM,CACNC,MAAM,CACNC,MAAM,CACNC,OAAO,CACPX,QAAQ,CACRY,UAAU,CACVC,QAAQ,CACRE,GAAG,CACHD,IACF,CAAY,CAEZ,MAAO,CAAEV,aAAa,CAAEC,OAAQ,CAAC,CACnC,CAAE,MAAOH,KAAK,CAAE,CACd,MAAO,KAAI,CACb,CACF,CAAC,CAED,cAAe,CAAAC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}