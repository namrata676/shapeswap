{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { campaignMap } from 'config/constants/campaigns';\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints';\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements';\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async account => {\n  try {\n    const {\n      user\n    } = await request(GRAPH_API_PROFILE, gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `, {\n      account: account.toLowerCase()\n    });\n    return user.points;\n  } catch (error) {\n    return null;\n  }\n};\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async account => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account);\n  if (!pointIncreaseEvents) {\n    return [];\n  }\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    if (!campaignMap.has(userPoint.campaignId)) {\n      return accum;\n    }\n    const campaignMeta = campaignMap.get(userPoint.campaignId);\n    return [...accum, {\n      id: userPoint.campaignId,\n      type: campaignMeta.type,\n      address: userPoint.id,\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(userPoint.points)\n    }];\n  }, []);\n};","map":{"version":3,"names":["request","gql","campaignMap","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","user","toLowerCase","points","error","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","has","campaignId","campaignMeta","get","id","type","address","title","description","badge","Number"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/achievements/helpers.ts"],"sourcesContent":["import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    if (!campaignMap.has(userPoint.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    return [\n      ...accum,\n      {\n        id: userPoint.campaignId,\n        type: campaignMeta.type,\n        address: userPoint.id,\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(userPoint.points),\n      },\n    ]\n  }, [])\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,GAAG,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,iBAAiB,QAAQ,4BAA4B;AAE9D,SAASC,mBAAmB,EAAEC,yBAAyB,QAAQ,oBAAoB;AAQnF;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,OAAe,IAAwC;EACtG,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,OAAO,CAC5BG,iBAAiB,EACjBF,GAAG;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EACD;MACEM,OAAO,EAAEA,OAAO,CAACE,WAAW,CAAC;IAC/B,CACF,CAAC;IAED,OAAOD,IAAI,CAACE,MAAM;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOL,OAAe,IAA6B;EAChF,MAAMM,mBAAmB,GAAG,MAAMP,0BAA0B,CAACC,OAAO,CAAC;EAErE,IAAI,CAACM,mBAAmB,EAAE;IACxB,OAAO,EAAE;EACX;EAEA,OAAOA,mBAAmB,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,SAAS,KAAK;IACtD,IAAI,CAACd,WAAW,CAACe,GAAG,CAACD,SAAS,CAACE,UAAU,CAAC,EAAE;MAC1C,OAAOH,KAAK;IACd;IAEA,MAAMI,YAAY,GAAGjB,WAAW,CAACkB,GAAG,CAACJ,SAAS,CAACE,UAAU,CAAC;IAE1D,OAAO,CACL,GAAGH,KAAK,EACR;MACEM,EAAE,EAAEL,SAAS,CAACE,UAAU;MACxBI,IAAI,EAAEH,YAAY,CAACG,IAAI;MACvBC,OAAO,EAAEP,SAAS,CAACK,EAAE;MACrBG,KAAK,EAAEpB,mBAAmB,CAACe,YAAY,CAAC;MACxCM,WAAW,EAAEpB,yBAAyB,CAACc,YAAY,CAAC;MACpDO,KAAK,EAAEP,YAAY,CAACO,KAAK;MACzBhB,MAAM,EAAEiB,MAAM,CAACX,SAAS,CAACN,MAAM;IACjC,CAAC,CACF;EACH,CAAC,EAAE,EAAE,CAAC;AACR,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}