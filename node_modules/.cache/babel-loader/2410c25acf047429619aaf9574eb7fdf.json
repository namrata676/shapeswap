{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, _ref) => {\n  let {\n    payload: {\n      typedValue,\n      recipient,\n      field,\n      inputCurrencyId,\n      outputCurrencyId\n    }\n  } = _ref;\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    independentField: field,\n    typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, _ref2) => {\n  let {\n    payload: {\n      currencyId,\n      field\n    }\n  } = _ref2;\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return {\n      ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  }\n  // the normal case\n  return {\n    ...state,\n    [field]: {\n      currencyId\n    }\n  };\n}).addCase(switchCurrencies, state => {\n  return {\n    ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, _ref3) => {\n  let {\n    payload: {\n      field,\n      typedValue\n    }\n  } = _ref3;\n  return {\n    ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, _ref4) => {\n  let {\n    payload: {\n      recipient\n    }\n  } = _ref4;\n  state.recipient = recipient;\n}));","map":{"version":3,"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","builder","addCase","state","payload","field","inputCurrencyId","outputCurrencyId","otherField"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n  },\n  recipient: null,\n}\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId,\n          },\n          independentField: field,\n          typedValue,\n          recipient,\n        }\n      },\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        }\n      }\n      // the normal case\n      return {\n        ...state,\n        [field]: { currencyId },\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    }),\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}