{"ast":null,"code":"import { useMemo, useReducer, useEffect, useCallback } from \"react\";\nimport noop from \"lodash/noop\";\nimport { byTextAscending, byTextDescending } from \"./utils\";\nconst sortByColumn = (data, sortColumn, columns) => {\n  let isAscending = null;\n  let sortedRows = [...data];\n  columns.forEach(column => {\n    // if the row was found\n    if (sortColumn === column.name) {\n      isAscending = column.sorted.asc;\n      if (column.sort) {\n        sortedRows = isAscending ? data.sort(column.sort) : data.sort(column.sort).reverse();\n        // default to sort by string\n      } else {\n        sortedRows = isAscending ? data.sort(byTextAscending(object => object.original[sortColumn])) : data.sort(byTextDescending(object => object.original[sortColumn]));\n      }\n    }\n  });\n  return sortedRows;\n};\nconst getPaginatedData = (rows, perPage, page) => {\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  return rows.slice(start, end);\n};\nconst getColumnsByName = columns => {\n  const columnsByName = {};\n  columns.forEach(column => {\n    const col = {\n      name: column.name,\n      label: column.label\n    };\n    if (column.render) {\n      col.render = column.render;\n    }\n    col.hidden = column.hidden;\n    columnsByName[column.name] = col;\n  });\n  return columnsByName;\n};\nconst createReducer = () => (state, action) => {\n  let rows = [];\n  let nextPage = 0;\n  let prevPage = 0;\n  let isAscending = null;\n  let sortedRows = [];\n  let columnCopy = [];\n  let filteredRows = [];\n  let selectedRowsById = {};\n  let stateCopy = {\n    ...state\n  };\n  const rowIds = {};\n  switch (action.type) {\n    case \"SET_ROWS\":\n      rows = [...action.data];\n      // preserve sorting if a sort is already enabled when data changes\n      if (state.sortColumn) {\n        rows = sortByColumn(action.data, state.sortColumn, state.columns);\n      }\n      if (state.paginationEnabled === true) {\n        rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n      }\n      if (state.paginationEnabled === true) {\n        rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n      }\n      columnCopy = state.columns.map(column => {\n        if (state.sortColumn === column.name) {\n          return {\n            ...column,\n            sorted: {\n              on: true,\n              asc: column.sorted.asc\n            }\n          };\n        }\n        return column;\n      });\n      return {\n        ...state,\n        rows,\n        originalRows: action.data,\n        columns: columnCopy\n      };\n    case \"NEXT_PAGE\":\n      nextPage = state.pagination.page + 1;\n      return {\n        ...state,\n        rows: getPaginatedData(state.originalRows, state.pagination.perPage, nextPage),\n        pagination: {\n          ...state.pagination,\n          page: nextPage,\n          canNext: nextPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: nextPage !== 1\n        }\n      };\n    case \"PREV_PAGE\":\n      prevPage = state.pagination.page === 1 ? 1 : state.pagination.page - 1;\n      return {\n        ...state,\n        rows: getPaginatedData(state.originalRows, state.pagination.perPage, prevPage),\n        pagination: {\n          ...state.pagination,\n          page: prevPage,\n          canNext: prevPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: prevPage !== 1\n        }\n      };\n    case \"TOGGLE_SORT\":\n      if (!(action.columnName in state.columnsByName)) {\n        throw new Error(`Invalid column, ${action.columnName} not found`);\n      }\n\n      // loop through all columns and set the sort parameter to off unless\n      // it's the specified column (only one column at a time for )\n      columnCopy = state.columns.map(column => {\n        // if the row was found\n        if (action.columnName === column.name) {\n          if (action.isAscOverride !== undefined) {\n            // force the sort order\n            isAscending = action.isAscOverride;\n          } else {\n            // if it's undefined, start by setting to ascending, otherwise toggle\n            isAscending = column.sorted.asc === undefined ? true : !column.sorted.asc;\n          }\n          if (column.sort) {\n            sortedRows = isAscending ? state.rows.sort(column.sort) : state.rows.sort(column.sort).reverse();\n            // default to sort by string\n          } else {\n            sortedRows = isAscending ? state.rows.sort(byTextAscending(object => object.original[action.columnName])) : state.rows.sort(byTextDescending(object => object.original[action.columnName]));\n          }\n          return {\n            ...column,\n            sorted: {\n              on: true,\n              asc: isAscending\n            }\n          };\n        }\n        // set sorting to false for all other columns\n        return {\n          ...column,\n          sorted: {\n            on: false,\n            asc: false\n          }\n        };\n      });\n      return {\n        ...state,\n        columns: columnCopy,\n        rows: sortedRows,\n        sortColumn: action.columnName,\n        columnsByName: getColumnsByName(columnCopy)\n      };\n    case \"GLOBAL_FILTER\":\n      filteredRows = action.filter(state.originalRows);\n      selectedRowsById = {};\n      state.selectedRows.forEach(row => {\n        var _row$selected;\n        selectedRowsById[row.id] = (_row$selected = row.selected) !== null && _row$selected !== void 0 ? _row$selected : false;\n      });\n      return {\n        ...state,\n        rows: filteredRows.map(row => {\n          return selectedRowsById[row.id] ? {\n            ...row,\n            selected: selectedRowsById[row.id]\n          } : {\n            ...row\n          };\n        }),\n        filterOn: true\n      };\n    case \"SELECT_ROW\":\n      stateCopy = {\n        ...state\n      };\n      stateCopy.rows = stateCopy.rows.map(row => {\n        const newRow = {\n          ...row\n        };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n      stateCopy.originalRows = stateCopy.originalRows.map(row => {\n        const newRow = {\n          ...row\n        };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n      stateCopy.selectedRows = stateCopy.originalRows.filter(row => row.selected === true);\n      stateCopy.toggleAllState = stateCopy.selectedRows.length === stateCopy.rows.length ? stateCopy.toggleAllState = true : stateCopy.toggleAllState = false;\n      return stateCopy;\n    case \"SEARCH_STRING\":\n      stateCopy = {\n        ...state\n      };\n      stateCopy.rows = stateCopy.originalRows.filter(row => {\n        return row.cells.filter(cell => {\n          if (cell.value.includes(action.searchString)) {\n            return true;\n          }\n          return false;\n        }).length > 0;\n      });\n      return stateCopy;\n    case \"TOGGLE_ALL\":\n      if (state.selectedRows.length < state.rows.length) {\n        stateCopy.rows = stateCopy.rows.map(row => {\n          rowIds[row.id] = true;\n          return {\n            ...row,\n            selected: true\n          };\n        });\n        stateCopy.toggleAllState = true;\n      } else {\n        stateCopy.rows = stateCopy.rows.map(row => {\n          rowIds[row.id] = false;\n          return {\n            ...row,\n            selected: false\n          };\n        });\n        stateCopy.toggleAllState = false;\n      }\n      stateCopy.originalRows = stateCopy.originalRows.map(row => {\n        return row.id in rowIds ? {\n          ...row,\n          selected: rowIds[row.id]\n        } : {\n          ...row\n        };\n      });\n      stateCopy.selectedRows = stateCopy.originalRows.filter(row => row.selected);\n      return stateCopy;\n    default:\n      throw new Error(\"Invalid reducer action\");\n  }\n};\nconst sortDataInOrder = (data, columns) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return data.map(row => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const newRow = {};\n    columns.forEach(column => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`);\n      }\n      newRow[column.name] = row[column.name];\n    });\n    return newRow;\n  });\n};\nexport const makeRender = (value, render, row) => {\n  return render ? () => render({\n    row,\n    value\n  }) : () => value;\n};\nconst makeHeaderRender = (label, render) => {\n  return render ? () => render({\n    label\n  }) : () => label;\n};\nexport const useTable = (columns, data, options) => {\n  const columnsWithSorting = useMemo(() => columns.map(column => {\n    return {\n      ...column,\n      label: column.label ? column.label : column.name,\n      hidden: column.hidden ? column.hidden : false,\n      sort: column.sort,\n      sorted: {\n        on: false,\n        asc: false\n      }\n    };\n  }), [columns]);\n  const columnsByName = useMemo(() => getColumnsByName(columnsWithSorting), [columnsWithSorting]);\n  const tableData = useMemo(() => {\n    const sortedData = sortDataInOrder(data, columnsWithSorting);\n    const newData = sortedData.map((row, idx) => {\n      return {\n        id: idx,\n        selected: false,\n        hidden: false,\n        original: row,\n        cells: Object.entries(row).map(([column, value]) => {\n          return {\n            hidden: columnsByName[column].hidden,\n            field: column,\n            value,\n            render: makeRender(value, columnsByName[column].render, row)\n          };\n        }).filter(cell => !cell.hidden)\n      };\n    });\n    return newData;\n  }, [data, columnsWithSorting, columnsByName]);\n  const reducer = createReducer();\n  const [state, dispatch] = useReducer(reducer, {\n    columns: columnsWithSorting,\n    columnsByName,\n    originalRows: tableData,\n    rows: tableData,\n    selectedRows: [],\n    toggleAllState: false,\n    filterOn: !!(options !== null && options !== void 0 && options.filter),\n    sortColumn: options === null || options === void 0 ? void 0 : options.sortColumn,\n    paginationEnabled: !!(options !== null && options !== void 0 && options.pagination),\n    pagination: {\n      page: 1,\n      perPage: 10,\n      canNext: true,\n      canPrev: false,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      nextPage: noop,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      prevPage: noop\n    }\n  });\n  state.pagination.nextPage = useCallback(() => {\n    dispatch({\n      type: \"NEXT_PAGE\"\n    });\n  }, [dispatch]);\n  state.pagination.prevPage = useCallback(() => dispatch({\n    type: \"PREV_PAGE\"\n  }), [dispatch]);\n  useEffect(() => {\n    dispatch({\n      type: \"SET_ROWS\",\n      data: tableData\n    });\n  }, [tableData]);\n  const headers = useMemo(() => {\n    return [...state.columns.map(column => {\n      const label = column.label ? column.label : column.name;\n      return {\n        ...column,\n        render: makeHeaderRender(label, column.headerRender)\n      };\n    })];\n  }, [state.columns]);\n  useEffect(() => {\n    if (options && options.filter) {\n      dispatch({\n        type: \"GLOBAL_FILTER\",\n        filter: options.filter\n      });\n    }\n  });\n  return {\n    headers: headers.filter(column => !column.hidden),\n    rows: state.rows,\n    originalRows: state.originalRows,\n    selectedRows: state.selectedRows,\n    dispatch,\n    selectRow: rowId => dispatch({\n      type: \"SELECT_ROW\",\n      rowId\n    }),\n    toggleAll: () => dispatch({\n      type: \"TOGGLE_ALL\"\n    }),\n    toggleSort: (columnName, isAscOverride) => dispatch({\n      type: \"TOGGLE_SORT\",\n      columnName,\n      isAscOverride\n    }),\n    setSearchString: searchString => dispatch({\n      type: \"SEARCH_STRING\",\n      searchString\n    }),\n    pagination: state.pagination,\n    toggleAllState: state.toggleAllState\n  };\n};","map":{"version":3,"names":["useMemo","useReducer","useEffect","useCallback","noop","byTextAscending","byTextDescending","sortByColumn","data","sortColumn","columns","isAscending","sortedRows","forEach","column","name","sorted","asc","sort","reverse","object","original","getPaginatedData","rows","perPage","page","start","end","slice","getColumnsByName","columnsByName","col","label","render","hidden","createReducer","state","action","nextPage","prevPage","columnCopy","filteredRows","selectedRowsById","stateCopy","rowIds","type","paginationEnabled","pagination","map","on","originalRows","canNext","length","canPrev","columnName","Error","isAscOverride","undefined","filter","selectedRows","row","_row$selected","id","selected","filterOn","newRow","rowId","toggleAllState","cells","cell","value","includes","searchString","sortDataInOrder","makeRender","makeHeaderRender","useTable","options","columnsWithSorting","tableData","sortedData","newData","idx","Object","entries","field","reducer","dispatch","headers","headerRender","selectRow","toggleAll","toggleSort","setSearchString"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/uikit/components/Table/hooks.tsx"],"sourcesContent":["import { useMemo, useReducer, useEffect, ReactNode, useCallback } from \"react\";\nimport noop from \"lodash/noop\";\n\nimport {\n  ColumnByNamesType,\n  ColumnType,\n  TableState,\n  TableAction,\n  DataType,\n  UseTableReturnType,\n  UseTableOptionsType,\n  RowType,\n  HeaderType,\n  HeaderRenderType,\n  ColumnStateType,\n} from \"./types\";\nimport { byTextAscending, byTextDescending } from \"./utils\";\n\nconst sortByColumn = <T extends DataType>(\n  data: RowType<T>[],\n  sortColumn: string,\n  columns: ColumnStateType<T>[]\n): RowType<T>[] => {\n  let isAscending = null;\n  let sortedRows: RowType<T>[] = [...data];\n\n  columns.forEach((column) => {\n    // if the row was found\n    if (sortColumn === column.name) {\n      isAscending = column.sorted.asc;\n\n      if (column.sort) {\n        sortedRows = isAscending ? data.sort(column.sort) : data.sort(column.sort).reverse();\n        // default to sort by string\n      } else {\n        sortedRows = isAscending\n          ? data.sort(byTextAscending((object) => object.original[sortColumn]))\n          : data.sort(byTextDescending((object) => object.original[sortColumn]));\n      }\n    }\n  });\n\n  return sortedRows;\n};\n\nconst getPaginatedData = <T extends DataType>(rows: RowType<T>[], perPage: number, page: number) => {\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  return rows.slice(start, end);\n};\n\nconst getColumnsByName = <T extends DataType>(columns: ColumnType<T>[]): ColumnByNamesType<T> => {\n  const columnsByName: ColumnByNamesType<T> = {};\n  columns.forEach((column) => {\n    const col: ColumnType<T> = {\n      name: column.name,\n      label: column.label,\n    };\n\n    if (column.render) {\n      col.render = column.render;\n    }\n    col.hidden = column.hidden;\n    columnsByName[column.name] = col;\n  });\n\n  return columnsByName;\n};\n\nconst createReducer =\n  <T extends DataType>() =>\n  (state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    let rows = [];\n    let nextPage = 0;\n    let prevPage = 0;\n    let isAscending = null;\n    let sortedRows: RowType<T>[] = [];\n    let columnCopy = [];\n    let filteredRows = [];\n    let selectedRowsById: { [key: number]: boolean } = {};\n    let stateCopy: TableState<T> = { ...state };\n    const rowIds: { [key: number]: boolean } = {};\n\n    switch (action.type) {\n      case \"SET_ROWS\":\n        rows = [...action.data];\n        // preserve sorting if a sort is already enabled when data changes\n        if (state.sortColumn) {\n          rows = sortByColumn(action.data, state.sortColumn, state.columns);\n        }\n\n        if (state.paginationEnabled === true) {\n          rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n        }\n\n        if (state.paginationEnabled === true) {\n          rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n        }\n\n        columnCopy = state.columns.map((column) => {\n          if (state.sortColumn === column.name) {\n            return {\n              ...column,\n              sorted: {\n                on: true,\n                asc: column.sorted.asc,\n              },\n            };\n          }\n\n          return column;\n        });\n\n        return {\n          ...state,\n          rows,\n          originalRows: action.data,\n          columns: columnCopy,\n        };\n\n      case \"NEXT_PAGE\":\n        nextPage = state.pagination.page + 1;\n        return {\n          ...state,\n          rows: getPaginatedData(state.originalRows, state.pagination.perPage, nextPage),\n          pagination: {\n            ...state.pagination,\n            page: nextPage,\n            canNext: nextPage * state.pagination.perPage < state.originalRows.length,\n            canPrev: nextPage !== 1,\n          },\n        };\n      case \"PREV_PAGE\":\n        prevPage = state.pagination.page === 1 ? 1 : state.pagination.page - 1;\n\n        return {\n          ...state,\n          rows: getPaginatedData(state.originalRows, state.pagination.perPage, prevPage),\n          pagination: {\n            ...state.pagination,\n            page: prevPage,\n            canNext: prevPage * state.pagination.perPage < state.originalRows.length,\n            canPrev: prevPage !== 1,\n          },\n        };\n      case \"TOGGLE_SORT\":\n        if (!(action.columnName in state.columnsByName)) {\n          throw new Error(`Invalid column, ${action.columnName} not found`);\n        }\n\n        // loop through all columns and set the sort parameter to off unless\n        // it's the specified column (only one column at a time for )\n        columnCopy = state.columns.map((column) => {\n          // if the row was found\n          if (action.columnName === column.name) {\n            if (action.isAscOverride !== undefined) {\n              // force the sort order\n              isAscending = action.isAscOverride;\n            } else {\n              // if it's undefined, start by setting to ascending, otherwise toggle\n              isAscending = column.sorted.asc === undefined ? true : !column.sorted.asc;\n            }\n\n            if (column.sort) {\n              sortedRows = isAscending ? state.rows.sort(column.sort) : state.rows.sort(column.sort).reverse();\n              // default to sort by string\n            } else {\n              sortedRows = isAscending\n                ? state.rows.sort(byTextAscending((object) => object.original[action.columnName]))\n                : state.rows.sort(byTextDescending((object) => object.original[action.columnName]));\n            }\n            return {\n              ...column,\n              sorted: {\n                on: true,\n                asc: isAscending,\n              },\n            };\n          }\n          // set sorting to false for all other columns\n          return {\n            ...column,\n            sorted: {\n              on: false,\n              asc: false,\n            },\n          };\n        });\n\n        return {\n          ...state,\n          columns: columnCopy,\n          rows: sortedRows,\n          sortColumn: action.columnName,\n          columnsByName: getColumnsByName(columnCopy),\n        };\n      case \"GLOBAL_FILTER\":\n        filteredRows = action.filter(state.originalRows);\n        selectedRowsById = {};\n        state.selectedRows.forEach((row) => {\n          selectedRowsById[row.id] = row.selected ?? false;\n        });\n\n        return {\n          ...state,\n          rows: filteredRows.map((row) => {\n            return selectedRowsById[row.id] ? { ...row, selected: selectedRowsById[row.id] } : { ...row };\n          }),\n          filterOn: true,\n        };\n      case \"SELECT_ROW\":\n        stateCopy = { ...state };\n\n        stateCopy.rows = stateCopy.rows.map((row) => {\n          const newRow = { ...row };\n          if (newRow.id === action.rowId) {\n            newRow.selected = !newRow.selected;\n          }\n          return newRow;\n        });\n\n        stateCopy.originalRows = stateCopy.originalRows.map((row) => {\n          const newRow = { ...row };\n          if (newRow.id === action.rowId) {\n            newRow.selected = !newRow.selected;\n          }\n          return newRow;\n        });\n\n        stateCopy.selectedRows = stateCopy.originalRows.filter((row) => row.selected === true);\n\n        stateCopy.toggleAllState =\n          stateCopy.selectedRows.length === stateCopy.rows.length\n            ? (stateCopy.toggleAllState = true)\n            : (stateCopy.toggleAllState = false);\n\n        return stateCopy;\n      case \"SEARCH_STRING\":\n        stateCopy = { ...state };\n        stateCopy.rows = stateCopy.originalRows.filter((row) => {\n          return (\n            row.cells.filter((cell) => {\n              if (cell.value.includes(action.searchString)) {\n                return true;\n              }\n              return false;\n            }).length > 0\n          );\n        });\n        return stateCopy;\n      case \"TOGGLE_ALL\":\n        if (state.selectedRows.length < state.rows.length) {\n          stateCopy.rows = stateCopy.rows.map((row) => {\n            rowIds[row.id] = true;\n            return { ...row, selected: true };\n          });\n\n          stateCopy.toggleAllState = true;\n        } else {\n          stateCopy.rows = stateCopy.rows.map((row) => {\n            rowIds[row.id] = false;\n\n            return { ...row, selected: false };\n          });\n          stateCopy.toggleAllState = false;\n        }\n\n        stateCopy.originalRows = stateCopy.originalRows.map((row) => {\n          return row.id in rowIds ? { ...row, selected: rowIds[row.id] } : { ...row };\n        });\n\n        stateCopy.selectedRows = stateCopy.originalRows.filter((row) => row.selected);\n\n        return stateCopy;\n      default:\n        throw new Error(\"Invalid reducer action\");\n    }\n  };\n\nconst sortDataInOrder = <T extends DataType>(data: T[], columns: ColumnType<T>[]): T[] => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return data.map((row: any) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const newRow: any = {};\n    columns.forEach((column) => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`);\n      }\n      newRow[column.name] = row[column.name];\n    });\n    return newRow;\n  });\n};\n\nexport const makeRender = <T extends DataType>(\n  // eslint-disable-next-line\n  value: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  /*\n      // @ts-ignore */\n  render: (({ value: val, row }: { value: any; row: T }) => ReactNode) | undefined,\n  row: T\n): (() => React.ReactNode) => {\n  return render ? () => render({ row, value }) : () => value;\n};\n\nconst makeHeaderRender = (label: string, render?: HeaderRenderType) => {\n  return render ? () => render({ label }) : () => label;\n};\n\nexport const useTable = <T extends DataType>(\n  columns: ColumnType<T>[],\n  data: T[],\n  options?: UseTableOptionsType<T>\n): UseTableReturnType<T> => {\n  const columnsWithSorting: ColumnStateType<T>[] = useMemo(\n    () =>\n      columns.map((column) => {\n        return {\n          ...column,\n          label: column.label ? column.label : column.name,\n          hidden: column.hidden ? column.hidden : false,\n          sort: column.sort,\n          sorted: {\n            on: false,\n            asc: false,\n          },\n        };\n      }),\n    [columns]\n  );\n  const columnsByName = useMemo(() => getColumnsByName(columnsWithSorting), [columnsWithSorting]);\n\n  const tableData: RowType<T>[] = useMemo(() => {\n    const sortedData = sortDataInOrder(data, columnsWithSorting);\n\n    const newData = sortedData.map((row, idx) => {\n      return {\n        id: idx,\n        selected: false,\n        hidden: false,\n        original: row,\n        cells: Object.entries(row)\n          .map(([column, value]) => {\n            return {\n              hidden: columnsByName[column].hidden,\n              field: column,\n              value,\n              render: makeRender(value, columnsByName[column].render, row),\n            };\n          })\n          .filter((cell) => !cell.hidden),\n      };\n    });\n    return newData;\n  }, [data, columnsWithSorting, columnsByName]);\n\n  const reducer = createReducer<T>();\n\n  const [state, dispatch] = useReducer(reducer, {\n    columns: columnsWithSorting,\n    columnsByName,\n    originalRows: tableData,\n    rows: tableData,\n    selectedRows: [],\n    toggleAllState: false,\n    filterOn: !!options?.filter,\n    sortColumn: options?.sortColumn,\n    paginationEnabled: !!options?.pagination,\n    pagination: {\n      page: 1,\n      perPage: 10,\n      canNext: true,\n      canPrev: false,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      nextPage: noop,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      prevPage: noop,\n    },\n  });\n\n  state.pagination.nextPage = useCallback(() => {\n    dispatch({ type: \"NEXT_PAGE\" });\n  }, [dispatch]);\n  state.pagination.prevPage = useCallback(() => dispatch({ type: \"PREV_PAGE\" }), [dispatch]);\n\n  useEffect(() => {\n    dispatch({ type: \"SET_ROWS\", data: tableData });\n  }, [tableData]);\n\n  const headers: HeaderType<T>[] = useMemo(() => {\n    return [\n      ...state.columns.map((column) => {\n        const label = column.label ? column.label : column.name;\n        return {\n          ...column,\n          render: makeHeaderRender(label, column.headerRender),\n        };\n      }),\n    ];\n  }, [state.columns]);\n\n  useEffect(() => {\n    if (options && options.filter) {\n      dispatch({ type: \"GLOBAL_FILTER\", filter: options.filter });\n    }\n  });\n\n  return {\n    headers: headers.filter((column) => !column.hidden),\n    rows: state.rows,\n    originalRows: state.originalRows,\n    selectedRows: state.selectedRows,\n    dispatch,\n    selectRow: (rowId: number) => dispatch({ type: \"SELECT_ROW\", rowId }),\n    toggleAll: () => dispatch({ type: \"TOGGLE_ALL\" }),\n    toggleSort: (columnName: string, isAscOverride?: boolean) =>\n      dispatch({ type: \"TOGGLE_SORT\", columnName, isAscOverride }),\n    setSearchString: (searchString: string) => dispatch({ type: \"SEARCH_STRING\", searchString }),\n    pagination: state.pagination,\n    toggleAllState: state.toggleAllState,\n  };\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAaC,WAAW,QAAQ,OAAO;AAC9E,OAAOC,IAAI,MAAM,aAAa;AAe9B,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,SAAS;AAE3D,MAAMC,YAAY,GAAGA,CACnBC,IAAkB,EAClBC,UAAkB,EAClBC,OAA6B,KACZ;EACjB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,UAAwB,GAAG,CAAC,GAAGJ,IAAI,CAAC;EAExCE,OAAO,CAACG,OAAO,CAAEC,MAAM,IAAK;IAC1B;IACA,IAAIL,UAAU,KAAKK,MAAM,CAACC,IAAI,EAAE;MAC9BJ,WAAW,GAAGG,MAAM,CAACE,MAAM,CAACC,GAAG;MAE/B,IAAIH,MAAM,CAACI,IAAI,EAAE;QACfN,UAAU,GAAGD,WAAW,GAAGH,IAAI,CAACU,IAAI,CAACJ,MAAM,CAACI,IAAI,CAAC,GAAGV,IAAI,CAACU,IAAI,CAACJ,MAAM,CAACI,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;QACpF;MACF,CAAC,MAAM;QACLP,UAAU,GAAGD,WAAW,GACpBH,IAAI,CAACU,IAAI,CAACb,eAAe,CAAEe,MAAM,IAAKA,MAAM,CAACC,QAAQ,CAACZ,UAAU,CAAC,CAAC,CAAC,GACnED,IAAI,CAACU,IAAI,CAACZ,gBAAgB,CAAEc,MAAM,IAAKA,MAAM,CAACC,QAAQ,CAACZ,UAAU,CAAC,CAAC,CAAC;MAC1E;IACF;EACF,CAAC,CAAC;EAEF,OAAOG,UAAU;AACnB,CAAC;AAED,MAAMU,gBAAgB,GAAGA,CAAqBC,IAAkB,EAAEC,OAAe,EAAEC,IAAY,KAAK;EAClG,MAAMC,KAAK,GAAG,CAACD,IAAI,GAAG,CAAC,IAAID,OAAO;EAClC,MAAMG,GAAG,GAAGD,KAAK,GAAGF,OAAO;EAC3B,OAAOD,IAAI,CAACK,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;AAC/B,CAAC;AAED,MAAME,gBAAgB,GAAwBnB,OAAwB,IAA2B;EAC/F,MAAMoB,aAAmC,GAAG,CAAC,CAAC;EAC9CpB,OAAO,CAACG,OAAO,CAAEC,MAAM,IAAK;IAC1B,MAAMiB,GAAkB,GAAG;MACzBhB,IAAI,EAAED,MAAM,CAACC,IAAI;MACjBiB,KAAK,EAAElB,MAAM,CAACkB;IAChB,CAAC;IAED,IAAIlB,MAAM,CAACmB,MAAM,EAAE;MACjBF,GAAG,CAACE,MAAM,GAAGnB,MAAM,CAACmB,MAAM;IAC5B;IACAF,GAAG,CAACG,MAAM,GAAGpB,MAAM,CAACoB,MAAM;IAC1BJ,aAAa,CAAChB,MAAM,CAACC,IAAI,CAAC,GAAGgB,GAAG;EAClC,CAAC,CAAC;EAEF,OAAOD,aAAa;AACtB,CAAC;AAED,MAAMK,aAAa,GACjBA,CAAA,KACA,CAACC,KAAoB,EAAEC,MAAsB,KAAoB;EAC/D,IAAId,IAAI,GAAG,EAAE;EACb,IAAIe,QAAQ,GAAG,CAAC;EAChB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAI5B,WAAW,GAAG,IAAI;EACtB,IAAIC,UAAwB,GAAG,EAAE;EACjC,IAAI4B,UAAU,GAAG,EAAE;EACnB,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,gBAA4C,GAAG,CAAC,CAAC;EACrD,IAAIC,SAAwB,GAAG;IAAE,GAAGP;EAAM,CAAC;EAC3C,MAAMQ,MAAkC,GAAG,CAAC,CAAC;EAE7C,QAAQP,MAAM,CAACQ,IAAI;IACjB,KAAK,UAAU;MACbtB,IAAI,GAAG,CAAC,GAAGc,MAAM,CAAC7B,IAAI,CAAC;MACvB;MACA,IAAI4B,KAAK,CAAC3B,UAAU,EAAE;QACpBc,IAAI,GAAGhB,YAAY,CAAC8B,MAAM,CAAC7B,IAAI,EAAE4B,KAAK,CAAC3B,UAAU,EAAE2B,KAAK,CAAC1B,OAAO,CAAC;MACnE;MAEA,IAAI0B,KAAK,CAACU,iBAAiB,KAAK,IAAI,EAAE;QACpCvB,IAAI,GAAGD,gBAAgB,CAACC,IAAI,EAAEa,KAAK,CAACW,UAAU,CAACvB,OAAO,EAAEY,KAAK,CAACW,UAAU,CAACtB,IAAI,CAAC;MAChF;MAEA,IAAIW,KAAK,CAACU,iBAAiB,KAAK,IAAI,EAAE;QACpCvB,IAAI,GAAGD,gBAAgB,CAACC,IAAI,EAAEa,KAAK,CAACW,UAAU,CAACvB,OAAO,EAAEY,KAAK,CAACW,UAAU,CAACtB,IAAI,CAAC;MAChF;MAEAe,UAAU,GAAGJ,KAAK,CAAC1B,OAAO,CAACsC,GAAG,CAAElC,MAAM,IAAK;QACzC,IAAIsB,KAAK,CAAC3B,UAAU,KAAKK,MAAM,CAACC,IAAI,EAAE;UACpC,OAAO;YACL,GAAGD,MAAM;YACTE,MAAM,EAAE;cACNiC,EAAE,EAAE,IAAI;cACRhC,GAAG,EAAEH,MAAM,CAACE,MAAM,CAACC;YACrB;UACF,CAAC;QACH;QAEA,OAAOH,MAAM;MACf,CAAC,CAAC;MAEF,OAAO;QACL,GAAGsB,KAAK;QACRb,IAAI;QACJ2B,YAAY,EAAEb,MAAM,CAAC7B,IAAI;QACzBE,OAAO,EAAE8B;MACX,CAAC;IAEH,KAAK,WAAW;MACdF,QAAQ,GAAGF,KAAK,CAACW,UAAU,CAACtB,IAAI,GAAG,CAAC;MACpC,OAAO;QACL,GAAGW,KAAK;QACRb,IAAI,EAAED,gBAAgB,CAACc,KAAK,CAACc,YAAY,EAAEd,KAAK,CAACW,UAAU,CAACvB,OAAO,EAAEc,QAAQ,CAAC;QAC9ES,UAAU,EAAE;UACV,GAAGX,KAAK,CAACW,UAAU;UACnBtB,IAAI,EAAEa,QAAQ;UACda,OAAO,EAAEb,QAAQ,GAAGF,KAAK,CAACW,UAAU,CAACvB,OAAO,GAAGY,KAAK,CAACc,YAAY,CAACE,MAAM;UACxEC,OAAO,EAAEf,QAAQ,KAAK;QACxB;MACF,CAAC;IACH,KAAK,WAAW;MACdC,QAAQ,GAAGH,KAAK,CAACW,UAAU,CAACtB,IAAI,KAAK,CAAC,GAAG,CAAC,GAAGW,KAAK,CAACW,UAAU,CAACtB,IAAI,GAAG,CAAC;MAEtE,OAAO;QACL,GAAGW,KAAK;QACRb,IAAI,EAAED,gBAAgB,CAACc,KAAK,CAACc,YAAY,EAAEd,KAAK,CAACW,UAAU,CAACvB,OAAO,EAAEe,QAAQ,CAAC;QAC9EQ,UAAU,EAAE;UACV,GAAGX,KAAK,CAACW,UAAU;UACnBtB,IAAI,EAAEc,QAAQ;UACdY,OAAO,EAAEZ,QAAQ,GAAGH,KAAK,CAACW,UAAU,CAACvB,OAAO,GAAGY,KAAK,CAACc,YAAY,CAACE,MAAM;UACxEC,OAAO,EAAEd,QAAQ,KAAK;QACxB;MACF,CAAC;IACH,KAAK,aAAa;MAChB,IAAI,EAAEF,MAAM,CAACiB,UAAU,IAAIlB,KAAK,CAACN,aAAa,CAAC,EAAE;QAC/C,MAAM,IAAIyB,KAAK,CAAC,mBAAmBlB,MAAM,CAACiB,UAAU,YAAY,CAAC;MACnE;;MAEA;MACA;MACAd,UAAU,GAAGJ,KAAK,CAAC1B,OAAO,CAACsC,GAAG,CAAElC,MAAM,IAAK;QACzC;QACA,IAAIuB,MAAM,CAACiB,UAAU,KAAKxC,MAAM,CAACC,IAAI,EAAE;UACrC,IAAIsB,MAAM,CAACmB,aAAa,KAAKC,SAAS,EAAE;YACtC;YACA9C,WAAW,GAAG0B,MAAM,CAACmB,aAAa;UACpC,CAAC,MAAM;YACL;YACA7C,WAAW,GAAGG,MAAM,CAACE,MAAM,CAACC,GAAG,KAAKwC,SAAS,GAAG,IAAI,GAAG,CAAC3C,MAAM,CAACE,MAAM,CAACC,GAAG;UAC3E;UAEA,IAAIH,MAAM,CAACI,IAAI,EAAE;YACfN,UAAU,GAAGD,WAAW,GAAGyB,KAAK,CAACb,IAAI,CAACL,IAAI,CAACJ,MAAM,CAACI,IAAI,CAAC,GAAGkB,KAAK,CAACb,IAAI,CAACL,IAAI,CAACJ,MAAM,CAACI,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;YAChG;UACF,CAAC,MAAM;YACLP,UAAU,GAAGD,WAAW,GACpByB,KAAK,CAACb,IAAI,CAACL,IAAI,CAACb,eAAe,CAAEe,MAAM,IAAKA,MAAM,CAACC,QAAQ,CAACgB,MAAM,CAACiB,UAAU,CAAC,CAAC,CAAC,GAChFlB,KAAK,CAACb,IAAI,CAACL,IAAI,CAACZ,gBAAgB,CAAEc,MAAM,IAAKA,MAAM,CAACC,QAAQ,CAACgB,MAAM,CAACiB,UAAU,CAAC,CAAC,CAAC;UACvF;UACA,OAAO;YACL,GAAGxC,MAAM;YACTE,MAAM,EAAE;cACNiC,EAAE,EAAE,IAAI;cACRhC,GAAG,EAAEN;YACP;UACF,CAAC;QACH;QACA;QACA,OAAO;UACL,GAAGG,MAAM;UACTE,MAAM,EAAE;YACNiC,EAAE,EAAE,KAAK;YACThC,GAAG,EAAE;UACP;QACF,CAAC;MACH,CAAC,CAAC;MAEF,OAAO;QACL,GAAGmB,KAAK;QACR1B,OAAO,EAAE8B,UAAU;QACnBjB,IAAI,EAAEX,UAAU;QAChBH,UAAU,EAAE4B,MAAM,CAACiB,UAAU;QAC7BxB,aAAa,EAAED,gBAAgB,CAACW,UAAU;MAC5C,CAAC;IACH,KAAK,eAAe;MAClBC,YAAY,GAAGJ,MAAM,CAACqB,MAAM,CAACtB,KAAK,CAACc,YAAY,CAAC;MAChDR,gBAAgB,GAAG,CAAC,CAAC;MACrBN,KAAK,CAACuB,YAAY,CAAC9C,OAAO,CAAE+C,GAAG,IAAK;QAAA,IAAAC,aAAA;QAClCnB,gBAAgB,CAACkB,GAAG,CAACE,EAAE,CAAC,IAAAD,aAAA,GAAGD,GAAG,CAACG,QAAQ,cAAAF,aAAA,cAAAA,aAAA,GAAI,KAAK;MAClD,CAAC,CAAC;MAEF,OAAO;QACL,GAAGzB,KAAK;QACRb,IAAI,EAAEkB,YAAY,CAACO,GAAG,CAAEY,GAAG,IAAK;UAC9B,OAAOlB,gBAAgB,CAACkB,GAAG,CAACE,EAAE,CAAC,GAAG;YAAE,GAAGF,GAAG;YAAEG,QAAQ,EAAErB,gBAAgB,CAACkB,GAAG,CAACE,EAAE;UAAE,CAAC,GAAG;YAAE,GAAGF;UAAI,CAAC;QAC/F,CAAC,CAAC;QACFI,QAAQ,EAAE;MACZ,CAAC;IACH,KAAK,YAAY;MACfrB,SAAS,GAAG;QAAE,GAAGP;MAAM,CAAC;MAExBO,SAAS,CAACpB,IAAI,GAAGoB,SAAS,CAACpB,IAAI,CAACyB,GAAG,CAAEY,GAAG,IAAK;QAC3C,MAAMK,MAAM,GAAG;UAAE,GAAGL;QAAI,CAAC;QACzB,IAAIK,MAAM,CAACH,EAAE,KAAKzB,MAAM,CAAC6B,KAAK,EAAE;UAC9BD,MAAM,CAACF,QAAQ,GAAG,CAACE,MAAM,CAACF,QAAQ;QACpC;QACA,OAAOE,MAAM;MACf,CAAC,CAAC;MAEFtB,SAAS,CAACO,YAAY,GAAGP,SAAS,CAACO,YAAY,CAACF,GAAG,CAAEY,GAAG,IAAK;QAC3D,MAAMK,MAAM,GAAG;UAAE,GAAGL;QAAI,CAAC;QACzB,IAAIK,MAAM,CAACH,EAAE,KAAKzB,MAAM,CAAC6B,KAAK,EAAE;UAC9BD,MAAM,CAACF,QAAQ,GAAG,CAACE,MAAM,CAACF,QAAQ;QACpC;QACA,OAAOE,MAAM;MACf,CAAC,CAAC;MAEFtB,SAAS,CAACgB,YAAY,GAAGhB,SAAS,CAACO,YAAY,CAACQ,MAAM,CAAEE,GAAG,IAAKA,GAAG,CAACG,QAAQ,KAAK,IAAI,CAAC;MAEtFpB,SAAS,CAACwB,cAAc,GACtBxB,SAAS,CAACgB,YAAY,CAACP,MAAM,KAAKT,SAAS,CAACpB,IAAI,CAAC6B,MAAM,GAClDT,SAAS,CAACwB,cAAc,GAAG,IAAI,GAC/BxB,SAAS,CAACwB,cAAc,GAAG,KAAM;MAExC,OAAOxB,SAAS;IAClB,KAAK,eAAe;MAClBA,SAAS,GAAG;QAAE,GAAGP;MAAM,CAAC;MACxBO,SAAS,CAACpB,IAAI,GAAGoB,SAAS,CAACO,YAAY,CAACQ,MAAM,CAAEE,GAAG,IAAK;QACtD,OACEA,GAAG,CAACQ,KAAK,CAACV,MAAM,CAAEW,IAAI,IAAK;UACzB,IAAIA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAClC,MAAM,CAACmC,YAAY,CAAC,EAAE;YAC5C,OAAO,IAAI;UACb;UACA,OAAO,KAAK;QACd,CAAC,CAAC,CAACpB,MAAM,GAAG,CAAC;MAEjB,CAAC,CAAC;MACF,OAAOT,SAAS;IAClB,KAAK,YAAY;MACf,IAAIP,KAAK,CAACuB,YAAY,CAACP,MAAM,GAAGhB,KAAK,CAACb,IAAI,CAAC6B,MAAM,EAAE;QACjDT,SAAS,CAACpB,IAAI,GAAGoB,SAAS,CAACpB,IAAI,CAACyB,GAAG,CAAEY,GAAG,IAAK;UAC3ChB,MAAM,CAACgB,GAAG,CAACE,EAAE,CAAC,GAAG,IAAI;UACrB,OAAO;YAAE,GAAGF,GAAG;YAAEG,QAAQ,EAAE;UAAK,CAAC;QACnC,CAAC,CAAC;QAEFpB,SAAS,CAACwB,cAAc,GAAG,IAAI;MACjC,CAAC,MAAM;QACLxB,SAAS,CAACpB,IAAI,GAAGoB,SAAS,CAACpB,IAAI,CAACyB,GAAG,CAAEY,GAAG,IAAK;UAC3ChB,MAAM,CAACgB,GAAG,CAACE,EAAE,CAAC,GAAG,KAAK;UAEtB,OAAO;YAAE,GAAGF,GAAG;YAAEG,QAAQ,EAAE;UAAM,CAAC;QACpC,CAAC,CAAC;QACFpB,SAAS,CAACwB,cAAc,GAAG,KAAK;MAClC;MAEAxB,SAAS,CAACO,YAAY,GAAGP,SAAS,CAACO,YAAY,CAACF,GAAG,CAAEY,GAAG,IAAK;QAC3D,OAAOA,GAAG,CAACE,EAAE,IAAIlB,MAAM,GAAG;UAAE,GAAGgB,GAAG;UAAEG,QAAQ,EAAEnB,MAAM,CAACgB,GAAG,CAACE,EAAE;QAAE,CAAC,GAAG;UAAE,GAAGF;QAAI,CAAC;MAC7E,CAAC,CAAC;MAEFjB,SAAS,CAACgB,YAAY,GAAGhB,SAAS,CAACO,YAAY,CAACQ,MAAM,CAAEE,GAAG,IAAKA,GAAG,CAACG,QAAQ,CAAC;MAE7E,OAAOpB,SAAS;IAClB;MACE,MAAM,IAAIY,KAAK,CAAC,wBAAwB,CAAC;EAC7C;AACF,CAAC;AAEH,MAAMkB,eAAe,GAAGA,CAAqBjE,IAAS,EAAEE,OAAwB,KAAU;EACxF;EACA,OAAOF,IAAI,CAACwC,GAAG,CAAEY,GAAQ,IAAK;IAC5B;IACA,MAAMK,MAAW,GAAG,CAAC,CAAC;IACtBvD,OAAO,CAACG,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAI,EAAEA,MAAM,CAACC,IAAI,IAAI6C,GAAG,CAAC,EAAE;QACzB,MAAM,IAAIL,KAAK,CAAC,qBAAqBzC,MAAM,CAACC,IAAI,YAAY,CAAC;MAC/D;MACAkD,MAAM,CAACnD,MAAM,CAACC,IAAI,CAAC,GAAG6C,GAAG,CAAC9C,MAAM,CAACC,IAAI,CAAC;IACxC,CAAC,CAAC;IACF,OAAOkD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMS,UAAU,GAAGA,CAExBJ,KAAU,EAIVrC,MAAgF,EAChF2B,GAAM,KACsB;EAC5B,OAAO3B,MAAM,GAAG,MAAMA,MAAM,CAAC;IAAE2B,GAAG;IAAEU;EAAM,CAAC,CAAC,GAAG,MAAMA,KAAK;AAC5D,CAAC;AAED,MAAMK,gBAAgB,GAAGA,CAAC3C,KAAa,EAAEC,MAAyB,KAAK;EACrE,OAAOA,MAAM,GAAG,MAAMA,MAAM,CAAC;IAAED;EAAM,CAAC,CAAC,GAAG,MAAMA,KAAK;AACvD,CAAC;AAED,OAAO,MAAM4C,QAAQ,GAAGA,CACtBlE,OAAwB,EACxBF,IAAS,EACTqE,OAAgC,KACN;EAC1B,MAAMC,kBAAwC,GAAG9E,OAAO,CACtD,MACEU,OAAO,CAACsC,GAAG,CAAElC,MAAM,IAAK;IACtB,OAAO;MACL,GAAGA,MAAM;MACTkB,KAAK,EAAElB,MAAM,CAACkB,KAAK,GAAGlB,MAAM,CAACkB,KAAK,GAAGlB,MAAM,CAACC,IAAI;MAChDmB,MAAM,EAAEpB,MAAM,CAACoB,MAAM,GAAGpB,MAAM,CAACoB,MAAM,GAAG,KAAK;MAC7ChB,IAAI,EAAEJ,MAAM,CAACI,IAAI;MACjBF,MAAM,EAAE;QACNiC,EAAE,EAAE,KAAK;QACThC,GAAG,EAAE;MACP;IACF,CAAC;EACH,CAAC,CAAC,EACJ,CAACP,OAAO,CACV,CAAC;EACD,MAAMoB,aAAa,GAAG9B,OAAO,CAAC,MAAM6B,gBAAgB,CAACiD,kBAAkB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAE/F,MAAMC,SAAuB,GAAG/E,OAAO,CAAC,MAAM;IAC5C,MAAMgF,UAAU,GAAGP,eAAe,CAACjE,IAAI,EAAEsE,kBAAkB,CAAC;IAE5D,MAAMG,OAAO,GAAGD,UAAU,CAAChC,GAAG,CAAC,CAACY,GAAG,EAAEsB,GAAG,KAAK;MAC3C,OAAO;QACLpB,EAAE,EAAEoB,GAAG;QACPnB,QAAQ,EAAE,KAAK;QACf7B,MAAM,EAAE,KAAK;QACbb,QAAQ,EAAEuC,GAAG;QACbQ,KAAK,EAAEe,MAAM,CAACC,OAAO,CAACxB,GAAG,CAAC,CACvBZ,GAAG,CAAC,CAAC,CAAClC,MAAM,EAAEwD,KAAK,CAAC,KAAK;UACxB,OAAO;YACLpC,MAAM,EAAEJ,aAAa,CAAChB,MAAM,CAAC,CAACoB,MAAM;YACpCmD,KAAK,EAAEvE,MAAM;YACbwD,KAAK;YACLrC,MAAM,EAAEyC,UAAU,CAACJ,KAAK,EAAExC,aAAa,CAAChB,MAAM,CAAC,CAACmB,MAAM,EAAE2B,GAAG;UAC7D,CAAC;QACH,CAAC,CAAC,CACDF,MAAM,CAAEW,IAAI,IAAK,CAACA,IAAI,CAACnC,MAAM;MAClC,CAAC;IACH,CAAC,CAAC;IACF,OAAO+C,OAAO;EAChB,CAAC,EAAE,CAACzE,IAAI,EAAEsE,kBAAkB,EAAEhD,aAAa,CAAC,CAAC;EAE7C,MAAMwD,OAAO,GAAGnD,aAAa,CAAI,CAAC;EAElC,MAAM,CAACC,KAAK,EAAEmD,QAAQ,CAAC,GAAGtF,UAAU,CAACqF,OAAO,EAAE;IAC5C5E,OAAO,EAAEoE,kBAAkB;IAC3BhD,aAAa;IACboB,YAAY,EAAE6B,SAAS;IACvBxD,IAAI,EAAEwD,SAAS;IACfpB,YAAY,EAAE,EAAE;IAChBQ,cAAc,EAAE,KAAK;IACrBH,QAAQ,EAAE,CAAC,EAACa,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEnB,MAAM;IAC3BjD,UAAU,EAAEoE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEpE,UAAU;IAC/BqC,iBAAiB,EAAE,CAAC,EAAC+B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAE9B,UAAU;IACxCA,UAAU,EAAE;MACVtB,IAAI,EAAE,CAAC;MACPD,OAAO,EAAE,EAAE;MACX2B,OAAO,EAAE,IAAI;MACbE,OAAO,EAAE,KAAK;MACd;MACAf,QAAQ,EAAElC,IAAI;MACd;MACAmC,QAAQ,EAAEnC;IACZ;EACF,CAAC,CAAC;EAEFgC,KAAK,CAACW,UAAU,CAACT,QAAQ,GAAGnC,WAAW,CAAC,MAAM;IAC5CoF,QAAQ,CAAC;MAAE1C,IAAI,EAAE;IAAY,CAAC,CAAC;EACjC,CAAC,EAAE,CAAC0C,QAAQ,CAAC,CAAC;EACdnD,KAAK,CAACW,UAAU,CAACR,QAAQ,GAAGpC,WAAW,CAAC,MAAMoF,QAAQ,CAAC;IAAE1C,IAAI,EAAE;EAAY,CAAC,CAAC,EAAE,CAAC0C,QAAQ,CAAC,CAAC;EAE1FrF,SAAS,CAAC,MAAM;IACdqF,QAAQ,CAAC;MAAE1C,IAAI,EAAE,UAAU;MAAErC,IAAI,EAAEuE;IAAU,CAAC,CAAC;EACjD,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMS,OAAwB,GAAGxF,OAAO,CAAC,MAAM;IAC7C,OAAO,CACL,GAAGoC,KAAK,CAAC1B,OAAO,CAACsC,GAAG,CAAElC,MAAM,IAAK;MAC/B,MAAMkB,KAAK,GAAGlB,MAAM,CAACkB,KAAK,GAAGlB,MAAM,CAACkB,KAAK,GAAGlB,MAAM,CAACC,IAAI;MACvD,OAAO;QACL,GAAGD,MAAM;QACTmB,MAAM,EAAE0C,gBAAgB,CAAC3C,KAAK,EAAElB,MAAM,CAAC2E,YAAY;MACrD,CAAC;IACH,CAAC,CAAC,CACH;EACH,CAAC,EAAE,CAACrD,KAAK,CAAC1B,OAAO,CAAC,CAAC;EAEnBR,SAAS,CAAC,MAAM;IACd,IAAI2E,OAAO,IAAIA,OAAO,CAACnB,MAAM,EAAE;MAC7B6B,QAAQ,CAAC;QAAE1C,IAAI,EAAE,eAAe;QAAEa,MAAM,EAAEmB,OAAO,CAACnB;MAAO,CAAC,CAAC;IAC7D;EACF,CAAC,CAAC;EAEF,OAAO;IACL8B,OAAO,EAAEA,OAAO,CAAC9B,MAAM,CAAE5C,MAAM,IAAK,CAACA,MAAM,CAACoB,MAAM,CAAC;IACnDX,IAAI,EAAEa,KAAK,CAACb,IAAI;IAChB2B,YAAY,EAAEd,KAAK,CAACc,YAAY;IAChCS,YAAY,EAAEvB,KAAK,CAACuB,YAAY;IAChC4B,QAAQ;IACRG,SAAS,EAAGxB,KAAa,IAAKqB,QAAQ,CAAC;MAAE1C,IAAI,EAAE,YAAY;MAAEqB;IAAM,CAAC,CAAC;IACrEyB,SAAS,EAAEA,CAAA,KAAMJ,QAAQ,CAAC;MAAE1C,IAAI,EAAE;IAAa,CAAC,CAAC;IACjD+C,UAAU,EAAEA,CAACtC,UAAkB,EAAEE,aAAuB,KACtD+B,QAAQ,CAAC;MAAE1C,IAAI,EAAE,aAAa;MAAES,UAAU;MAAEE;IAAc,CAAC,CAAC;IAC9DqC,eAAe,EAAGrB,YAAoB,IAAKe,QAAQ,CAAC;MAAE1C,IAAI,EAAE,eAAe;MAAE2B;IAAa,CAAC,CAAC;IAC5FzB,UAAU,EAAEX,KAAK,CAACW,UAAU;IAC5BoB,cAAc,EAAE/B,KAAK,CAAC+B;EACxB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}