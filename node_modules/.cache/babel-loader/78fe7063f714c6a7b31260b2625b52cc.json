{"ast":null,"code":"import{Contract}from'@ethersproject/contracts';import{namehash}from'ethers/lib/utils';const REGISTRAR_ABI=[{constant:true,inputs:[{name:'node',type:'bytes32'}],name:'resolver',outputs:[{name:'resolverAddress',type:'address'}],payable:false,stateMutability:'view',type:'function'}];const REGISTRAR_ADDRESS='0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';const RESOLVER_ABI=[{constant:true,inputs:[{internalType:'bytes32',name:'node',type:'bytes32'}],name:'contenthash',outputs:[{internalType:'bytes',name:'',type:'bytes'}],payable:false,stateMutability:'view',type:'function'}];// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress,provider){return new Contract(resolverAddress,RESOLVER_ABI,provider);}/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */export default async function resolveENSContentHash(ensName,provider){const ensRegistrarContract=new Contract(REGISTRAR_ADDRESS,REGISTRAR_ABI,provider);const hash=namehash(ensName);const resolverAddress=await ensRegistrarContract.resolver(hash);return resolverContract(resolverAddress,provider).contenthash(hash);}","map":{"version":3,"names":["Contract","namehash","REGISTRAR_ABI","constant","inputs","name","type","outputs","payable","stateMutability","REGISTRAR_ADDRESS","RESOLVER_ABI","internalType","resolverContract","resolverAddress","provider","resolveENSContentHash","ensName","ensRegistrarContract","hash","resolver","contenthash"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/ENS/resolveENSContentHash.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/abstract-provider'\nimport { namehash } from 'ethers/lib/utils'\n\nconst REGISTRAR_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        name: 'resolverAddress',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\nconst RESOLVER_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'contenthash',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n\n// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\n}\n\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\n  const hash = namehash(ensName)\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\n  return resolverContract(resolverAddress, provider).contenthash(hash)\n}\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,0BAA0B,CAEnD,OAASC,QAAQ,KAAQ,kBAAkB,CAE3C,KAAM,CAAAC,aAAa,CAAG,CACpB,CACEC,QAAQ,CAAE,IAAI,CACdC,MAAM,CAAE,CACN,CACEC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE,SACR,CAAC,CACF,CACDD,IAAI,CAAE,UAAU,CAChBE,OAAO,CAAE,CACP,CACEF,IAAI,CAAE,iBAAiB,CACvBC,IAAI,CAAE,SACR,CAAC,CACF,CACDE,OAAO,CAAE,KAAK,CACdC,eAAe,CAAE,MAAM,CACvBH,IAAI,CAAE,UACR,CAAC,CACF,CACD,KAAM,CAAAI,iBAAiB,CAAG,4CAA4C,CAEtE,KAAM,CAAAC,YAAY,CAAG,CACnB,CACER,QAAQ,CAAE,IAAI,CACdC,MAAM,CAAE,CACN,CACEQ,YAAY,CAAE,SAAS,CACvBP,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE,SACR,CAAC,CACF,CACDD,IAAI,CAAE,aAAa,CACnBE,OAAO,CAAE,CACP,CACEK,YAAY,CAAE,OAAO,CACrBP,IAAI,CAAE,EAAE,CACRC,IAAI,CAAE,OACR,CAAC,CACF,CACDE,OAAO,CAAE,KAAK,CACdC,eAAe,CAAE,MAAM,CACvBH,IAAI,CAAE,UACR,CAAC,CACF,CAED;AACA,QAAS,CAAAO,gBAAgBA,CAACC,eAAuB,CAAEC,QAAkB,CAAY,CAC/E,MAAO,IAAI,CAAAf,QAAQ,CAACc,eAAe,CAAEH,YAAY,CAAEI,QAAQ,CAAC,CAC9D,CAEA;AACA;AACA;AACA;AACA,GACA,cAAe,eAAe,CAAAC,qBAAqBA,CAACC,OAAe,CAAEF,QAAkB,CAAmB,CACxG,KAAM,CAAAG,oBAAoB,CAAG,GAAI,CAAAlB,QAAQ,CAACU,iBAAiB,CAAER,aAAa,CAAEa,QAAQ,CAAC,CACrF,KAAM,CAAAI,IAAI,CAAGlB,QAAQ,CAACgB,OAAO,CAAC,CAC9B,KAAM,CAAAH,eAAe,CAAG,KAAM,CAAAI,oBAAoB,CAACE,QAAQ,CAACD,IAAI,CAAC,CACjE,MAAO,CAAAN,gBAAgB,CAACC,eAAe,CAAEC,QAAQ,CAAC,CAACM,WAAW,CAACF,IAAI,CAAC,CACtE","ignoreList":[]},"metadata":{},"sourceType":"module"}