{"ast":null,"code":"/* eslint-disable no-else-return */import invariant from'tiny-invariant';import{ChainId}from'../constants';import{validateAndParseAddress}from'../utils';import{Currency}from'./currency';/**\n * Represents an ERC20 token with a unique address and some metadata.\n */export class Token extends Currency{constructor(chainId,address,decimals,symbol,name){super(decimals,symbol,name);this.chainId=void 0;this.address=void 0;this.chainId=chainId;this.address=validateAndParseAddress(address);}/**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */equals(other){// short circuit on reference equality\nif(this===other){return true;}return this.chainId===other.chainId&&this.address===other.address;}/**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */sortsBefore(other){invariant(this.chainId===other.chainId,'CHAIN_IDS');invariant(this.address!==other.address,'ADDRESSES');return this.address.toLowerCase()<other.address.toLowerCase();}}/**\n * Compares two currencies for equality\n */export function currencyEquals(currencyA,currencyB){if(currencyA instanceof Token&&currencyB instanceof Token){return currencyA.equals(currencyB);}else if(currencyA instanceof Token){return false;}else if(currencyB instanceof Token){return false;}else{return currencyA===currencyB;}}export const WETH={[ChainId.MAINNET]:new Token(ChainId.MAINNET,// '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\nprocess.env.REACT_APP_WBNB,18,'WBNB','Wrapped BNB'),[ChainId.TESTNET]:new Token(ChainId.TESTNET,// '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\nprocess.env.REACT_APP_WBNB,18,'WBNB','Wrapped BNB')};","map":{"version":3,"names":["invariant","ChainId","validateAndParseAddress","Currency","Token","constructor","chainId","address","decimals","symbol","name","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","process","env","REACT_APP_WBNB","TESTNET"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/token.ts"],"sourcesContent":["/* eslint-disable no-else-return */\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    // '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    process.env.REACT_APP_WBNB,\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    // '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    process.env.REACT_APP_WBNB,\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n}\n"],"mappings":"AAAA,mCACA,MAAO,CAAAA,SAAS,KAAM,gBAAgB,CACtC,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,uBAAuB,KAAQ,UAAU,CAClD,OAASC,QAAQ,KAAQ,YAAY,CAErC;AACA;AACA,GACA,MAAO,MAAM,CAAAC,KAAK,QAAS,CAAAD,QAAS,CAK3BE,WAAWA,CAACC,OAAgB,CAAEC,OAAe,CAAEC,QAAgB,CAAEC,MAAe,CAAEC,IAAa,CAAE,CACtG,KAAK,CAACF,QAAQ,CAAEC,MAAM,CAAEC,IAAI,CAAC,MALfJ,OAAO,aAEPC,OAAO,QAIrB,IAAI,CAACD,OAAO,CAAGA,OAAO,CACtB,IAAI,CAACC,OAAO,CAAGL,uBAAuB,CAACK,OAAO,CAAC,CACjD,CAEA;AACF;AACA;AACA,KACSI,MAAMA,CAACC,KAAY,CAAW,CACnC;AACA,GAAI,IAAI,GAAKA,KAAK,CAAE,CAClB,MAAO,KAAI,CACb,CACA,MAAO,KAAI,CAACN,OAAO,GAAKM,KAAK,CAACN,OAAO,EAAI,IAAI,CAACC,OAAO,GAAKK,KAAK,CAACL,OAAO,CACzE,CAEA;AACF;AACA;AACA;AACA;AACA,KACSM,WAAWA,CAACD,KAAY,CAAW,CACxCZ,SAAS,CAAC,IAAI,CAACM,OAAO,GAAKM,KAAK,CAACN,OAAO,CAAE,WAAW,CAAC,CACtDN,SAAS,CAAC,IAAI,CAACO,OAAO,GAAKK,KAAK,CAACL,OAAO,CAAE,WAAW,CAAC,CACtD,MAAO,KAAI,CAACA,OAAO,CAACO,WAAW,CAAC,CAAC,CAAGF,KAAK,CAACL,OAAO,CAACO,WAAW,CAAC,CAAC,CACjE,CACF,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,cAAcA,CAACC,SAAmB,CAAEC,SAAmB,CAAW,CAChF,GAAID,SAAS,WAAY,CAAAZ,KAAK,EAAIa,SAAS,WAAY,CAAAb,KAAK,CAAE,CAC5D,MAAO,CAAAY,SAAS,CAACL,MAAM,CAACM,SAAS,CAAC,CACpC,CAAC,IAAM,IAAID,SAAS,WAAY,CAAAZ,KAAK,CAAE,CACrC,MAAO,MAAK,CACd,CAAC,IAAM,IAAIa,SAAS,WAAY,CAAAb,KAAK,CAAE,CACrC,MAAO,MAAK,CACd,CAAC,IAAM,CACL,MAAO,CAAAY,SAAS,GAAKC,SAAS,CAChC,CACF,CAEA,MAAO,MAAM,CAAAC,IAAI,CAAG,CAClB,CAACjB,OAAO,CAACkB,OAAO,EAAG,GAAI,CAAAf,KAAK,CAC1BH,OAAO,CAACkB,OAAO,CACf;AACAC,OAAO,CAACC,GAAG,CAACC,cAAc,CAC1B,EAAE,CACF,MAAM,CACN,aACF,CAAC,CACD,CAACrB,OAAO,CAACsB,OAAO,EAAG,GAAI,CAAAnB,KAAK,CAC1BH,OAAO,CAACsB,OAAO,CACf;AACAH,OAAO,CAACC,GAAG,CAACC,cAAc,CAC1B,EAAE,CACF,MAAM,CACN,aACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}