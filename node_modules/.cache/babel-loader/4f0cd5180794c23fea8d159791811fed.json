{"ast":null,"code":"var _jsxFileName = \"/Users/namratapatel/upwork/SmartFinance-OmniDex/src/contexts/Localization/Provider.tsx\";\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { EN, languages } from 'config/localization/languages';\nimport translations from 'config/localization/translations.json';\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isFetching: true,\n  currentLanguage: EN\n};\n\n// Export the translations directly\nexport const languageMap = new Map();\nlanguageMap.set(EN.locale, translations);\nexport const LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState(() => {\n    const codeFromStorage = getLanguageCodeFromLS();\n    return {\n      ...initialState,\n      currentLanguage: languages[codeFromStorage]\n    };\n  });\n  const {\n    currentLanguage\n  } = state;\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS();\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale);\n        const currentLocale = await fetchLocale(codeFromStorage);\n        languageMap.set(codeFromStorage, {\n          ...enLocale,\n          ...currentLocale\n        });\n      }\n      setState(prevState => ({\n        ...prevState,\n        isFetching: false\n      }));\n    };\n    fetchInitialLocales();\n  }, [setState]);\n  const setLanguage = async language => {\n    if (!languageMap.has(language.locale)) {\n      setState(prevState => ({\n        ...prevState,\n        isFetching: true\n      }));\n      const locale = await fetchLocale(language.locale);\n      const enLocale = languageMap.get(EN.locale);\n\n      // Merge the EN locale to ensure that any locale fetched has all the keys\n      languageMap.set(language.locale, {\n        ...enLocale,\n        ...locale\n      });\n      localStorage.setItem(LS_KEY, language.locale);\n      setState(prevState => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language\n      }));\n    } else {\n      localStorage.setItem(LS_KEY, language.locale);\n      setState(prevState => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language\n      }));\n    }\n  };\n  const translate = useCallback((key, data) => {\n    const translationSet = languageMap.has(currentLanguage.locale) ? languageMap.get(currentLanguage.locale) : languageMap.get(EN.locale);\n    const translatedText = translationSet[key] || key;\n\n    // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n    const includesVariable = translatedText.match(/%\\S+?%/gm);\n    if (includesVariable && data) {\n      let interpolatedText = translatedText;\n      Object.keys(data).forEach(dataKey => {\n        const templateKey = new RegExp(`%${dataKey}%`, 'g');\n        interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString());\n      });\n      return interpolatedText;\n    }\n    return translatedText;\n  }, [currentLanguage]);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      ...state,\n      setLanguage,\n      t: translate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useCallback","useEffect","useState","EN","languages","translations","LS_KEY","fetchLocale","getLanguageCodeFromLS","initialState","isFetching","currentLanguage","languageMap","Map","set","locale","LanguageContext","undefined","LanguageProvider","children","state","setState","codeFromStorage","fetchInitialLocales","enLocale","get","currentLocale","prevState","setLanguage","language","has","localStorage","setItem","translate","key","data","translationSet","translatedText","includesVariable","match","interpolatedText","Object","keys","forEach","dataKey","templateKey","RegExp","replace","toString","t"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/contexts/Localization/Provider.tsx"],"sourcesContent":["import React, { createContext, useCallback, useEffect, useState } from 'react'\nimport { Language } from 'toolkit/uikit'\nimport { EN, languages } from 'config/localization/languages'\nimport translations from 'config/localization/translations.json'\nimport { ContextApi, ContextData, ProviderState } from './types'\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\n// Export the translations directly\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n    const codeFromStorage = getLanguageCodeFromLS()\n\n    return {\n      ...initialState,\n      currentLanguage: languages[codeFromStorage],\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      const enLocale = languageMap.get(EN.locale)\n\n      // Merge the EN locale to ensure that any locale fetched has all the keys\n      languageMap.set(language.locale, { ...enLocale, ...locale })\n      localStorage.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }\n\n  const translate = useCallback(\n    (key: string, data?: ContextData) => {\n      const translationSet = languageMap.has(currentLanguage.locale)\n        ? languageMap.get(currentLanguage.locale)\n        : languageMap.get(EN.locale)\n      const translatedText = translationSet[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}