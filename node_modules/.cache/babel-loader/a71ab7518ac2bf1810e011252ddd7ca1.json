{"ast":null,"code":"var _jsxFileName = \"/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/transactions/updater.tsx\";\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Text, Flex, Link } from 'toolkit/uikit';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { getBscScanLink } from 'utils';\nimport useToast from 'hooks/useToast';\nimport { useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  }\n  // otherwise every block\n  return true;\n}\nexport default function Updater() {\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(s => s.transactions);\n  const transactions = useMemo(() => {\n    var _state$chainId;\n    return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n  }, [chainId, state]);\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return;\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      library.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash$su, _transactions$hash;\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          const toast = receipt.status === 1 ? toastSuccess : toastError;\n          toast('Transaction receipt', /*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: (_transactions$hash$su = (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary) !== null && _transactions$hash$su !== void 0 ? _transactions$hash$su : `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this), chainId && /*#__PURE__*/_jsxDEV(Link, {\n              external: true,\n              href: getBscScanLink(hash, 'transaction', chainId),\n              children: \"View on BscScan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this));\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, toastSuccess, toastError]);\n  return null;\n}","map":{"version":3,"names":["React","useEffect","useMemo","useDispatch","useSelector","Text","Flex","Link","useActiveWeb3React","getBscScanLink","useToast","useBlockNumber","checkedTransaction","finalizeTransaction","jsxDEV","_jsxDEV","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","library","chainId","dispatch","state","s","transactions","_state$chainId","toastError","toastSuccess","Object","keys","filter","hash","forEach","getTransactionReceipt","then","_transactions$hash$su","_transactions$hash","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","toast","flexDirection","children","summary","slice","fileName","_jsxFileName","lineNumber","columnNumber","external","href","catch","error","console"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/transactions/updater.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Text, Flex, Link } from 'toolkit/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport useToast from 'hooks/useToast'\nimport { useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  }\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  }\n  // otherwise every block\n  return true\n}\n\nexport default function Updater(): null {\n  const { library, chainId } = useActiveWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  const { toastError, toastSuccess } = useToast()\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        library\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              )\n\n              const toast = receipt.status === 1 ? toastSuccess : toastError\n              toast(\n                'Transaction receipt',\n                <Flex flexDirection=\"column\">\n                  <Text>{transactions[hash]?.summary ?? `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`}</Text>\n                  {chainId && (\n                    <Link external href={getBscScanLink(hash, 'transaction', chainId)}>\n                      View on BscScan\n                    </Link>\n                  )}\n                </Flex>,\n              )\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, toastSuccess, toastError])\n\n  return null\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,EAAEC,IAAI,EAAEC,IAAI,QAAQ,eAAe;AAChD,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,SAASC,cAAc,QAAQ,OAAO;AACtC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAASC,cAAc,QAAQ,sBAAsB;AAErD,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnE,OAAO,SAASC,WAAWA,CACzBC,eAAuB,EACvBC,EAAyE,EAChE;EACT,IAAIA,EAAE,CAACC,OAAO,EAAE,OAAO,KAAK;EAC5B,IAAI,CAACD,EAAE,CAACE,sBAAsB,EAAE,OAAO,IAAI;EAC3C,MAAMC,gBAAgB,GAAGJ,eAAe,GAAGC,EAAE,CAACE,sBAAsB;EACpE,IAAIC,gBAAgB,GAAG,CAAC,EAAE,OAAO,KAAK;EACtC,MAAMC,cAAc,GAAG,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGN,EAAE,CAACO,SAAS,IAAI,IAAI,GAAG,EAAE;EACxE,IAAIH,cAAc,GAAG,EAAE,EAAE;IACvB;IACA,OAAOD,gBAAgB,GAAG,CAAC;EAC7B;EACA,IAAIC,cAAc,GAAG,CAAC,EAAE;IACtB;IACA,OAAOD,gBAAgB,GAAG,CAAC;EAC7B;EACA;EACA,OAAO,IAAI;AACb;AAEA,eAAe,SAASK,OAAOA,CAAA,EAAS;EACtC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGpB,kBAAkB,CAAC,CAAC;EAEjD,MAAMS,eAAe,GAAGN,cAAc,CAAC,CAAC;EAExC,MAAMkB,QAAQ,GAAG1B,WAAW,CAAc,CAAC;EAC3C,MAAM2B,KAAK,GAAG1B,WAAW,CAAsC2B,CAAC,IAAKA,CAAC,CAACC,YAAY,CAAC;EAEpF,MAAMA,YAAY,GAAG9B,OAAO,CAAC;IAAA,IAAA+B,cAAA;IAAA,OAAOL,OAAO,IAAAK,cAAA,GAAGH,KAAK,CAACF,OAAO,CAAC,cAAAK,cAAA,cAAAA,cAAA,GAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAAA,CAAC,EAAE,CAACL,OAAO,EAAEE,KAAK,CAAC,CAAC;EAE3F,MAAM;IAAEI,UAAU;IAAEC;EAAa,CAAC,GAAGzB,QAAQ,CAAC,CAAC;EAE/CT,SAAS,CAAC,MAAM;IACd,IAAI,CAAC2B,OAAO,IAAI,CAACD,OAAO,IAAI,CAACV,eAAe,EAAE;IAE9CmB,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,CACtBM,MAAM,CAAEC,IAAI,IAAKvB,WAAW,CAACC,eAAe,EAAEe,YAAY,CAACO,IAAI,CAAC,CAAC,CAAC,CAClEC,OAAO,CAAED,IAAI,IAAK;MACjBZ,OAAO,CACJc,qBAAqB,CAACF,IAAI,CAAC,CAC3BG,IAAI,CAAEvB,OAAO,IAAK;QACjB,IAAIA,OAAO,EAAE;UAAA,IAAAwB,qBAAA,EAAAC,kBAAA;UACXf,QAAQ,CACNhB,mBAAmB,CAAC;YAClBe,OAAO;YACPW,IAAI;YACJpB,OAAO,EAAE;cACP0B,SAAS,EAAE1B,OAAO,CAAC0B,SAAS;cAC5BC,WAAW,EAAE3B,OAAO,CAAC2B,WAAW;cAChCC,eAAe,EAAE5B,OAAO,CAAC4B,eAAe;cACxCC,IAAI,EAAE7B,OAAO,CAAC6B,IAAI;cAClBC,MAAM,EAAE9B,OAAO,CAAC8B,MAAM;cACtBC,EAAE,EAAE/B,OAAO,CAAC+B,EAAE;cACdC,eAAe,EAAEhC,OAAO,CAACgC,eAAe;cACxCC,gBAAgB,EAAEjC,OAAO,CAACiC;YAC5B;UACF,CAAC,CACH,CAAC;UAED,MAAMC,KAAK,GAAGlC,OAAO,CAAC8B,MAAM,KAAK,CAAC,GAAGd,YAAY,GAAGD,UAAU;UAC9DmB,KAAK,CACH,qBAAqB,eACrBtC,OAAA,CAACT,IAAI;YAACgD,aAAa,EAAC,QAAQ;YAAAC,QAAA,gBAC1BxC,OAAA,CAACV,IAAI;cAAAkD,QAAA,GAAAZ,qBAAA,IAAAC,kBAAA,GAAEZ,YAAY,CAACO,IAAI,CAAC,cAAAK,kBAAA,uBAAlBA,kBAAA,CAAoBY,OAAO,cAAAb,qBAAA,cAAAA,qBAAA,GAAI,SAASJ,IAAI,CAACkB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAMlB,IAAI,CAACkB,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,EAChGjC,OAAO,iBACNb,OAAA,CAACR,IAAI;cAACuD,QAAQ;cAACC,IAAI,EAAEtD,cAAc,CAAC8B,IAAI,EAAE,aAAa,EAAEX,OAAO,CAAE;cAAA2B,QAAA,EAAC;YAEnE;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CACR,CAAC;QACH,CAAC,MAAM;UACLhC,QAAQ,CAACjB,kBAAkB,CAAC;YAAEgB,OAAO;YAAEW,IAAI;YAAEO,WAAW,EAAE7B;UAAgB,CAAC,CAAC,CAAC;QAC/E;MACF,CAAC,CAAC,CACD+C,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qCAAqC1B,IAAI,EAAE,EAAE0B,KAAK,CAAC;MACnE,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,EAAE,CAACrC,OAAO,EAAED,OAAO,EAAEK,YAAY,EAAEf,eAAe,EAAEY,QAAQ,EAAEM,YAAY,EAAED,UAAU,CAAC,CAAC;EAEzF,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module"}