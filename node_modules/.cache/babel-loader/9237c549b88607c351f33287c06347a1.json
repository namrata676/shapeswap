{"ast":null,"code":"'use strict';\n\nconst {\n  bases\n} = require('multiformats/basics');\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n  ...bases\n};\nmodule.exports = BASES;","map":{"version":3,"names":["bases","require","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","Uint8Array","charCodeAt","BASES","base16","module","exports"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/multihashes/node_modules/uint8arrays/util/bases.js"],"sourcesContent":["  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n"],"mappings":"AAAE,YAAY;;AAEd,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAClD,OAAO;IACLH,IAAI;IACJC,MAAM;IACNG,OAAO,EAAE;MACPJ,IAAI;MACJC,MAAM;MACNC;IACF,CAAC;IACDG,OAAO,EAAE;MACPF;IACF;EACF,CAAC;AACH;AAEA,MAAMG,MAAM,GAAGP,WAAW,CAAC,MAAM,EAAE,GAAG,EAAGQ,GAAG,IAAK;EAC/C,MAAMF,OAAO,GAAG,IAAIG,WAAW,CAAC,MAAM,CAAC;EACvC,OAAO,GAAG,GAAGH,OAAO,CAACF,MAAM,CAACI,GAAG,CAAC;AAClC,CAAC,EAAGE,GAAG,IAAK;EACV,MAAML,OAAO,GAAG,IAAIM,WAAW,CAAC,CAAC;EACjC,OAAON,OAAO,CAACF,MAAM,CAACO,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGb,WAAW,CAAC,OAAO,EAAE,GAAG,EAAGQ,GAAG,IAAK;EAC/C,IAAID,MAAM,GAAG,GAAG;EAEhB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCP,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACT,GAAG,CAACM,CAAC,CAAC,CAAC;EACvC;EACA,OAAOP,MAAM;AACf,CAAC,EAAGG,GAAG,IAAK;EACVA,GAAG,GAAGA,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC;EACtB,MAAMJ,GAAG,GAAG,IAAIU,UAAU,CAACR,GAAG,CAACK,MAAM,CAAC;EAEtC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCN,GAAG,CAACM,CAAC,CAAC,GAAGJ,GAAG,CAACS,UAAU,CAACL,CAAC,CAAC;EAC5B;EAEA,OAAON,GAAG;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMY,KAAK,GAAG;EACZ,MAAM,EAAEb,MAAM;EACd,OAAO,EAAEA,MAAM;EACf,KAAK,EAAET,KAAK,CAACuB,MAAM;EACnB,QAAQ,EAAER,KAAK;EACf,OAAO,EAAEA,KAAK;EACd,QAAQ,EAAEA,KAAK;EAEf,GAAGf;AACL,CAAC;AAEDwB,MAAM,CAACC,OAAO,GAAGH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script"}