{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n};\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber(buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16);\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array(num) {\n  let hexString = num.toString(16);\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString;\n  }\n  return uint8ArrayFromString(hexString, 'base16');\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode(input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)));\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode(num) {\n  return Uint8Array.from(varint.encode(num));\n}","map":{"version":3,"names":["varint","require","toString","uint8ArrayToString","fromString","uint8ArrayFromString","module","exports","numberToUint8Array","uint8ArrayToNumber","varintUint8ArrayEncode","varintEncode","buf","parseInt","num","hexString","length","input","Uint8Array","from","encode"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/cids/node_modules/multicodec/src/util.js"],"sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEC,QAAQ,EAAEC;AAAmB,CAAC,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACzE,MAAM;EAAEG,UAAU,EAAEC;AAAqB,CAAC,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAE/EK,MAAM,CAACC,OAAO,GAAG;EACfC,kBAAkB;EAClBC,kBAAkB;EAClBC,sBAAsB;EACtBC;AACF,CAAC;;AAED;AACA;AACA;AACA,SAASF,kBAAkB,CAAEG,GAAG,EAAE;EAChC,OAAOC,QAAQ,CAACV,kBAAkB,CAACS,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;AACxD;;AAEA;AACA;AACA;AACA,SAASJ,kBAAkB,CAAEM,GAAG,EAAE;EAChC,IAAIC,SAAS,GAAGD,GAAG,CAACZ,QAAQ,CAAC,EAAE,CAAC;EAChC,IAAIa,SAAS,CAACC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9BD,SAAS,GAAG,GAAG,GAAGA,SAAS;EAC7B;EACA,OAAOV,oBAAoB,CAACU,SAAS,EAAE,QAAQ,CAAC;AAClD;;AAEA;AACA;AACA;AACA,SAASL,sBAAsB,CAAEO,KAAK,EAAE;EACtC,OAAOC,UAAU,CAACC,IAAI,CAACnB,MAAM,CAACoB,MAAM,CAACX,kBAAkB,CAACQ,KAAK,CAAC,CAAC,CAAC;AAClE;;AAEA;AACA;AACA;AACA,SAASN,YAAY,CAAEG,GAAG,EAAE;EAC1B,OAAOI,UAAU,CAACC,IAAI,CAACnB,MAAM,CAACoB,MAAM,CAACN,GAAG,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"script"}