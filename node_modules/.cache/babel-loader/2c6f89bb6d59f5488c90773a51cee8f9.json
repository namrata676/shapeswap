{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport erc20 from 'config/abi/erc20.json';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber';\nimport multicall from 'utils/multicall';\nconst fetchFarm = async farm => {\n  var _info$allocPoint;\n  const {\n    pid,\n    lpAddresses,\n    token,\n    quoteToken\n  } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const calls = [\n  // Balance of token in the LP contract\n  {\n    address: getAddress(token.address),\n    name: 'balanceOf',\n    params: [lpAddress]\n  },\n  // Balance of quote token on LP contract\n  {\n    address: getAddress(quoteToken.address),\n    name: 'balanceOf',\n    params: [lpAddress]\n  },\n  // Balance of LP tokens in the master chef contract\n  {\n    address: lpAddress,\n    name: 'balanceOf',\n    params: [getMasterChefAddress()]\n  },\n  // Total supply of LP tokens\n  {\n    address: lpAddress,\n    name: 'totalSupply'\n  },\n  // Token decimals\n  {\n    address: getAddress(token.address),\n    name: 'decimals'\n  },\n  // Quote token decimals\n  {\n    address: getAddress(quoteToken.address),\n    name: 'decimals'\n  }];\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));\n\n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals));\n\n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio);\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio);\n\n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2));\n\n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] = pid || pid === 0 ? await multicall(masterchefABI, [{\n    address: getMasterChefAddress(),\n    name: 'poolInfo',\n    params: [pid]\n  }, {\n    address: getMasterChefAddress(),\n    name: 'totalAllocPoint'\n  }]) : [null, null];\n  const allocPoint = info ? new BigNumber((_info$allocPoint = info.allocPoint) === null || _info$allocPoint === void 0 ? void 0 : _info$allocPoint._hex) : BIG_ZERO;\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO;\n  const data = {\n    tokenAmountMc: tokenAmountMc.toJSON(),\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`\n  };\n  return data;\n};\nexport default fetchFarm;","map":{"version":3,"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","_info$allocPoint","pid","lpAddresses","token","quoteToken","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","tokenAmountMc","times","quoteTokenAmountMc","lpTotalInQuoteToken","info","totalAllocPoint","allocPoint","_hex","poolWeight","data","toJSON","tokenPriceVsQuote","multiplier","toString"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/farms/fetchPublicFarmData.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport erc20 from 'config/abi/erc20.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport multicall from 'utils/multicall'\nimport { Farm, SerializedBigNumber } from '../types'\n\ntype PublicFarmData = {\n  tokenAmountMc: SerializedBigNumber\n  quoteTokenAmountMc: SerializedBigNumber\n  tokenAmountTotal: SerializedBigNumber\n  quoteTokenAmountTotal: SerializedBigNumber\n  lpTotalInQuoteToken: SerializedBigNumber\n  lpTotalSupply: SerializedBigNumber\n  tokenPriceVsQuote: SerializedBigNumber\n  poolWeight: SerializedBigNumber\n  multiplier: string\n}\n\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: getAddress(token.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: getAddress(quoteToken.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: getAddress(token.address),\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: getAddress(quoteToken.address),\n      name: 'decimals',\n    },\n  ]\n\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n    await multicall(erc20, calls)\n\n    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n    \n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n  \n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n  \n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\n  \n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] =\n  pid || pid === 0\n      ? await multicall(masterchefABI, [\n        {\n            address: getMasterChefAddress(),\n            name: 'poolInfo',\n            params: [pid],\n          },\n          {\n            address: getMasterChefAddress(),\n            name: 'totalAllocPoint',\n          },\n        ])\n        : [null, null]\n        \n        const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n        const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\n        \n        const data =  {\n          tokenAmountMc: tokenAmountMc.toJSON(),\n          quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n          tokenAmountTotal: tokenAmountTotal.toJSON(),\n          quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n          lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n          tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n          poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  }\n\n  return data\n\n}\n\nexport default fetchFarm\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}