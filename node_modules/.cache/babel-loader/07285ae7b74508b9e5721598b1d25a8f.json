{"ast":null,"code":"import CID from'cids';import{getCodec,rmPrefix}from'multicodec';import{decode,toB58String}from'multihashes';function hexToUint8Array(hex){// eslint-disable-next-line no-param-reassign\nhex=hex.startsWith('0x')?hex.substr(2):hex;if(hex.length%2!==0)throw new Error('hex must have length that is multiple of 2');const arr=new Uint8Array(hex.length/2);for(let i=0;i<arr.length;i++){arr[i]=parseInt(hex.substr(i*2,2),16);}return arr;}const UTF_8_DECODER=new TextDecoder();/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */export default function contenthashToUri(contenthash){const buff=hexToUint8Array(contenthash);const codec=getCodec(buff);// the typing is wrong for @types/multicodec\nswitch(codec){case'ipfs-ns':{const data=rmPrefix(buff);const cid=new CID(data);return\"ipfs://\".concat(toB58String(cid.multihash));}case'ipns-ns':{const data=rmPrefix(buff);const cid=new CID(data);const multihash=decode(cid.multihash);if(multihash.name==='identity'){return\"ipns://\".concat(UTF_8_DECODER.decode(multihash.digest).trim());}return\"ipns://\".concat(toB58String(cid.multihash));}default:throw new Error(\"Unrecognized codec: \".concat(codec));}}","map":{"version":3,"names":["CID","getCodec","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","buff","codec","data","cid","concat","multihash","name","digest","trim"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/contenthashToUri.ts"],"sourcesContent":["import CID from 'cids'\nimport { getCodec, rmPrefix } from 'multicodec'\nimport { decode, toB58String } from 'multihashes'\n\nfunction hexToUint8Array(hex: string): Uint8Array {\n  // eslint-disable-next-line no-param-reassign\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\n  const arr = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\n  }\n  return arr\n}\n\nconst UTF_8_DECODER = new TextDecoder()\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash: string): string {\n  const buff = hexToUint8Array(contenthash)\n  const codec = getCodec(buff as Buffer) // the typing is wrong for @types/multicodec\n  switch (codec) {\n    case 'ipfs-ns': {\n      const data = rmPrefix(buff as Buffer)\n      const cid = new CID(data)\n      return `ipfs://${toB58String(cid.multihash)}`\n    }\n    case 'ipns-ns': {\n      const data = rmPrefix(buff as Buffer)\n      const cid = new CID(data)\n      const multihash = decode(cid.multihash)\n      if (multihash.name === 'identity') {\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\n      }\n      return `ipns://${toB58String(cid.multihash)}`\n    }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`)\n  }\n}\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,MAAM,CACtB,OAASC,QAAQ,CAAEC,QAAQ,KAAQ,YAAY,CAC/C,OAASC,MAAM,CAAEC,WAAW,KAAQ,aAAa,CAEjD,QAAS,CAAAC,eAAeA,CAACC,GAAW,CAAc,CAChD;AACAA,GAAG,CAAGA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,CAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAAGF,GAAG,CAChD,GAAIA,GAAG,CAACG,MAAM,CAAG,CAAC,GAAK,CAAC,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CACvF,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,UAAU,CAACN,GAAG,CAACG,MAAM,CAAG,CAAC,CAAC,CAC1C,IAAK,GAAI,CAAAI,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,GAAG,CAACF,MAAM,CAAEI,CAAC,EAAE,CAAE,CACnCF,GAAG,CAACE,CAAC,CAAC,CAAGC,QAAQ,CAACR,GAAG,CAACE,MAAM,CAACK,CAAC,CAAG,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC7C,CACA,MAAO,CAAAF,GAAG,CACZ,CAEA,KAAM,CAAAI,aAAa,CAAG,GAAI,CAAAC,WAAW,CAAC,CAAC,CAEvC;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAC,gBAAgBA,CAACC,WAAmB,CAAU,CACpE,KAAM,CAAAC,IAAI,CAAGd,eAAe,CAACa,WAAW,CAAC,CACzC,KAAM,CAAAE,KAAK,CAAGnB,QAAQ,CAACkB,IAAc,CAAC,CAAC;AACvC,OAAQC,KAAK,EACX,IAAK,SAAS,CAAE,CACd,KAAM,CAAAC,IAAI,CAAGnB,QAAQ,CAACiB,IAAc,CAAC,CACrC,KAAM,CAAAG,GAAG,CAAG,GAAI,CAAAtB,GAAG,CAACqB,IAAI,CAAC,CACzB,gBAAAE,MAAA,CAAiBnB,WAAW,CAACkB,GAAG,CAACE,SAAS,CAAC,EAC7C,CACA,IAAK,SAAS,CAAE,CACd,KAAM,CAAAH,IAAI,CAAGnB,QAAQ,CAACiB,IAAc,CAAC,CACrC,KAAM,CAAAG,GAAG,CAAG,GAAI,CAAAtB,GAAG,CAACqB,IAAI,CAAC,CACzB,KAAM,CAAAG,SAAS,CAAGrB,MAAM,CAACmB,GAAG,CAACE,SAAS,CAAC,CACvC,GAAIA,SAAS,CAACC,IAAI,GAAK,UAAU,CAAE,CACjC,gBAAAF,MAAA,CAAiBR,aAAa,CAACZ,MAAM,CAACqB,SAAS,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,EAChE,CACA,gBAAAJ,MAAA,CAAiBnB,WAAW,CAACkB,GAAG,CAACE,SAAS,CAAC,EAC7C,CACA,QACE,KAAM,IAAI,CAAAd,KAAK,wBAAAa,MAAA,CAAwBH,KAAK,CAAE,CAAC,CACnD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module"}