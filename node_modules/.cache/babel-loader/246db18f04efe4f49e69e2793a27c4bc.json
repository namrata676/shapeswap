{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { nftSources } from 'config/constants/nfts';\nimport { getAddress } from 'utils/addressHelpers';\nimport { getErc721Contract } from 'utils/contractHelpers';\nimport { getNftByTokenId } from 'utils/collectibles';\nconst initialState = {\n  isInitialized: false,\n  isLoading: true,\n  data: {}\n};\n// Thunks\nexport const fetchWalletNfts = createAsyncThunk('collectibles/fetchWalletNfts', async account => {\n  // For each nft source get nft data\n  const nftSourcePromises = Object.keys(nftSources).map(async nftSourceType => {\n    const {\n      address: addressObj\n    } = nftSources[nftSourceType];\n    const address = getAddress(addressObj);\n    const contract = getErc721Contract(address);\n    const getTokenIdAndData = async index => {\n      try {\n        const tokenIdBn = await contract.tokenOfOwnerByIndex(account, index);\n        const tokenId = tokenIdBn.toNumber();\n        const walletNft = await getNftByTokenId(address, tokenId);\n        return [tokenId, walletNft.identifier];\n      } catch (error) {\n        console.error('getTokenIdAndData', error);\n        return null;\n      }\n    };\n    const balanceOfResponse = await contract.balanceOf(account);\n    const balanceOf = balanceOfResponse.toNumber();\n    if (balanceOf === 0) {\n      return [];\n    }\n    const nftDataFetchPromises = [];\n\n    // For each index get the tokenId and data associated with it\n    for (let i = 0; i < balanceOf; i++) {\n      nftDataFetchPromises.push(getTokenIdAndData(i));\n    }\n    const nftData = await Promise.all(nftDataFetchPromises);\n    return nftData;\n  });\n  const nftSourceData = await Promise.all(nftSourcePromises);\n  return nftSourceData.flat();\n});\nexport const collectiblesSlice = createSlice({\n  name: 'collectibles',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWalletNfts.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchWalletNfts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isInitialized = true;\n      state.data = action.payload.reduce((accum, association) => {\n        if (!association) {\n          return accum;\n        }\n        const [tokenId, identifier] = association;\n        return {\n          ...accum,\n          [identifier]: accum[identifier] ? [...accum[identifier], tokenId] : [tokenId]\n        };\n      }, {});\n    });\n  }\n});\nexport default collectiblesSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","nftSources","getAddress","getErc721Contract","getNftByTokenId","initialState","isInitialized","isLoading","data","fetchWalletNfts","account","nftSourcePromises","Object","keys","map","nftSourceType","address","addressObj","contract","getTokenIdAndData","index","tokenIdBn","tokenOfOwnerByIndex","tokenId","toNumber","walletNft","identifier","error","console","balanceOfResponse","balanceOf","nftDataFetchPromises","i","push","nftData","Promise","all","nftSourceData","flat","collectiblesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","reduce","accum","association","reducer"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/collectibles/index.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { CollectiblesState } from 'state/types'\nimport { nftSources } from 'config/constants/nfts'\nimport { NftType } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { getNftByTokenId } from 'utils/collectibles'\nimport { ethers } from 'ethers'\n\nconst initialState: CollectiblesState = {\n  isInitialized: false,\n  isLoading: true,\n  data: {},\n}\n\ntype NftSourceItem = [number, string]\n\n// Thunks\nexport const fetchWalletNfts = createAsyncThunk<NftSourceItem[], string>(\n  'collectibles/fetchWalletNfts',\n  async (account) => {\n    // For each nft source get nft data\n    const nftSourcePromises = Object.keys(nftSources).map(async (nftSourceType) => {\n      const { address: addressObj } = nftSources[nftSourceType as NftType]\n      const address = getAddress(addressObj)\n      const contract = getErc721Contract(address)\n\n      const getTokenIdAndData = async (index: number) => {\n        try {\n          const tokenIdBn: ethers.BigNumber = await contract.tokenOfOwnerByIndex(account, index)\n          const tokenId = tokenIdBn.toNumber()\n\n          const walletNft = await getNftByTokenId(address, tokenId)\n          return [tokenId, walletNft.identifier]\n        } catch (error) {\n          console.error('getTokenIdAndData', error)\n          return null\n        }\n      }\n\n      const balanceOfResponse = await contract.balanceOf(account)\n      const balanceOf = balanceOfResponse.toNumber()\n\n      if (balanceOf === 0) {\n        return []\n      }\n\n      const nftDataFetchPromises = []\n\n      // For each index get the tokenId and data associated with it\n      for (let i = 0; i < balanceOf; i++) {\n        nftDataFetchPromises.push(getTokenIdAndData(i))\n      }\n\n      const nftData = await Promise.all(nftDataFetchPromises)\n      return nftData\n    })\n\n    const nftSourceData = await Promise.all(nftSourcePromises)\n\n    return nftSourceData.flat()\n  },\n)\n\nexport const collectiblesSlice = createSlice({\n  name: 'collectibles',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWalletNfts.pending, (state) => {\n      state.isLoading = true\n    })\n    builder.addCase(fetchWalletNfts.fulfilled, (state, action) => {\n      state.isLoading = false\n      state.isInitialized = true\n      state.data = action.payload.reduce((accum, association) => {\n        if (!association) {\n          return accum\n        }\n\n        const [tokenId, identifier] = association as NftSourceItem\n\n        return {\n          ...accum,\n          [identifier]: accum[identifier] ? [...accum[identifier], tokenId] : [tokenId],\n        }\n      }, {})\n    })\n  },\n})\n\nexport default collectiblesSlice.reducer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}