{"ast":null,"code":"import _objectSpread from\"/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import farmsConfig from'config/constants/farms';import isArchivedPid from'utils/farmHelpers';import fetchFarms from'./fetchFarms';import fetchFarmsPrices from'./fetchFarmsPrices';import{fetchFarmUserEarnings,fetchFarmUserAllowances,fetchFarmUserTokenBalances,fetchFarmUserStakedBalances}from'./fetchFarmUser';const noAccountFarmConfig=farmsConfig.map(farm=>_objectSpread(_objectSpread({},farm),{},{userData:{allowance:'0',tokenBalance:'0',stakedBalance:'0',earnings:'0'}}));const initialState={data:noAccountFarmConfig,loadArchivedFarmsData:false,userDataLoaded:false};export const nonArchivedFarms=farmsConfig.filter(_ref=>{let{pid}=_ref;return!isArchivedPid(pid);});// Async thunks\nexport const fetchFarmsPublicDataAsync=createAsyncThunk('farms/fetchFarmsPublicDataAsync',async pids=>{const farmsToFetch=farmsConfig.filter(farmConfig=>pids.includes(farmConfig.pid));// Add price helper farms\n// const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\n// const farmsWithPriceHelpers = farmsToFetch\nconst farms=await fetchFarms(farmsToFetch);const farmsWithPrices=await fetchFarmsPrices(farms);// Filter out price helper LP config farms\n// const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\n//   return farm.pid || farm.pid === 0\n// })\nreturn farmsWithPrices;});export const fetchFarmUserDataAsync=createAsyncThunk('farms/fetchFarmUserDataAsync',async _ref2=>{let{account,pids}=_ref2;const farmsToFetch=farmsConfig.filter(farmConfig=>pids.includes(farmConfig.pid));const userFarmAllowances=await fetchFarmUserAllowances(account,farmsToFetch);const userFarmTokenBalances=await fetchFarmUserTokenBalances(account,farmsToFetch);const userFarmEarnings=await fetchFarmUserEarnings(account,farmsToFetch);const userStakedBalances=await fetchFarmUserStakedBalances(account,farmsToFetch);return userFarmAllowances.map((farmAllowance,index)=>{return{pid:farmsToFetch[index].pid,allowance:userFarmAllowances[index],tokenBalance:userFarmTokenBalances[index],stakedBalance:userStakedBalances[index],earnings:userFarmEarnings[index]};});});export const farmsSlice=createSlice({name:'Farms',initialState,reducers:{setLoadArchivedFarmsData:(state,action)=>{const loadArchivedFarmsData=action.payload;state.loadArchivedFarmsData=loadArchivedFarmsData;}},extraReducers:builder=>{// Update farms with live data\nbuilder.addCase(fetchFarmsPublicDataAsync.fulfilled,(state,action)=>{state.data=state.data.map(farm=>{const liveFarmData=action.payload.find(farmData=>farmData.pid===farm.pid);return _objectSpread(_objectSpread({},farm),liveFarmData);});});// Update farms with user data\nbuilder.addCase(fetchFarmUserDataAsync.fulfilled,(state,action)=>{action.payload.forEach(userDataEl=>{const{pid}=userDataEl;const index=state.data.findIndex(farm=>farm.pid===pid);state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:userDataEl});});state.userDataLoaded=true;});}});// Actions\nexport const{setLoadArchivedFarmsData}=farmsSlice.actions;export default farmsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","farmsConfig","isArchivedPid","fetchFarms","fetchFarmsPrices","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","noAccountFarmConfig","map","farm","_objectSpread","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","filter","_ref","pid","fetchFarmsPublicDataAsync","pids","farmsToFetch","farmConfig","includes","farms","farmsWithPrices","fetchFarmUserDataAsync","_ref2","account","userFarmAllowances","userFarmTokenBalances","userFarmEarnings","userStakedBalances","farmAllowance","index","farmsSlice","name","reducers","setLoadArchivedFarmsData","state","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","find","farmData","forEach","userDataEl","findIndex","actions","reducer"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/farms/index.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport isArchivedPid from 'utils/farmHelpers'\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\nimport fetchFarms from './fetchFarms'\nimport fetchFarmsPrices from './fetchFarmsPrices'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\n  ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0',\n  },\n}))\n\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\n\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\n\n// Async thunks\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\n  'farms/fetchFarmsPublicDataAsync',\n  async (pids) => {\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\n\n    // Add price helper farms\n    // const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\n    // const farmsWithPriceHelpers = farmsToFetch\n\n    const farms = await fetchFarms(farmsToFetch)\n    const farmsWithPrices = await fetchFarmsPrices(farms)\n\n    // Filter out price helper LP config farms\n    // const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\n    //   return farm.pid || farm.pid === 0\n    // })\n    return farmsWithPrices\n  },\n)\n\ninterface FarmUserDataResponse {\n  pid: number\n  allowance: string\n  tokenBalance: string\n  stakedBalance: string\n  earnings: string\n}\n\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\n  'farms/fetchFarmUserDataAsync',\n  async ({ account, pids }) => {\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\n\n\n    return userFarmAllowances.map((farmAllowance, index) => {\n      return {\n        pid: farmsToFetch[index].pid,\n        allowance: userFarmAllowances[index],\n        tokenBalance: userFarmTokenBalances[index],\n        stakedBalance: userStakedBalances[index],\n        earnings: userFarmEarnings[index],\n      }\n    })\n  },\n)\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload\n      state.loadArchivedFarmsData = loadArchivedFarmsData\n    },\n  },\n  \n  \n  extraReducers: (builder) => {\n    // Update farms with live data\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\n      state.data = state.data.map((farm) => {\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    })\n\n    // Update farms with user data\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach((userDataEl) => {\n        const { pid } = userDataEl\n        const index = state.data.findIndex((farm) => farm.pid === pid)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    })\n  },\n})\n\n// Actions\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\n\nexport default farmsSlice.reducer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}