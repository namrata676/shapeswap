{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport { useDispatch } from 'react-redux';\nimport farmsReducer from './farms';\nimport predictionsReducer from './predictions';\nimport profileReducer from './profile';\nimport teamsReducer from './teams';\nimport achievementsReducer from './achievements';\nimport blockReducer from './block';\nimport collectiblesReducer from './collectibles';\nimport votingReducer from './voting';\nimport lotteryReducer from './lottery';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    block: blockReducer,\n    farms: farmsReducer,\n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    collectibles: collectiblesReducer,\n    voting: votingReducer,\n    lottery: lotteryReducer,\n    // Exchange\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: true\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\n\nexport const useAppDispatch = () => useDispatch();\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","useDispatch","farmsReducer","predictionsReducer","profileReducer","teamsReducer","achievementsReducer","blockReducer","collectiblesReducer","votingReducer","lotteryReducer","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","PERSISTED_KEYS","store","devTools","process","env","NODE_ENV","reducer","achievements","block","farms","predictions","profile","teams","collectibles","voting","lottery","middleware","thunk","states","preloadedState","dispatch","useAppDispatch"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\nimport { useDispatch } from 'react-redux'\nimport farmsReducer from './farms'\n\nimport predictionsReducer from './predictions'\nimport profileReducer from './profile'\nimport teamsReducer from './teams'\nimport achievementsReducer from './achievements'\nimport blockReducer from './block'\nimport collectiblesReducer from './collectibles'\nimport votingReducer from './voting'\nimport lotteryReducer from './lottery'\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    block: blockReducer,\n    farms: farmsReducer,    \n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    collectibles: collectiblesReducer,\n    voting: votingReducer,\n    lottery: lotteryReducer,\n\n    // Exchange\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n})\n\nstore.dispatch(updateVersion())\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppDispatch = () => useDispatch()\n\nexport default store\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,SAASC,IAAI,EAAEC,IAAI,QAAQ,2BAA2B;AACtD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,YAAY,MAAM,SAAS;AAElC,OAAOC,kBAAkB,MAAM,eAAe;AAC9C,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,YAAY,MAAM,SAAS;AAClC,OAAOC,mBAAmB,MAAM,gBAAgB;AAChD,OAAOC,YAAY,MAAM,SAAS;AAClC,OAAOC,mBAAmB,MAAM,gBAAgB;AAChD,OAAOC,aAAa,MAAM,UAAU;AACpC,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,SAAS,MAAM,qBAAqB;AAE3C,MAAMC,cAAwB,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC;AAElE,MAAMC,KAAK,GAAGxB,cAAc,CAAC;EAC3ByB,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAC/CC,OAAO,EAAE;IACPC,YAAY,EAAErB,mBAAmB;IACjCsB,KAAK,EAAErB,YAAY;IACnBsB,KAAK,EAAE3B,YAAY;IACnB4B,WAAW,EAAE3B,kBAAkB;IAC/B4B,OAAO,EAAE3B,cAAc;IACvB4B,KAAK,EAAE3B,YAAY;IACnB4B,YAAY,EAAEzB,mBAAmB;IACjC0B,MAAM,EAAEzB,aAAa;IACrB0B,OAAO,EAAEzB,cAAc;IAEvB;IACAC,WAAW;IACXE,IAAI;IACJC,YAAY;IACZC,IAAI;IACJC,IAAI;IACJE,IAAI;IACJC,SAAS;IACTF;EACF,CAAC;EACDmB,UAAU,EAAE,CAAC,GAAGtC,oBAAoB,CAAC;IAAEuC,KAAK,EAAE;EAAK,CAAC,CAAC,EAAEtC,IAAI,CAAC;IAAEuC,MAAM,EAAElB;EAAe,CAAC,CAAC,CAAC;EACxFmB,cAAc,EAAEvC,IAAI,CAAC;IAAEsC,MAAM,EAAElB;EAAe,CAAC;AACjD,CAAC,CAAC;AAEFC,KAAK,CAACmB,QAAQ,CAAC5B,aAAa,EAAE,CAAC;;AAE/B;AACA;AACA;;AAGA,OAAO,MAAM6B,cAAc,GAAG,MAAMxC,WAAW,EAAE;AAEjD,eAAeoB,KAAK"},"metadata":{},"sourceType":"module"}