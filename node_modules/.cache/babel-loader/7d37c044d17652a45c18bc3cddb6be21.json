{"ast":null,"code":"import _objectSpread from\"/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"/Users/namratapatel/upwork/SmartFinance-OmniDex/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import request,{gql}from'graphql-request';import{SNAPSHOT_API,SNAPSHOT_VOTING_API}from'config/constants/endpoints';import{ProposalState}from'state/types';import{simpleRpcProvider}from'utils/providers';export const getProposals=async function(){let first=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;let skip=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let state=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ProposalState.ACTIVE;const response=await request(SNAPSHOT_API,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\\n        proposals(\\n          first: $first\\n          skip: $skip\\n          orderBy: \\\"end\\\"\\n          orderDirection: desc\\n          where: { space_in: \\\"cake.eth\\\", state: $state }\\n        ) {\\n          id\\n          title\\n          body\\n          choices\\n          start\\n          end\\n          snapshot\\n          state\\n          author\\n          space {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    \"]))),{first,skip,state});return response.proposals;};export const getProposal=async id=>{const response=await request(SNAPSHOT_API,gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n      query getProposal($id: String) {\\n        proposal(id: $id) {\\n          id\\n          title\\n          body\\n          choices\\n          start\\n          end\\n          snapshot\\n          state\\n          author\\n          space {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    \"]))),{id});return response.proposal;};export const getVotes=async(first,skip,where)=>{const response=await request(SNAPSHOT_API,gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\\n        votes(first: $first, skip: $skip, where: $where) {\\n          id\\n          voter\\n          created\\n          choice\\n          space {\\n            id\\n            name\\n          }\\n          proposal {\\n            choices\\n          }\\n          metadata\\n        }\\n      }\\n    \"]))),{first,skip,where});return response.votes;};export const getVoteVerificationStatuses=async(votes,block)=>{const blockNumber=block||(await simpleRpcProvider.getBlockNumber());const votesToVerify=votes.map(vote=>{var _vote$metadata,_vote$metadata2;return{address:vote.voter,verificationHash:(_vote$metadata=vote.metadata)===null||_vote$metadata===void 0?void 0:_vote$metadata.verificationHash,total:(_vote$metadata2=vote.metadata)===null||_vote$metadata2===void 0?void 0:_vote$metadata2.votingPower};});const response=await fetch(\"\".concat(SNAPSHOT_VOTING_API,\"/verify\"),{method:'post',headers:{'Content-Type':'application/json'},body:JSON.stringify({block:blockNumber,votes:votesToVerify})});if(!response.ok){throw new Error(response.statusText);}const data=await response.json();return votes.reduce((accum,vote)=>{var _data$data$vote$voter;return _objectSpread(_objectSpread({},accum),{},{[vote.id]:((_data$data$vote$voter=data.data[vote.voter.toLowerCase()])===null||_data$data$vote$voter===void 0?void 0:_data$data$vote$voter.isValid)===true});},{});};export const getAllVotes=async function(proposalId,block){let votesPerChunk=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;// const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\nreturn new Promise((resolve,reject)=>{let votes=[];const fetchVoteChunk=async newSkip=>{try{const voteChunk=await getVotes(votesPerChunk,newSkip,{proposal:proposalId});if(voteChunk.length===0){resolve(votes);}else{votes=[...votes,...voteChunk];fetchVoteChunk(newSkip+votesPerChunk);}}catch(error){reject(error);}};fetchVoteChunk(0);});};","map":{"version":3,"names":["request","gql","SNAPSHOT_API","SNAPSHOT_VOTING_API","ProposalState","simpleRpcProvider","getProposals","first","arguments","length","undefined","skip","state","ACTIVE","response","_templateObject","_taggedTemplateLiteral","proposals","getProposal","id","_templateObject2","proposal","getVotes","where","_templateObject3","votes","getVoteVerificationStatuses","block","blockNumber","getBlockNumber","votesToVerify","map","vote","_vote$metadata","_vote$metadata2","address","voter","verificationHash","metadata","total","votingPower","fetch","concat","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","reduce","accum","_data$data$vote$voter","_objectSpread","toLowerCase","isValid","getAllVotes","proposalId","votesPerChunk","Promise","resolve","reject","fetchVoteChunk","newSkip","voteChunk","error"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/voting/helpers.ts"],"sourcesContent":["import request, { gql } from 'graphql-request'\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\n\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\n  const response: { proposals: Proposal[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { first, skip, state },\n  )\n  return response.proposals\n}\n\nexport const getProposal = async (id: string): Promise<Proposal> => {\n  const response: { proposal: Proposal } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { id },\n  )\n  return response.proposal\n}\n\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\n  const response: { votes: Vote[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.votes\n}\n\nexport const getVoteVerificationStatuses = async (\n  votes: Vote[],\n  block?: number,\n): Promise<{ [key: string]: boolean }> => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n\n  const votesToVerify = votes.map((vote) => ({\n    address: vote.voter,\n    verificationHash: vote.metadata?.verificationHash,\n    total: vote.metadata?.votingPower,\n  }))\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify,\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n  return votes.reduce((accum, vote) => {\n    return {\n      ...accum,\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\n    }\n  }, {})\n}\n\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes: Vote[] = []\n\n    const fetchVoteChunk = async (newSkip: number) => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\n\n        if (voteChunk.length === 0) {\n          resolve(votes)\n        } else {\n          votes = [...votes, ...voteChunk]\n          fetchVoteChunk(newSkip + votesPerChunk)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    fetchVoteChunk(0)\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}