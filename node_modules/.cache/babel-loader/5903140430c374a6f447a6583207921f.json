{"ast":null,"code":"(function (e, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = e || self, e.JSBI = t());\n})(this, function () {\n  \"use strict\";\n\n  var e = Math.imul,\n    t = Math.clz32;\n  function i(e) {\n    \"@babel/helpers - typeof\";\n\n    return i = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n      return typeof e;\n    } : function (e) {\n      return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n    }, i(e);\n  }\n  function _(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n  function n(e, t) {\n    for (var _, n = 0; n < t.length; n++) _ = t[n], _.enumerable = _.enumerable || !1, _.configurable = !0, \"value\" in _ && (_.writable = !0), Object.defineProperty(e, _.key, _);\n  }\n  function l(e, t, i) {\n    return t && n(e.prototype, t), i && n(e, i), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  function g(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), t && u(e, t);\n  }\n  function a(e) {\n    return a = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n      return e.__proto__ || Object.getPrototypeOf(e);\n    }, a(e);\n  }\n  function u(e, t) {\n    return u = Object.setPrototypeOf || function (e, t) {\n      return e.__proto__ = t, e;\n    }, u(e, t);\n  }\n  function s() {\n    if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n    if (Reflect.construct.sham) return !1;\n    if (\"function\" == typeof Proxy) return !0;\n    try {\n      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n    } catch (t) {\n      return !1;\n    }\n  }\n  function r() {\n    return r = s() ? Reflect.construct : function (e, t, i) {\n      var _ = [null];\n      _.push.apply(_, t);\n      var n = Function.bind.apply(e, _),\n        l = new n();\n      return i && u(l, i.prototype), l;\n    }, r.apply(null, arguments);\n  }\n  function d(e) {\n    return -1 !== Function.toString.call(e).indexOf(\"[native code]\");\n  }\n  function h(e) {\n    var t = \"function\" == typeof Map ? new Map() : void 0;\n    return h = function (e) {\n      function i() {\n        return r(e, arguments, a(this).constructor);\n      }\n      if (null === e || !d(e)) return e;\n      if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\");\n      if (\"undefined\" != typeof t) {\n        if (t.has(e)) return t.get(e);\n        t.set(e, i);\n      }\n      return i.prototype = Object.create(e.prototype, {\n        constructor: {\n          value: i,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), u(i, e);\n    }, h(e);\n  }\n  function b(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n  function m(e, t) {\n    if (t && (\"object\" == typeof t || \"function\" == typeof t)) return t;\n    if (void 0 !== t) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return b(e);\n  }\n  function c(e) {\n    var t = s();\n    return function () {\n      var i,\n        _ = a(e);\n      if (t) {\n        var n = a(this).constructor;\n        i = Reflect.construct(_, arguments, n);\n      } else i = _.apply(this, arguments);\n      return m(this, i);\n    };\n  }\n  function v(e, t) {\n    return y(e) || f(e, t) || D(e, t) || k();\n  }\n  function y(e) {\n    if (Array.isArray(e)) return e;\n  }\n  function f(e, t) {\n    var i = null == e ? null : \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n    if (null != i) {\n      var _,\n        n,\n        l = [],\n        g = !0,\n        o = !1;\n      try {\n        for (i = i.call(e); !(g = (_ = i.next()).done) && (l.push(_.value), !(t && l.length === t)); g = !0);\n      } catch (e) {\n        o = !0, n = e;\n      } finally {\n        try {\n          g || null == i[\"return\"] || i[\"return\"]();\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return l;\n    }\n  }\n  function D(e, t) {\n    if (e) {\n      if (\"string\" == typeof e) return p(e, t);\n      var i = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === i && e.constructor && (i = e.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(e) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? p(e, t) : void 0;\n    }\n  }\n  function p(e, t) {\n    (null == t || t > e.length) && (t = e.length);\n    for (var _ = 0, n = Array(t); _ < t; _++) n[_] = e[_];\n    return n;\n  }\n  function k() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function B(e, t) {\n    var _ = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n    if (!_) {\n      if (Array.isArray(e) || (_ = D(e)) || t && e && \"number\" == typeof e.length) {\n        _ && (e = _);\n        var n = 0,\n          l = function () {};\n        return {\n          s: l,\n          n: function () {\n            return n >= e.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: e[n++]\n            };\n          },\n          e: function (t) {\n            throw t;\n          },\n          f: l\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var g,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        _ = _.call(e);\n      },\n      n: function () {\n        var e = _.next();\n        return a = e.done, e;\n      },\n      e: function (t) {\n        u = !0, g = t;\n      },\n      f: function () {\n        try {\n          a || null == _.return || _.return();\n        } finally {\n          if (u) throw g;\n        }\n      }\n    };\n  }\n  var S = function (e) {\n    var t = Math.abs,\n      n = Math.max,\n      o = Math.floor;\n    function a(e, t) {\n      var i;\n      if (_(this, a), i = u.call(this, e), i.sign = t, Object.setPrototypeOf(b(i), a.prototype), e > a.__kMaxLength) throw new RangeError(\"Maximum BigInt size exceeded\");\n      return i;\n    }\n    g(a, e);\n    var u = c(a);\n    return l(a, [{\n      key: \"toDebugString\",\n      value: function () {\n        var e,\n          t = [\"BigInt[\"],\n          i = B(this);\n        try {\n          for (i.s(); !(e = i.n()).done;) {\n            var _ = e.value;\n            t.push((_ ? (_ >>> 0).toString(16) : _) + \", \");\n          }\n        } catch (e) {\n          i.e(e);\n        } finally {\n          i.f();\n        }\n        return t.push(\"]\"), t.join(\"\");\n      }\n    }, {\n      key: \"toString\",\n      value: function () {\n        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 10;\n        if (2 > e || 36 < e) throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n        return 0 === this.length ? \"0\" : 0 == (e & e - 1) ? a.__toStringBasePowerOfTwo(this, e) : a.__toStringGeneric(this, e, !1);\n      }\n    }, {\n      key: \"valueOf\",\n      value: function () {\n        throw new Error(\"Convert JSBI instances to native numbers using `toNumber`.\");\n      }\n    }, {\n      key: \"__copy\",\n      value: function () {\n        for (var e = new a(this.length, this.sign), t = 0; t < this.length; t++) e[t] = this[t];\n        return e;\n      }\n    }, {\n      key: \"__trim\",\n      value: function () {\n        for (var e = this.length, t = this[e - 1]; 0 === t;) e--, t = this[e - 1], this.pop();\n        return 0 === e && (this.sign = !1), this;\n      }\n    }, {\n      key: \"__initializeDigits\",\n      value: function () {\n        for (var e = 0; e < this.length; e++) this[e] = 0;\n      }\n    }, {\n      key: \"__clzmsd\",\n      value: function () {\n        return a.__clz30(this.__digit(this.length - 1));\n      }\n    }, {\n      key: \"__inplaceMultiplyAdd\",\n      value: function (e, t, _) {\n        _ > this.length && (_ = this.length);\n        for (var n = 32767 & e, l = e >>> 15, g = 0, o = t, u = 0; u < _; u++) {\n          var s = this.__digit(u),\n            r = 32767 & s,\n            d = s >>> 15,\n            h = a.__imul(r, n),\n            b = a.__imul(r, l),\n            m = a.__imul(d, n),\n            c = a.__imul(d, l),\n            v = o + h + g;\n          g = v >>> 30, v &= 1073741823, v += ((32767 & b) << 15) + ((32767 & m) << 15), g += v >>> 30, o = c + (b >>> 15) + (m >>> 15), this.__setDigit(u, 1073741823 & v);\n        }\n        if (0 !== g || 0 !== o) throw new Error(\"implementation bug\");\n      }\n    }, {\n      key: \"__inplaceAdd\",\n      value: function (e, t, _) {\n        for (var n, l = 0, g = 0; g < _; g++) n = this.__halfDigit(t + g) + e.__halfDigit(g) + l, l = n >>> 15, this.__setHalfDigit(t + g, 32767 & n);\n        return l;\n      }\n    }, {\n      key: \"__inplaceSub\",\n      value: function (e, t, _) {\n        var n = 0;\n        if (1 & t) {\n          t >>= 1;\n          for (var l = this.__digit(t), g = 32767 & l, o = 0; o < _ - 1 >>> 1; o++) {\n            var a = e.__digit(o),\n              u = (l >>> 15) - (32767 & a) - n;\n            n = 1 & u >>> 15, this.__setDigit(t + o, (32767 & u) << 15 | 32767 & g), l = this.__digit(t + o + 1), g = (32767 & l) - (a >>> 15) - n, n = 1 & g >>> 15;\n          }\n          var s = e.__digit(o),\n            r = (l >>> 15) - (32767 & s) - n;\n          n = 1 & r >>> 15, this.__setDigit(t + o, (32767 & r) << 15 | 32767 & g);\n          if (t + o + 1 >= this.length) throw new RangeError(\"out of bounds\");\n          0 == (1 & _) && (l = this.__digit(t + o + 1), g = (32767 & l) - (s >>> 15) - n, n = 1 & g >>> 15, this.__setDigit(t + e.length, 1073709056 & l | 32767 & g));\n        } else {\n          t >>= 1;\n          for (var d = 0; d < e.length - 1; d++) {\n            var h = this.__digit(t + d),\n              b = e.__digit(d),\n              m = (32767 & h) - (32767 & b) - n;\n            n = 1 & m >>> 15;\n            var c = (h >>> 15) - (b >>> 15) - n;\n            n = 1 & c >>> 15, this.__setDigit(t + d, (32767 & c) << 15 | 32767 & m);\n          }\n          var v = this.__digit(t + d),\n            y = e.__digit(d),\n            f = (32767 & v) - (32767 & y) - n;\n          n = 1 & f >>> 15;\n          var D = 0;\n          0 == (1 & _) && (D = (v >>> 15) - (y >>> 15) - n, n = 1 & D >>> 15), this.__setDigit(t + d, (32767 & D) << 15 | 32767 & f);\n        }\n        return n;\n      }\n    }, {\n      key: \"__inplaceRightShift\",\n      value: function (e) {\n        if (0 !== e) {\n          for (var t, _ = this.__digit(0) >>> e, n = this.length - 1, l = 0; l < n; l++) t = this.__digit(l + 1), this.__setDigit(l, 1073741823 & t << 30 - e | _), _ = t >>> e;\n          this.__setDigit(n, _);\n        }\n      }\n    }, {\n      key: \"__digit\",\n      value: function (e) {\n        return this[e];\n      }\n    }, {\n      key: \"__unsignedDigit\",\n      value: function (e) {\n        return this[e] >>> 0;\n      }\n    }, {\n      key: \"__setDigit\",\n      value: function (e, t) {\n        this[e] = 0 | t;\n      }\n    }, {\n      key: \"__setDigitGrow\",\n      value: function (e, t) {\n        this[e] = 0 | t;\n      }\n    }, {\n      key: \"__halfDigitLength\",\n      value: function () {\n        var e = this.length;\n        return 32767 >= this.__unsignedDigit(e - 1) ? 2 * e - 1 : 2 * e;\n      }\n    }, {\n      key: \"__halfDigit\",\n      value: function (e) {\n        return 32767 & this[e >>> 1] >>> 15 * (1 & e);\n      }\n    }, {\n      key: \"__setHalfDigit\",\n      value: function (e, t) {\n        var i = e >>> 1,\n          _ = this.__digit(i),\n          n = 1 & e ? 32767 & _ | t << 15 : 1073709056 & _ | 32767 & t;\n        this.__setDigit(i, n);\n      }\n    }], [{\n      key: \"BigInt\",\n      value: function (e) {\n        var t = Number.isFinite;\n        if (\"number\" == typeof e) {\n          if (0 === e) return a.__zero();\n          if (a.__isOneDigitInt(e)) return 0 > e ? a.__oneDigit(-e, !0) : a.__oneDigit(e, !1);\n          if (!t(e) || o(e) !== e) throw new RangeError(\"The number \" + e + \" cannot be converted to BigInt because it is not an integer\");\n          return a.__fromDouble(e);\n        }\n        if (\"string\" == typeof e) {\n          var _ = a.__fromString(e);\n          if (null === _) throw new SyntaxError(\"Cannot convert \" + e + \" to a BigInt\");\n          return _;\n        }\n        if (\"boolean\" == typeof e) return !0 === e ? a.__oneDigit(1, !1) : a.__zero();\n        if (\"object\" === i(e)) {\n          if (e.constructor === a) return e;\n          var n = a.__toPrimitive(e);\n          return a.BigInt(n);\n        }\n        throw new TypeError(\"Cannot convert \" + e + \" to a BigInt\");\n      }\n    }, {\n      key: \"toNumber\",\n      value: function (e) {\n        var t = e.length;\n        if (0 === t) return 0;\n        if (1 === t) {\n          var i = e.__unsignedDigit(0);\n          return e.sign ? -i : i;\n        }\n        var _ = e.__digit(t - 1),\n          n = a.__clz30(_),\n          l = 30 * t - n;\n        if (1024 < l) return e.sign ? -Infinity : 1 / 0;\n        var g = l - 1,\n          o = _,\n          u = t - 1,\n          s = n + 3,\n          r = 32 === s ? 0 : o << s;\n        r >>>= 12;\n        var d = s - 12,\n          h = 12 <= s ? 0 : o << 20 + s,\n          b = 20 + s;\n        for (0 < d && 0 < u && (u--, o = e.__digit(u), r |= o >>> 30 - d, h = o << d + 2, b = d + 2); 0 < b && 0 < u;) u--, o = e.__digit(u), h |= 30 <= b ? o << b - 30 : o >>> 30 - b, b -= 30;\n        var m = a.__decideRounding(e, b, u, o);\n        if ((1 === m || 0 === m && 1 == (1 & h)) && (h = h + 1 >>> 0, 0 === h && (r++, 0 != r >>> 20 && (r = 0, g++, 1023 < g)))) return e.sign ? -Infinity : 1 / 0;\n        var c = e.sign ? -2147483648 : 0;\n        return g = g + 1023 << 20, a.__kBitConversionInts[1] = c | g | r, a.__kBitConversionInts[0] = h, a.__kBitConversionDouble[0];\n      }\n    }, {\n      key: \"unaryMinus\",\n      value: function (e) {\n        if (0 === e.length) return e;\n        var t = e.__copy();\n        return t.sign = !e.sign, t;\n      }\n    }, {\n      key: \"bitwiseNot\",\n      value: function (e) {\n        return e.sign ? a.__absoluteSubOne(e).__trim() : a.__absoluteAddOne(e, !0);\n      }\n    }, {\n      key: \"exponentiate\",\n      value: function (e, t) {\n        if (t.sign) throw new RangeError(\"Exponent must be positive\");\n        if (0 === t.length) return a.__oneDigit(1, !1);\n        if (0 === e.length) return e;\n        if (1 === e.length && 1 === e.__digit(0)) return e.sign && 0 == (1 & t.__digit(0)) ? a.unaryMinus(e) : e;\n        if (1 < t.length) throw new RangeError(\"BigInt too big\");\n        var i = t.__unsignedDigit(0);\n        if (1 === i) return e;\n        if (i >= a.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n        if (1 === e.length && 2 === e.__digit(0)) {\n          var _ = 1 + (0 | i / 30),\n            n = e.sign && 0 != (1 & i),\n            l = new a(_, n);\n          l.__initializeDigits();\n          var g = 1 << i % 30;\n          return l.__setDigit(_ - 1, g), l;\n        }\n        var o = null,\n          u = e;\n        for (0 != (1 & i) && (o = e), i >>= 1; 0 !== i; i >>= 1) u = a.multiply(u, u), 0 != (1 & i) && (null === o ? o = u : o = a.multiply(o, u));\n        return o;\n      }\n    }, {\n      key: \"multiply\",\n      value: function (e, t) {\n        if (0 === e.length) return e;\n        if (0 === t.length) return t;\n        var _ = e.length + t.length;\n        30 <= e.__clzmsd() + t.__clzmsd() && _--;\n        var n = new a(_, e.sign !== t.sign);\n        n.__initializeDigits();\n        for (var l = 0; l < e.length; l++) a.__multiplyAccumulate(t, e.__digit(l), n, l);\n        return n.__trim();\n      }\n    }, {\n      key: \"divide\",\n      value: function (e, t) {\n        if (0 === t.length) throw new RangeError(\"Division by zero\");\n        if (0 > a.__absoluteCompare(e, t)) return a.__zero();\n        var i,\n          _ = e.sign !== t.sign,\n          n = t.__unsignedDigit(0);\n        if (1 === t.length && 32767 >= n) {\n          if (1 === n) return _ === e.sign ? e : a.unaryMinus(e);\n          i = a.__absoluteDivSmall(e, n, null);\n        } else i = a.__absoluteDivLarge(e, t, !0, !1);\n        return i.sign = _, i.__trim();\n      }\n    }, {\n      key: \"remainder\",\n      value: function i(e, t) {\n        if (0 === t.length) throw new RangeError(\"Division by zero\");\n        if (0 > a.__absoluteCompare(e, t)) return e;\n        var _ = t.__unsignedDigit(0);\n        if (1 === t.length && 32767 >= _) {\n          if (1 === _) return a.__zero();\n          var n = a.__absoluteModSmall(e, _);\n          return 0 === n ? a.__zero() : a.__oneDigit(n, e.sign);\n        }\n        var i = a.__absoluteDivLarge(e, t, !1, !0);\n        return i.sign = e.sign, i.__trim();\n      }\n    }, {\n      key: \"add\",\n      value: function (e, t) {\n        var i = e.sign;\n        return i === t.sign ? a.__absoluteAdd(e, t, i) : 0 <= a.__absoluteCompare(e, t) ? a.__absoluteSub(e, t, i) : a.__absoluteSub(t, e, !i);\n      }\n    }, {\n      key: \"subtract\",\n      value: function (e, t) {\n        var i = e.sign;\n        return i === t.sign ? 0 <= a.__absoluteCompare(e, t) ? a.__absoluteSub(e, t, i) : a.__absoluteSub(t, e, !i) : a.__absoluteAdd(e, t, i);\n      }\n    }, {\n      key: \"leftShift\",\n      value: function (e, t) {\n        return 0 === t.length || 0 === e.length ? e : t.sign ? a.__rightShiftByAbsolute(e, t) : a.__leftShiftByAbsolute(e, t);\n      }\n    }, {\n      key: \"signedRightShift\",\n      value: function (e, t) {\n        return 0 === t.length || 0 === e.length ? e : t.sign ? a.__leftShiftByAbsolute(e, t) : a.__rightShiftByAbsolute(e, t);\n      }\n    }, {\n      key: \"unsignedRightShift\",\n      value: function () {\n        throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\");\n      }\n    }, {\n      key: \"lessThan\",\n      value: function (e, t) {\n        return 0 > a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"lessThanOrEqual\",\n      value: function (e, t) {\n        return 0 >= a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"greaterThan\",\n      value: function (e, t) {\n        return 0 < a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"greaterThanOrEqual\",\n      value: function (e, t) {\n        return 0 <= a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"equal\",\n      value: function (e, t) {\n        if (e.sign !== t.sign) return !1;\n        if (e.length !== t.length) return !1;\n        for (var _ = 0; _ < e.length; _++) if (e.__digit(_) !== t.__digit(_)) return !1;\n        return !0;\n      }\n    }, {\n      key: \"notEqual\",\n      value: function (e, t) {\n        return !a.equal(e, t);\n      }\n    }, {\n      key: \"bitwiseAnd\",\n      value: function (e, t) {\n        if (!e.sign && !t.sign) return a.__absoluteAnd(e, t).__trim();\n        if (e.sign && t.sign) {\n          var i = n(e.length, t.length) + 1,\n            _ = a.__absoluteSubOne(e, i),\n            l = a.__absoluteSubOne(t);\n          return _ = a.__absoluteOr(_, l, _), a.__absoluteAddOne(_, !0, _).__trim();\n        }\n        if (e.sign) {\n          var g = [t, e];\n          e = g[0], t = g[1];\n        }\n        return a.__absoluteAndNot(e, a.__absoluteSubOne(t)).__trim();\n      }\n    }, {\n      key: \"bitwiseXor\",\n      value: function (e, t) {\n        if (!e.sign && !t.sign) return a.__absoluteXor(e, t).__trim();\n        if (e.sign && t.sign) {\n          var i = n(e.length, t.length),\n            _ = a.__absoluteSubOne(e, i),\n            l = a.__absoluteSubOne(t);\n          return a.__absoluteXor(_, l, _).__trim();\n        }\n        var g = n(e.length, t.length) + 1;\n        if (e.sign) {\n          var o = [t, e];\n          e = o[0], t = o[1];\n        }\n        var u = a.__absoluteSubOne(t, g);\n        return u = a.__absoluteXor(u, e, u), a.__absoluteAddOne(u, !0, u).__trim();\n      }\n    }, {\n      key: \"bitwiseOr\",\n      value: function (e, t) {\n        var i = n(e.length, t.length);\n        if (!e.sign && !t.sign) return a.__absoluteOr(e, t).__trim();\n        if (e.sign && t.sign) {\n          var _ = a.__absoluteSubOne(e, i),\n            l = a.__absoluteSubOne(t);\n          return _ = a.__absoluteAnd(_, l, _), a.__absoluteAddOne(_, !0, _).__trim();\n        }\n        if (e.sign) {\n          var g = [t, e];\n          e = g[0], t = g[1];\n        }\n        var o = a.__absoluteSubOne(t, i);\n        return o = a.__absoluteAndNot(o, e, o), a.__absoluteAddOne(o, !0, o).__trim();\n      }\n    }, {\n      key: \"asIntN\",\n      value: function (e, t) {\n        if (0 === t.length) return t;\n        if (e = o(e), 0 > e) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === e) return a.__zero();\n        if (e >= a.__kMaxLengthBits) return t;\n        var _ = 0 | (e + 29) / 30;\n        if (t.length < _) return t;\n        var l = t.__unsignedDigit(_ - 1),\n          g = 1 << (e - 1) % 30;\n        if (t.length === _ && l < g) return t;\n        if (!((l & g) === g)) return a.__truncateToNBits(e, t);\n        if (!t.sign) return a.__truncateAndSubFromPowerOfTwo(e, t, !0);\n        if (0 == (l & g - 1)) {\n          for (var u = _ - 2; 0 <= u; u--) if (0 !== t.__digit(u)) return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n          return t.length === _ && l === g ? t : a.__truncateToNBits(e, t);\n        }\n        return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n      }\n    }, {\n      key: \"asUintN\",\n      value: function (e, t) {\n        if (0 === t.length) return t;\n        if (e = o(e), 0 > e) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === e) return a.__zero();\n        if (t.sign) {\n          if (e > a.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n          return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n        }\n        if (e >= a.__kMaxLengthBits) return t;\n        var i = 0 | (e + 29) / 30;\n        if (t.length < i) return t;\n        var _ = e % 30;\n        if (t.length == i) {\n          if (0 === _) return t;\n          var l = t.__digit(i - 1);\n          if (0 == l >>> _) return t;\n        }\n        return a.__truncateToNBits(e, t);\n      }\n    }, {\n      key: \"ADD\",\n      value: function (e, t) {\n        if (e = a.__toPrimitive(e), t = a.__toPrimitive(t), \"string\" == typeof e) return \"string\" != typeof t && (t = t.toString()), e + t;\n        if (\"string\" == typeof t) return e.toString() + t;\n        if (e = a.__toNumeric(e), t = a.__toNumeric(t), a.__isBigInt(e) && a.__isBigInt(t)) return a.add(e, t);\n        if (\"number\" == typeof e && \"number\" == typeof t) return e + t;\n        throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\");\n      }\n    }, {\n      key: \"LT\",\n      value: function (e, t) {\n        return a.__compare(e, t, 0);\n      }\n    }, {\n      key: \"LE\",\n      value: function (e, t) {\n        return a.__compare(e, t, 1);\n      }\n    }, {\n      key: \"GT\",\n      value: function (e, t) {\n        return a.__compare(e, t, 2);\n      }\n    }, {\n      key: \"GE\",\n      value: function (e, t) {\n        return a.__compare(e, t, 3);\n      }\n    }, {\n      key: \"EQ\",\n      value: function (e, t) {\n        for (;;) {\n          if (a.__isBigInt(e)) return a.__isBigInt(t) ? a.equal(e, t) : a.EQ(t, e);\n          if (\"number\" == typeof e) {\n            if (a.__isBigInt(t)) return a.__equalToNumber(t, e);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"string\" == typeof e) {\n            if (a.__isBigInt(t)) return e = a.__fromString(e), null !== e && a.equal(e, t);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"boolean\" == typeof e) {\n            if (a.__isBigInt(t)) return a.__equalToNumber(t, +e);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"symbol\" === i(e)) {\n            if (a.__isBigInt(t)) return !1;\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"object\" === i(e)) {\n            if (\"object\" === i(t) && t.constructor !== a) return e == t;\n            e = a.__toPrimitive(e);\n          } else return e == t;\n        }\n      }\n    }, {\n      key: \"NE\",\n      value: function (e, t) {\n        return !a.EQ(e, t);\n      }\n    }, {\n      key: \"DataViewGetBigInt64\",\n      value: function (e, t) {\n        var i = !!(2 < arguments.length && void 0 !== arguments[2]) && arguments[2];\n        return a.asIntN(64, a.DataViewGetBigUint64(e, t, i));\n      }\n    }, {\n      key: \"DataViewGetBigUint64\",\n      value: function (e, t) {\n        var i = !!(2 < arguments.length && void 0 !== arguments[2]) && arguments[2],\n          _ = i ? [4, 0] : [0, 4],\n          n = v(_, 2),\n          g = n[0],\n          o = n[1],\n          l = e.getUint32(t + g, i),\n          u = e.getUint32(t + o, i),\n          s = new a(3, !1);\n        return s.__setDigit(0, 1073741823 & u), s.__setDigit(1, (268435455 & l) << 2 | u >>> 30), s.__setDigit(2, l >>> 28), s.__trim();\n      }\n    }, {\n      key: \"DataViewSetBigInt64\",\n      value: function (e, t, i) {\n        var _ = !!(3 < arguments.length && void 0 !== arguments[3]) && arguments[3];\n        a.DataViewSetBigUint64(e, t, i, _);\n      }\n    }, {\n      key: \"DataViewSetBigUint64\",\n      value: function (e, t, i) {\n        var _ = !!(3 < arguments.length && void 0 !== arguments[3]) && arguments[3];\n        i = a.asUintN(64, i);\n        var n = 0,\n          g = 0;\n        if (0 < i.length && (g = i.__digit(0), 1 < i.length)) {\n          var o = i.__digit(1);\n          g |= o << 30, n = o >>> 2, 2 < i.length && (n |= i.__digit(2) << 28);\n        }\n        var u = _ ? [4, 0] : [0, 4],\n          s = v(u, 2),\n          r = s[0],\n          d = s[1];\n        e.setUint32(t + r, n, _), e.setUint32(t + d, g, _);\n      }\n    }, {\n      key: \"__zero\",\n      value: function () {\n        return new a(0, !1);\n      }\n    }, {\n      key: \"__oneDigit\",\n      value: function (e, t) {\n        var i = new a(1, t);\n        return i.__setDigit(0, e), i;\n      }\n    }, {\n      key: \"__decideRounding\",\n      value: function (e, t, i, _) {\n        if (0 < t) return -1;\n        var n;\n        if (0 > t) n = -t - 1;else {\n          if (0 === i) return -1;\n          i--, _ = e.__digit(i), n = 29;\n        }\n        var l = 1 << n;\n        if (0 == (_ & l)) return -1;\n        if (l -= 1, 0 != (_ & l)) return 1;\n        for (; 0 < i;) if (i--, 0 !== e.__digit(i)) return 1;\n        return 0;\n      }\n    }, {\n      key: \"__fromDouble\",\n      value: function (e) {\n        a.__kBitConversionDouble[0] = e;\n        var t,\n          i = 2047 & a.__kBitConversionInts[1] >>> 20,\n          _ = i - 1023,\n          n = (0 | _ / 30) + 1,\n          l = new a(n, 0 > e),\n          g = 1048575 & a.__kBitConversionInts[1] | 1048576,\n          o = a.__kBitConversionInts[0],\n          u = 20,\n          s = _ % 30,\n          r = 0;\n        if (s < u) {\n          var d = u - s;\n          r = d + 32, t = g >>> d, g = g << 32 - d | o >>> d, o <<= 32 - d;\n        } else if (s === u) r = 32, t = g, g = o, o = 0;else {\n          var h = s - u;\n          r = 32 - h, t = g << h | o >>> 32 - h, g = o << h, o = 0;\n        }\n        l.__setDigit(n - 1, t);\n        for (var b = n - 2; 0 <= b; b--) 0 < r ? (r -= 30, t = g >>> 2, g = g << 30 | o >>> 2, o <<= 30) : t = 0, l.__setDigit(b, t);\n        return l.__trim();\n      }\n    }, {\n      key: \"__isWhitespace\",\n      value: function (e) {\n        return !!(13 >= e && 9 <= e) || (159 >= e ? 32 == e : 131071 >= e ? 160 == e || 5760 == e : 196607 >= e ? (e &= 131071, 10 >= e || 40 == e || 41 == e || 47 == e || 95 == e || 4096 == e) : 65279 == e);\n      }\n    }, {\n      key: \"__fromString\",\n      value: function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,\n          i = 0,\n          _ = e.length,\n          n = 0;\n        if (n === _) return a.__zero();\n        for (var l = e.charCodeAt(n); a.__isWhitespace(l);) {\n          if (++n === _) return a.__zero();\n          l = e.charCodeAt(n);\n        }\n        if (43 === l) {\n          if (++n === _) return null;\n          l = e.charCodeAt(n), i = 1;\n        } else if (45 === l) {\n          if (++n === _) return null;\n          l = e.charCodeAt(n), i = -1;\n        }\n        if (0 === t) {\n          if (t = 10, 48 === l) {\n            if (++n === _) return a.__zero();\n            if (l = e.charCodeAt(n), 88 === l || 120 === l) {\n              if (t = 16, ++n === _) return null;\n              l = e.charCodeAt(n);\n            } else if (79 === l || 111 === l) {\n              if (t = 8, ++n === _) return null;\n              l = e.charCodeAt(n);\n            } else if (66 === l || 98 === l) {\n              if (t = 2, ++n === _) return null;\n              l = e.charCodeAt(n);\n            }\n          }\n        } else if (16 === t && 48 === l) {\n          if (++n === _) return a.__zero();\n          if (l = e.charCodeAt(n), 88 === l || 120 === l) {\n            if (++n === _) return null;\n            l = e.charCodeAt(n);\n          }\n        }\n        if (0 !== i && 10 !== t) return null;\n        for (; 48 === l;) {\n          if (++n === _) return a.__zero();\n          l = e.charCodeAt(n);\n        }\n        var g = _ - n,\n          o = a.__kMaxBitsPerChar[t],\n          u = a.__kBitsPerCharTableMultiplier - 1;\n        if (g > 1073741824 / o) return null;\n        var s = o * g + u >>> a.__kBitsPerCharTableShift,\n          r = new a(0 | (s + 29) / 30, !1),\n          h = 10 > t ? t : 10,\n          b = 10 < t ? t - 10 : 0;\n        if (0 == (t & t - 1)) {\n          o >>= a.__kBitsPerCharTableShift;\n          var c = [],\n            v = [],\n            y = !1;\n          do {\n            for (var f, D = 0, p = 0;;) {\n              if (f = void 0, l - 48 >>> 0 < h) f = l - 48;else if ((32 | l) - 97 >>> 0 < b) f = (32 | l) - 87;else {\n                y = !0;\n                break;\n              }\n              if (p += o, D = D << o | f, ++n === _) {\n                y = !0;\n                break;\n              }\n              if (l = e.charCodeAt(n), 30 < p + o) break;\n            }\n            c.push(D), v.push(p);\n          } while (!y);\n          a.__fillFromParts(r, c, v);\n        } else {\n          r.__initializeDigits();\n          var k = !1,\n            B = 0;\n          do {\n            for (var S, C = 0, I = 1;;) {\n              if (S = void 0, l - 48 >>> 0 < h) S = l - 48;else if ((32 | l) - 97 >>> 0 < b) S = (32 | l) - 87;else {\n                k = !0;\n                break;\n              }\n              var A = I * t;\n              if (1073741823 < A) break;\n              if (I = A, C = C * t + S, B++, ++n === _) {\n                k = !0;\n                break;\n              }\n              l = e.charCodeAt(n);\n            }\n            u = 30 * a.__kBitsPerCharTableMultiplier - 1;\n            var m = 0 | (o * B + u >>> a.__kBitsPerCharTableShift) / 30;\n            r.__inplaceMultiplyAdd(I, C, m);\n          } while (!k);\n        }\n        if (n !== _) {\n          if (!a.__isWhitespace(l)) return null;\n          for (n++; n < _; n++) if (l = e.charCodeAt(n), !a.__isWhitespace(l)) return null;\n        }\n        return r.sign = -1 === i, r.__trim();\n      }\n    }, {\n      key: \"__fillFromParts\",\n      value: function (e, t, _) {\n        for (var n = 0, l = 0, g = 0, o = t.length - 1; 0 <= o; o--) {\n          var a = t[o],\n            u = _[o];\n          l |= a << g, g += u, 30 === g ? (e.__setDigit(n++, l), g = 0, l = 0) : 30 < g && (e.__setDigit(n++, 1073741823 & l), g -= 30, l = a >>> u - g);\n        }\n        if (0 !== l) {\n          if (n >= e.length) throw new Error(\"implementation bug\");\n          e.__setDigit(n++, l);\n        }\n        for (; n < e.length; n++) e.__setDigit(n, 0);\n      }\n    }, {\n      key: \"__toStringBasePowerOfTwo\",\n      value: function (e, t) {\n        var _ = e.length,\n          n = t - 1;\n        n = (85 & n >>> 1) + (85 & n), n = (51 & n >>> 2) + (51 & n), n = (15 & n >>> 4) + (15 & n);\n        var l = n,\n          g = t - 1,\n          o = e.__digit(_ - 1),\n          u = a.__clz30(o),\n          s = 0 | (30 * _ - u + l - 1) / l;\n        if (e.sign && s++, 268435456 < s) throw new Error(\"string too long\");\n        for (var r = Array(s), d = s - 1, h = 0, b = 0, m = 0; m < _ - 1; m++) {\n          var c = e.__digit(m),\n            v = (h | c << b) & g;\n          r[d--] = a.__kConversionChars[v];\n          var y = l - b;\n          for (h = c >>> y, b = 30 - y; b >= l;) r[d--] = a.__kConversionChars[h & g], h >>>= l, b -= l;\n        }\n        var f = (h | o << b) & g;\n        for (r[d--] = a.__kConversionChars[f], h = o >>> l - b; 0 !== h;) r[d--] = a.__kConversionChars[h & g], h >>>= l;\n        if (e.sign && (r[d--] = \"-\"), -1 !== d) throw new Error(\"implementation bug\");\n        return r.join(\"\");\n      }\n    }, {\n      key: \"__toStringGeneric\",\n      value: function (e, t, _) {\n        var n = e.length;\n        if (0 === n) return \"\";\n        if (1 === n) {\n          var l = e.__unsignedDigit(0).toString(t);\n          return !1 === _ && e.sign && (l = \"-\" + l), l;\n        }\n        var g = 30 * n - a.__clz30(e.__digit(n - 1)),\n          o = a.__kMaxBitsPerChar[t],\n          u = o - 1,\n          s = g * a.__kBitsPerCharTableMultiplier;\n        s += u - 1, s = 0 | s / u;\n        var r,\n          d,\n          h = s + 1 >> 1,\n          b = a.exponentiate(a.__oneDigit(t, !1), a.__oneDigit(h, !1)),\n          m = b.__unsignedDigit(0);\n        if (1 === b.length && 32767 >= m) {\n          r = new a(e.length, !1), r.__initializeDigits();\n          for (var c, v = 0, y = 2 * e.length - 1; 0 <= y; y--) c = v << 15 | e.__halfDigit(y), r.__setHalfDigit(y, 0 | c / m), v = 0 | c % m;\n          d = v.toString(t);\n        } else {\n          var f = a.__absoluteDivLarge(e, b, !0, !0);\n          r = f.quotient;\n          var D = f.remainder.__trim();\n          d = a.__toStringGeneric(D, t, !0);\n        }\n        r.__trim();\n        for (var p = a.__toStringGeneric(r, t, !0); d.length < h;) d = \"0\" + d;\n        return !1 === _ && e.sign && (p = \"-\" + p), p + d;\n      }\n    }, {\n      key: \"__unequalSign\",\n      value: function (e) {\n        return e ? -1 : 1;\n      }\n    }, {\n      key: \"__absoluteGreater\",\n      value: function (e) {\n        return e ? -1 : 1;\n      }\n    }, {\n      key: \"__absoluteLess\",\n      value: function (e) {\n        return e ? 1 : -1;\n      }\n    }, {\n      key: \"__compareToBigInt\",\n      value: function (e, t) {\n        var i = e.sign;\n        if (i !== t.sign) return a.__unequalSign(i);\n        var _ = a.__absoluteCompare(e, t);\n        return 0 < _ ? a.__absoluteGreater(i) : 0 > _ ? a.__absoluteLess(i) : 0;\n      }\n    }, {\n      key: \"__compareToNumber\",\n      value: function (e, i) {\n        if (a.__isOneDigitInt(i)) {\n          var _ = e.sign,\n            n = 0 > i;\n          if (_ !== n) return a.__unequalSign(_);\n          if (0 === e.length) {\n            if (n) throw new Error(\"implementation bug\");\n            return 0 === i ? 0 : -1;\n          }\n          if (1 < e.length) return a.__absoluteGreater(_);\n          var l = t(i),\n            g = e.__unsignedDigit(0);\n          return g > l ? a.__absoluteGreater(_) : g < l ? a.__absoluteLess(_) : 0;\n        }\n        return a.__compareToDouble(e, i);\n      }\n    }, {\n      key: \"__compareToDouble\",\n      value: function (e, t) {\n        if (t !== t) return t;\n        if (t === 1 / 0) return -1;\n        if (t === -Infinity) return 1;\n        var i = e.sign;\n        if (i !== 0 > t) return a.__unequalSign(i);\n        if (0 === t) throw new Error(\"implementation bug: should be handled elsewhere\");\n        if (0 === e.length) return -1;\n        a.__kBitConversionDouble[0] = t;\n        var _ = 2047 & a.__kBitConversionInts[1] >>> 20;\n        if (2047 == _) throw new Error(\"implementation bug: handled elsewhere\");\n        var n = _ - 1023;\n        if (0 > n) return a.__absoluteGreater(i);\n        var l = e.length,\n          g = e.__digit(l - 1),\n          o = a.__clz30(g),\n          u = 30 * l - o,\n          s = n + 1;\n        if (u < s) return a.__absoluteLess(i);\n        if (u > s) return a.__absoluteGreater(i);\n        var r = 1048576 | 1048575 & a.__kBitConversionInts[1],\n          d = a.__kBitConversionInts[0],\n          h = 20,\n          b = 29 - o;\n        if (b !== (0 | (u - 1) % 30)) throw new Error(\"implementation bug\");\n        var m,\n          c = 0;\n        if (b < h) {\n          var v = h - b;\n          c = v + 32, m = r >>> v, r = r << 32 - v | d >>> v, d <<= 32 - v;\n        } else if (b === h) c = 32, m = r, r = d, d = 0;else {\n          var y = b - h;\n          c = 32 - y, m = r << y | d >>> 32 - y, r = d << y, d = 0;\n        }\n        if (g >>>= 0, m >>>= 0, g > m) return a.__absoluteGreater(i);\n        if (g < m) return a.__absoluteLess(i);\n        for (var f = l - 2; 0 <= f; f--) {\n          0 < c ? (c -= 30, m = r >>> 2, r = r << 30 | d >>> 2, d <<= 30) : m = 0;\n          var D = e.__unsignedDigit(f);\n          if (D > m) return a.__absoluteGreater(i);\n          if (D < m) return a.__absoluteLess(i);\n        }\n        if (0 !== r || 0 !== d) {\n          if (0 === c) throw new Error(\"implementation bug\");\n          return a.__absoluteLess(i);\n        }\n        return 0;\n      }\n    }, {\n      key: \"__equalToNumber\",\n      value: function (e, i) {\n        return a.__isOneDigitInt(i) ? 0 === i ? 0 === e.length : 1 === e.length && e.sign === 0 > i && e.__unsignedDigit(0) === t(i) : 0 === a.__compareToDouble(e, i);\n      }\n    }, {\n      key: \"__comparisonResultToBool\",\n      value: function (e, t) {\n        return 0 === t ? 0 > e : 1 === t ? 0 >= e : 2 === t ? 0 < e : 3 === t ? 0 <= e : void 0;\n      }\n    }, {\n      key: \"__compare\",\n      value: function (e, t, i) {\n        if (e = a.__toPrimitive(e), t = a.__toPrimitive(t), \"string\" == typeof e && \"string\" == typeof t) switch (i) {\n          case 0:\n            return e < t;\n          case 1:\n            return e <= t;\n          case 2:\n            return e > t;\n          case 3:\n            return e >= t;\n        }\n        if (a.__isBigInt(e) && \"string\" == typeof t) return t = a.__fromString(t), null !== t && a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n        if (\"string\" == typeof e && a.__isBigInt(t)) return e = a.__fromString(e), null !== e && a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n        if (e = a.__toNumeric(e), t = a.__toNumeric(t), a.__isBigInt(e)) {\n          if (a.__isBigInt(t)) return a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n          if (\"number\" != typeof t) throw new Error(\"implementation bug\");\n          return a.__comparisonResultToBool(a.__compareToNumber(e, t), i);\n        }\n        if (\"number\" != typeof e) throw new Error(\"implementation bug\");\n        if (a.__isBigInt(t)) return a.__comparisonResultToBool(a.__compareToNumber(t, e), 2 ^ i);\n        if (\"number\" != typeof t) throw new Error(\"implementation bug\");\n        return 0 === i ? e < t : 1 === i ? e <= t : 2 === i ? e > t : 3 === i ? e >= t : void 0;\n      }\n    }, {\n      key: \"__absoluteAdd\",\n      value: function (e, t, _) {\n        if (e.length < t.length) return a.__absoluteAdd(t, e, _);\n        if (0 === e.length) return e;\n        if (0 === t.length) return e.sign === _ ? e : a.unaryMinus(e);\n        var n = e.length;\n        (0 === e.__clzmsd() || t.length === e.length && 0 === t.__clzmsd()) && n++;\n        for (var l, g = new a(n, _), o = 0, u = 0; u < t.length; u++) l = e.__digit(u) + t.__digit(u) + o, o = l >>> 30, g.__setDigit(u, 1073741823 & l);\n        for (; u < e.length; u++) {\n          var s = e.__digit(u) + o;\n          o = s >>> 30, g.__setDigit(u, 1073741823 & s);\n        }\n        return u < g.length && g.__setDigit(u, o), g.__trim();\n      }\n    }, {\n      key: \"__absoluteSub\",\n      value: function (e, t, _) {\n        if (0 === e.length) return e;\n        if (0 === t.length) return e.sign === _ ? e : a.unaryMinus(e);\n        for (var n, l = new a(e.length, _), g = 0, o = 0; o < t.length; o++) n = e.__digit(o) - t.__digit(o) - g, g = 1 & n >>> 30, l.__setDigit(o, 1073741823 & n);\n        for (; o < e.length; o++) {\n          var u = e.__digit(o) - g;\n          g = 1 & u >>> 30, l.__setDigit(o, 1073741823 & u);\n        }\n        return l.__trim();\n      }\n    }, {\n      key: \"__absoluteAddOne\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = e.length;\n        null === _ ? _ = new a(n, t) : _.sign = t;\n        for (var l, g = 1, o = 0; o < n; o++) l = e.__digit(o) + g, g = l >>> 30, _.__setDigit(o, 1073741823 & l);\n        return 0 !== g && _.__setDigitGrow(n, 1), _;\n      }\n    }, {\n      key: \"__absoluteSubOne\",\n      value: function (e, t) {\n        var _ = e.length;\n        t = t || _;\n        for (var n, l = new a(t, !1), g = 1, o = 0; o < _; o++) n = e.__digit(o) - g, g = 1 & n >>> 30, l.__setDigit(o, 1073741823 & n);\n        if (0 !== g) throw new Error(\"implementation bug\");\n        for (var u = _; u < t; u++) l.__setDigit(u, 0);\n        return l;\n      }\n    }, {\n      key: \"__absoluteAnd\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = e.length,\n          l = t.length,\n          g = l;\n        if (n < l) {\n          g = n;\n          var o = e,\n            u = n;\n          e = t, n = l, t = o, l = u;\n        }\n        var s = g;\n        null === _ ? _ = new a(s, !1) : s = _.length;\n        for (var r = 0; r < g; r++) _.__setDigit(r, e.__digit(r) & t.__digit(r));\n        for (; r < s; r++) _.__setDigit(r, 0);\n        return _;\n      }\n    }, {\n      key: \"__absoluteAndNot\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = e.length,\n          l = t.length,\n          g = l;\n        n < l && (g = n);\n        var o = n;\n        null === _ ? _ = new a(o, !1) : o = _.length;\n        for (var u = 0; u < g; u++) _.__setDigit(u, e.__digit(u) & ~t.__digit(u));\n        for (; u < n; u++) _.__setDigit(u, e.__digit(u));\n        for (; u < o; u++) _.__setDigit(u, 0);\n        return _;\n      }\n    }, {\n      key: \"__absoluteOr\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = e.length,\n          l = t.length,\n          g = l;\n        if (n < l) {\n          g = n;\n          var o = e,\n            u = n;\n          e = t, n = l, t = o, l = u;\n        }\n        var s = n;\n        null === _ ? _ = new a(s, !1) : s = _.length;\n        for (var r = 0; r < g; r++) _.__setDigit(r, e.__digit(r) | t.__digit(r));\n        for (; r < n; r++) _.__setDigit(r, e.__digit(r));\n        for (; r < s; r++) _.__setDigit(r, 0);\n        return _;\n      }\n    }, {\n      key: \"__absoluteXor\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = e.length,\n          l = t.length,\n          g = l;\n        if (n < l) {\n          g = n;\n          var o = e,\n            u = n;\n          e = t, n = l, t = o, l = u;\n        }\n        var s = n;\n        null === _ ? _ = new a(s, !1) : s = _.length;\n        for (var r = 0; r < g; r++) _.__setDigit(r, e.__digit(r) ^ t.__digit(r));\n        for (; r < n; r++) _.__setDigit(r, e.__digit(r));\n        for (; r < s; r++) _.__setDigit(r, 0);\n        return _;\n      }\n    }, {\n      key: \"__absoluteCompare\",\n      value: function (e, t) {\n        var _ = e.length - t.length;\n        if (0 != _) return _;\n        for (var n = e.length - 1; 0 <= n && e.__digit(n) === t.__digit(n);) n--;\n        return 0 > n ? 0 : e.__unsignedDigit(n) > t.__unsignedDigit(n) ? 1 : -1;\n      }\n    }, {\n      key: \"__multiplyAccumulate\",\n      value: function (e, t, _, n) {\n        if (0 !== t) {\n          for (var l = 32767 & t, g = t >>> 15, o = 0, u = 0, s = 0; s < e.length; s++, n++) {\n            var r = _.__digit(n),\n              d = e.__digit(s),\n              h = 32767 & d,\n              b = d >>> 15,\n              m = a.__imul(h, l),\n              c = a.__imul(h, g),\n              v = a.__imul(b, l),\n              y = a.__imul(b, g);\n            r += u + m + o, o = r >>> 30, r &= 1073741823, r += ((32767 & c) << 15) + ((32767 & v) << 15), o += r >>> 30, u = y + (c >>> 15) + (v >>> 15), _.__setDigit(n, 1073741823 & r);\n          }\n          for (; 0 !== o || 0 !== u; n++) {\n            var f = _.__digit(n);\n            f += o + u, u = 0, o = f >>> 30, _.__setDigit(n, 1073741823 & f);\n          }\n        }\n      }\n    }, {\n      key: \"__internalMultiplyAdd\",\n      value: function (e, t, _, l, g) {\n        for (var o = _, u = 0, s = 0; s < l; s++) {\n          var d = e.__digit(s),\n            h = a.__imul(32767 & d, t),\n            b = a.__imul(d >>> 15, t),\n            m = h + ((32767 & b) << 15) + u + o;\n          o = m >>> 30, u = b >>> 15, g.__setDigit(s, 1073741823 & m);\n        }\n        if (g.length > l) for (g.__setDigit(l++, o + u); l < g.length;) g.__setDigit(l++, 0);else if (0 !== o + u) throw new Error(\"implementation bug\");\n      }\n    }, {\n      key: \"__absoluteDivSmall\",\n      value: function (e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n        null === _ && (_ = new a(e.length, !1));\n        for (var n = 0, l = 2 * e.length - 1; 0 <= l; l -= 2) {\n          var g = (n << 15 | e.__halfDigit(l)) >>> 0,\n            o = 0 | g / t;\n          n = 0 | g % t, g = (n << 15 | e.__halfDigit(l - 1)) >>> 0;\n          var u = 0 | g / t;\n          n = 0 | g % t, _.__setDigit(l >>> 1, o << 15 | u);\n        }\n        return _;\n      }\n    }, {\n      key: \"__absoluteModSmall\",\n      value: function (e, t) {\n        for (var _, n = 0, l = 2 * e.length - 1; 0 <= l; l--) _ = (n << 15 | e.__halfDigit(l)) >>> 0, n = 0 | _ % t;\n        return n;\n      }\n    }, {\n      key: \"__absoluteDivLarge\",\n      value: function (e, t, i, _) {\n        var l = t.__halfDigitLength(),\n          n = t.length,\n          g = e.__halfDigitLength() - l,\n          o = null;\n        i && (o = new a(g + 2 >>> 1, !1), o.__initializeDigits());\n        var s = new a(l + 2 >>> 1, !1);\n        s.__initializeDigits();\n        var r = a.__clz15(t.__halfDigit(l - 1));\n        0 < r && (t = a.__specialLeftShift(t, r, 0));\n        for (var d = a.__specialLeftShift(e, r, 1), u = t.__halfDigit(l - 1), h = 0, b = g; 0 <= b; b--) {\n          var m = 32767,\n            v = d.__halfDigit(b + l);\n          if (v !== u) {\n            var y = (v << 15 | d.__halfDigit(b + l - 1)) >>> 0;\n            m = 0 | y / u;\n            for (var f = 0 | y % u, D = t.__halfDigit(l - 2), p = d.__halfDigit(b + l - 2); a.__imul(m, D) >>> 0 > (f << 16 | p) >>> 0 && (m--, f += u, !(32767 < f)););\n          }\n          a.__internalMultiplyAdd(t, m, 0, n, s);\n          var k = d.__inplaceSub(s, b, l + 1);\n          0 !== k && (k = d.__inplaceAdd(t, b, l), d.__setHalfDigit(b + l, 32767 & d.__halfDigit(b + l) + k), m--), i && (1 & b ? h = m << 15 : o.__setDigit(b >>> 1, h | m));\n        }\n        if (_) return d.__inplaceRightShift(r), i ? {\n          quotient: o,\n          remainder: d\n        } : d;\n        if (i) return o;\n        throw new Error(\"unreachable\");\n      }\n    }, {\n      key: \"__clz15\",\n      value: function (e) {\n        return a.__clz30(e) - 15;\n      }\n    }, {\n      key: \"__specialLeftShift\",\n      value: function (e, t, _) {\n        var l = e.length,\n          n = new a(l + _, !1);\n        if (0 === t) {\n          for (var g = 0; g < l; g++) n.__setDigit(g, e.__digit(g));\n          return 0 < _ && n.__setDigit(l, 0), n;\n        }\n        for (var o, u = 0, s = 0; s < l; s++) o = e.__digit(s), n.__setDigit(s, 1073741823 & o << t | u), u = o >>> 30 - t;\n        return 0 < _ && n.__setDigit(l, u), n;\n      }\n    }, {\n      key: \"__leftShiftByAbsolute\",\n      value: function (e, t) {\n        var _ = a.__toShiftAmount(t);\n        if (0 > _) throw new RangeError(\"BigInt too big\");\n        var n = 0 | _ / 30,\n          l = _ % 30,\n          g = e.length,\n          o = 0 !== l && 0 != e.__digit(g - 1) >>> 30 - l,\n          u = g + n + (o ? 1 : 0),\n          s = new a(u, e.sign);\n        if (0 === l) {\n          for (var r = 0; r < n; r++) s.__setDigit(r, 0);\n          for (; r < u; r++) s.__setDigit(r, e.__digit(r - n));\n        } else {\n          for (var h = 0, b = 0; b < n; b++) s.__setDigit(b, 0);\n          for (var m, c = 0; c < g; c++) m = e.__digit(c), s.__setDigit(c + n, 1073741823 & m << l | h), h = m >>> 30 - l;\n          if (o) s.__setDigit(g + n, h);else if (0 !== h) throw new Error(\"implementation bug\");\n        }\n        return s.__trim();\n      }\n    }, {\n      key: \"__rightShiftByAbsolute\",\n      value: function (e, t) {\n        var _ = e.length,\n          n = e.sign,\n          l = a.__toShiftAmount(t);\n        if (0 > l) return a.__rightShiftByMaximum(n);\n        var g = 0 | l / 30,\n          o = l % 30,\n          u = _ - g;\n        if (0 >= u) return a.__rightShiftByMaximum(n);\n        var s = !1;\n        if (n) {\n          if (0 != (e.__digit(g) & (1 << o) - 1)) s = !0;else for (var r = 0; r < g; r++) if (0 !== e.__digit(r)) {\n            s = !0;\n            break;\n          }\n        }\n        if (s && 0 === o) {\n          var h = e.__digit(_ - 1);\n          0 == ~h && u++;\n        }\n        var b = new a(u, n);\n        if (0 === o) {\n          b.__setDigit(u - 1, 0);\n          for (var m = g; m < _; m++) b.__setDigit(m - g, e.__digit(m));\n        } else {\n          for (var c, v = e.__digit(g) >>> o, y = _ - g - 1, f = 0; f < y; f++) c = e.__digit(f + g + 1), b.__setDigit(f, 1073741823 & c << 30 - o | v), v = c >>> o;\n          b.__setDigit(y, v);\n        }\n        return s && (b = a.__absoluteAddOne(b, !0, b)), b.__trim();\n      }\n    }, {\n      key: \"__rightShiftByMaximum\",\n      value: function (e) {\n        return e ? a.__oneDigit(1, !0) : a.__zero();\n      }\n    }, {\n      key: \"__toShiftAmount\",\n      value: function (e) {\n        if (1 < e.length) return -1;\n        var t = e.__unsignedDigit(0);\n        return t > a.__kMaxLengthBits ? -1 : t;\n      }\n    }, {\n      key: \"__toPrimitive\",\n      value: function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \"default\";\n        if (\"object\" !== i(e)) return e;\n        if (e.constructor === a) return e;\n        if (\"undefined\" != typeof Symbol && \"symbol\" === i(Symbol.toPrimitive)) {\n          var _ = e[Symbol.toPrimitive];\n          if (_) {\n            var n = _(t);\n            if (\"object\" !== i(n)) return n;\n            throw new TypeError(\"Cannot convert object to primitive value\");\n          }\n        }\n        var l = e.valueOf;\n        if (l) {\n          var g = l.call(e);\n          if (\"object\" !== i(g)) return g;\n        }\n        var o = e.toString;\n        if (o) {\n          var u = o.call(e);\n          if (\"object\" !== i(u)) return u;\n        }\n        throw new TypeError(\"Cannot convert object to primitive value\");\n      }\n    }, {\n      key: \"__toNumeric\",\n      value: function (e) {\n        return a.__isBigInt(e) ? e : +e;\n      }\n    }, {\n      key: \"__isBigInt\",\n      value: function (e) {\n        return \"object\" === i(e) && null !== e && e.constructor === a;\n      }\n    }, {\n      key: \"__truncateToNBits\",\n      value: function (e, t) {\n        for (var _ = 0 | (e + 29) / 30, n = new a(_, t.sign), l = _ - 1, g = 0; g < l; g++) n.__setDigit(g, t.__digit(g));\n        var o = t.__digit(l);\n        if (0 != e % 30) {\n          var u = 32 - e % 30;\n          o = o << u >>> u;\n        }\n        return n.__setDigit(l, o), n.__trim();\n      }\n    }, {\n      key: \"__truncateAndSubFromPowerOfTwo\",\n      value: function (e, t, _) {\n        for (var n = Math.min, l, g = 0 | (e + 29) / 30, o = new a(g, _), u = 0, s = g - 1, d = 0, h = n(s, t.length); u < h; u++) l = 0 - t.__digit(u) - d, d = 1 & l >>> 30, o.__setDigit(u, 1073741823 & l);\n        for (; u < s; u++) o.__setDigit(u, 0 | 1073741823 & -d);\n        var b,\n          m = s < t.length ? t.__digit(s) : 0,\n          c = e % 30;\n        if (0 === c) b = 0 - m - d, b &= 1073741823;else {\n          var v = 32 - c;\n          m = m << v >>> v;\n          var y = 1 << 32 - v;\n          b = y - m - d, b &= y - 1;\n        }\n        return o.__setDigit(s, b), o.__trim();\n      }\n    }, {\n      key: \"__digitPow\",\n      value: function (e, t) {\n        for (var i = 1; 0 < t;) 1 & t && (i *= e), t >>>= 1, e *= e;\n        return i;\n      }\n    }, {\n      key: \"__isOneDigitInt\",\n      value: function (e) {\n        return (1073741823 & e) === e;\n      }\n    }]), a;\n  }(h(Array));\n  return S.__kMaxLength = 33554432, S.__kMaxLengthBits = S.__kMaxLength << 5, S.__kMaxBitsPerChar = [0, 0, 32, 51, 64, 75, 83, 90, 96, 102, 107, 111, 115, 119, 122, 126, 128, 131, 134, 136, 139, 141, 143, 145, 147, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166], S.__kBitsPerCharTableShift = 5, S.__kBitsPerCharTableMultiplier = 1 << S.__kBitsPerCharTableShift, S.__kConversionChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], S.__kBitConversionBuffer = new ArrayBuffer(8), S.__kBitConversionDouble = new Float64Array(S.__kBitConversionBuffer), S.__kBitConversionInts = new Int32Array(S.__kBitConversionBuffer), S.__clz30 = t ? function (e) {\n    return t(e) - 2;\n  } : function (e) {\n    var t = Math.LN2,\n      i = Math.log;\n    return 0 === e ? 30 : 0 | 29 - (0 | i(e >>> 0) / t);\n  }, S.__imul = e || function (e, t) {\n    return 0 | e * t;\n  }, S;\n});","map":{"version":3,"sources":["../tsc-out/jsbi.mjs"],"names":["JSBI","Array","length","sign","setPrototypeOf","prototype","__kMaxLength","RangeError","arg","__zero","__isOneDigitInt","__oneDigit","Number","isFinite","Math","floor","__fromDouble","result","__fromString","SyntaxError","constructor","primitive","__toPrimitive","BigInt","TypeError","digit","push","toString","join","radix","__toStringBasePowerOfTwo","__toStringGeneric","Error","x","xLength","value","__unsignedDigit","xMsd","__digit","msdLeadingZeros","__clz30","xBitLength","Infinity","exponent","currentDigit","digitIndex","shift","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionDouble","__copy","__absoluteSubOne","__trim","__absoluteAddOne","y","unaryMinus","expValue","__kMaxLengthBits","neededDigits","__initializeDigits","msd","__setDigit","runningSquare","multiply","resultLength","__clzmsd","i","__multiplyAccumulate","__absoluteCompare","resultSign","divisor","quotient","__absoluteDivSmall","__absoluteDivLarge","remainderDigit","__absoluteModSmall","remainder","__absoluteAdd","__absoluteSub","__rightShiftByAbsolute","__leftShiftByAbsolute","__compareToBigInt","equal","__absoluteAnd","max","y1","__absoluteOr","__absoluteAndNot","__absoluteXor","n","neededLength","topDigit","compareDigit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","bitsInTopDigit","__toNumeric","__isBigInt","add","__compare","EQ","__equalToNumber","dataview","byteOffset","littleEndian","asIntN","DataViewGetBigUint64","h","l","high","getUint32","low","DataViewSetBigUint64","asUintN","d1","setUint32","newLength","last","pop","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","c","string","cursor","current","charCodeAt","__isWhitespace","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","done","part","bits","d","__fillFromParts","charsSoFar","multiplier","m","digitsSoFar","__inplaceMultiplyAdd","bitsInDigit","partBits","charMask","charsRequired","bitLength","pos","availableBits","newDigit","__kConversionChars","consumedBits","isRecursiveCall","maxBitsPerChar","minBitsPerChar","secondHalfChars","conqueror","exponentiate","secondHalf","input","__halfDigit","__setHalfDigit","divisionResult","firstHalf","leftNegative","bothNegative","xSign","__unequalSign","__absoluteGreater","__absoluteLess","ySign","yAbs","abs","xDigit","__compareToDouble","yBitLength","compareMantissa","op","__comparisonResultToBool","__compareToNumber","carry","r","borrow","inputLength","__setDigitGrow","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","acc","m1","m1Low","m1High","rLow","__imul","rMid1","rMid2","rHigh","source","factor","summand","rx","ry","mLow","mHigh","dLow","dHigh","pLow","pMid1","pMid2","pHigh","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","__halfDigitLength","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","j","qhat","ujn","rhat","vn2","ujn2","__internalMultiplyAdd","__inplaceSub","__inplaceAdd","__inplaceRightShift","startIndex","halfDigits","sum","subtrahend","r0","sub","r15","addDigit","__toShiftAmount","digitShift","bitsShift","grow","__rightShiftByMaximum","mustRoundDown","obj","hint","Symbol","toPrimitive","exoticToPrim","valueOf","call","drop","limit","min","msdBitsConsumed","resultMsd","minuendMsd","len","previous","updated","base","ArrayBuffer","Float64Array","__kBitConversionBuffer","Int32Array","clz32","log","LN2","imul","a","b"],"mappings":"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","sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // DataView-related functionality.\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\n    }\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\n        const result = new JSBI(3, false);\n        result.__setDigit(0, low & 0x3FFFFFFF);\n        result.__setDigit(1, ((high & 0xFFFFFFF) << 2) | (low >>> 30));\n        result.__setDigit(2, high >>> 28);\n        return result.__trim();\n    }\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\n    }\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\n        value = JSBI.asUintN(64, value);\n        let high = 0;\n        let low = 0;\n        if (value.length > 0) {\n            low = value.__digit(0);\n            if (value.length > 1) {\n                const d1 = value.__digit(1);\n                low = low | d1 << 30;\n                high = d1 >>> 2;\n                if (value.length > 2) {\n                    high = high | (value.__digit(2) << 28);\n                }\n            }\n        }\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        dataview.setUint32(byteOffset + h, high, littleEndian);\n        dataview.setUint32(byteOffset + l, low, littleEndian);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"]},"metadata":{},"sourceType":"script"}