{"ast":null,"code":"import BigNumber from'bignumber.js';import masterchefABI from'config/abi/masterchef.json';import erc20 from'config/abi/erc20.json';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';import{BIG_TEN,BIG_ZERO}from'utils/bigNumber';import multicall from'utils/multicall';const fetchFarm=async farm=>{var _info$allocPoint;const{pid,lpAddresses,token,quoteToken}=farm;const lpAddress=getAddress(lpAddresses);const calls=[// Balance of token in the LP contract\n{address:getAddress(token.address),name:'balanceOf',params:[lpAddress]},// Balance of quote token on LP contract\n{address:getAddress(quoteToken.address),name:'balanceOf',params:[lpAddress]},// Balance of LP tokens in the master chef contract\n{address:lpAddress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAddress,name:'totalSupply'},// Token decimals\n{address:getAddress(token.address),name:'decimals'},// Quote token decimals\n{address:getAddress(quoteToken.address),name:'decimals'}];const[tokenBalanceLP,quoteTokenBalanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals]=await multicall(erc20,calls);// Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\nconst lpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Raw amount of token in the LP, including those not staked\nconst tokenAmountTotal=new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));const quoteTokenAmountTotal=new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals));// Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\nconst tokenAmountMc=tokenAmountTotal.times(lpTokenRatio);const quoteTokenAmountMc=quoteTokenAmountTotal.times(lpTokenRatio);// Total staked in LP, in quote token value\nconst lpTotalInQuoteToken=quoteTokenAmountMc.times(new BigNumber(2));// Only make masterchef calls if farm has pid\nconst[info,totalAllocPoint]=pid||pid===0?await multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'}]):[null,null];const allocPoint=info?new BigNumber((_info$allocPoint=info.allocPoint)===null||_info$allocPoint===void 0?void 0:_info$allocPoint._hex):BIG_ZERO;const poolWeight=totalAllocPoint?allocPoint.div(new BigNumber(totalAllocPoint)):BIG_ZERO;const data={tokenAmountMc:tokenAmountMc.toJSON(),quoteTokenAmountMc:quoteTokenAmountMc.toJSON(),tokenAmountTotal:tokenAmountTotal.toJSON(),quoteTokenAmountTotal:quoteTokenAmountTotal.toJSON(),lpTotalSupply:new BigNumber(lpTotalSupply).toJSON(),lpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),poolWeight:poolWeight.toJSON(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\")};return data;};export default fetchFarm;","map":{"version":3,"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","_info$allocPoint","pid","lpAddresses","token","quoteToken","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","tokenAmountMc","times","quoteTokenAmountMc","lpTotalInQuoteToken","info","totalAllocPoint","allocPoint","_hex","poolWeight","data","toJSON","tokenPriceVsQuote","multiplier","concat","toString"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/farms/fetchPublicFarmData.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport erc20 from 'config/abi/erc20.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport multicall from 'utils/multicall'\nimport { Farm, SerializedBigNumber } from '../types'\n\ntype PublicFarmData = {\n  tokenAmountMc: SerializedBigNumber\n  quoteTokenAmountMc: SerializedBigNumber\n  tokenAmountTotal: SerializedBigNumber\n  quoteTokenAmountTotal: SerializedBigNumber\n  lpTotalInQuoteToken: SerializedBigNumber\n  lpTotalSupply: SerializedBigNumber\n  tokenPriceVsQuote: SerializedBigNumber\n  poolWeight: SerializedBigNumber\n  multiplier: string\n}\n\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: getAddress(token.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: getAddress(quoteToken.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: getAddress(token.address),\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: getAddress(quoteToken.address),\n      name: 'decimals',\n    },\n  ]\n\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n    await multicall(erc20, calls)\n\n    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n    \n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n  \n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n  \n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\n  \n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] =\n  pid || pid === 0\n      ? await multicall(masterchefABI, [\n        {\n            address: getMasterChefAddress(),\n            name: 'poolInfo',\n            params: [pid],\n          },\n          {\n            address: getMasterChefAddress(),\n            name: 'totalAllocPoint',\n          },\n        ])\n        : [null, null]\n        \n        const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n        const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\n        \n        const data =  {\n          tokenAmountMc: tokenAmountMc.toJSON(),\n          quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n          tokenAmountTotal: tokenAmountTotal.toJSON(),\n          quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n          lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n          tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n          poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  }\n\n  return data\n\n}\n\nexport default fetchFarm\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}