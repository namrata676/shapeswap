{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/uikit/components/Table/types.ts"],"sourcesContent":["export type ColumnType<T> = {\n  name: string;\n  label?: string;\n  hidden?: boolean;\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  render?: ({ value, row }: { value: any; row: T }) => React.ReactNode;\n  headerRender?: HeaderRenderType;\n};\n\nexport type ColumnStateType<T> = {\n  name: string;\n  label: string;\n  hidden: boolean;\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\n  sorted: {\n    on: boolean;\n    asc?: boolean;\n  };\n  headerRender?: HeaderRenderType;\n};\n\nexport type HeaderRenderType = ({ label }: { label: React.ReactNode }) => React.ReactNode;\n\n// this is the type saved as state and returned\nexport type HeaderType<T> = {\n  name: string;\n  label?: string;\n  hidden?: boolean;\n  sorted: {\n    on: boolean;\n    asc?: boolean;\n  };\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\n  render: () => React.ReactNode;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DataType = { [key: string]: any };\n\nexport type ColumnByNamesType<T> = {\n  [key: string]: ColumnType<T>;\n};\n\nexport type RenderFunctionType<T> = ({ value, row }: RenderFunctionArgsType<T>) => React.ReactNode | undefined;\n\ntype RenderFunctionArgsType<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n  row: T;\n};\n\nexport type ColumnByNameType<T> = Omit<Required<ColumnType<T>>, \"name\" | \"sort\">;\n\nexport interface RowType<T extends DataType> {\n  id: number;\n  cells: CellType[];\n  hidden?: boolean;\n  selected?: boolean;\n  original: T;\n}\n\nexport type CellType = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n  render: () => React.ReactNode;\n};\n\nexport interface UseTableTypeParams<T extends DataType> {\n  columns: ColumnType<T>[];\n  data: T[];\n  options?: {\n    sortable?: boolean;\n    selectable?: boolean;\n    filter?: (row: RowType<T>[]) => RowType<T>[];\n    filterOn?: boolean;\n  };\n}\n\nexport interface UseTablePropsType<T> {\n  columns: ColumnType<T>[];\n  data: T[];\n  options?: {\n    sortable?: boolean;\n    selectable?: boolean;\n    filter?: (row: RowType<T>[]) => RowType<T>[];\n  };\n}\n\nexport interface UseTableOptionsType<T> {\n  sortable?: boolean;\n  selectable?: boolean;\n  pagination?: boolean;\n  sortColumn?: string;\n  filter?: (row: RowType<T>[]) => RowType<T>[];\n}\n\nexport interface UseTableReturnType<T> {\n  headers: HeaderType<T>[];\n  originalRows: RowType<T>[];\n  rows: RowType<T>[];\n  selectedRows: RowType<T>[];\n  dispatch: React.Dispatch<TableAction<T>>;\n  toggleSort: (columnName: string, isAscOverride?: boolean) => void;\n  selectRow: (id: number) => void;\n  toggleAll: () => void;\n  setSearchString: (searchString: string) => void;\n  toggleAllState: boolean;\n  pagination: PaginatorType;\n}\n\ntype PaginatorType = {\n  nextPage: () => void;\n  prevPage: () => void;\n  page: number;\n  perPage: number;\n  canNext: boolean;\n  canPrev: boolean;\n};\n\nexport type TableState<T extends DataType> = {\n  columnsByName: ColumnByNamesType<T>;\n  columns: ColumnStateType<T>[];\n  rows: RowType<T>[];\n  originalRows: RowType<T>[];\n  selectedRows: RowType<T>[];\n  filterOn: boolean;\n  sortColumn: string | null | undefined;\n  toggleAllState: boolean;\n  pagination: PaginatorType;\n  paginationEnabled: boolean;\n};\n\nexport type TableAction<T extends DataType> =\n  | { type: \"TOGGLE_SORT\"; columnName: string; isAscOverride?: boolean }\n  | { type: \"SELECT_ROW\"; rowId: number }\n  | { type: \"GLOBAL_FILTER\"; filter: (row: RowType<T>[]) => RowType<T>[] }\n  | { type: \"SEARCH_STRING\"; searchString: string }\n  | { type: \"GLOBAL_FILTER_OFF\" }\n  | { type: \"SET_ROWS\"; data: RowType<T>[] }\n  | { type: \"NEXT_PAGE\" }\n  | { type: \"PREV_PAGE\" }\n  | { type: \"TOGGLE_ALL\" };\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}