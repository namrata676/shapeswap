{"ast":null,"code":"import { useMemo } from 'react';\nimport { isAddress } from '../../utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(s_ => s_.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return symbol && matchesSearch(symbol) || name && matchesSearch(name);\n  });\n}\nexport function useSortedTokensByQuery(tokens, searchQuery) {\n  return useMemo(() => {\n    if (!tokens) {\n      return [];\n    }\n    const symbolMatch = searchQuery.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    if (symbolMatch.length > 1) {\n      return tokens;\n    }\n    const exactMatches = [];\n    const symbolSubtrings = [];\n    const rest = [];\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    tokens.map(token => {\n      var _token$symbol, _token$symbol2;\n      if (((_token$symbol = token.symbol) === null || _token$symbol === void 0 ? void 0 : _token$symbol.toLowerCase()) === symbolMatch[0]) {\n        return exactMatches.push(token);\n      }\n      if ((_token$symbol2 = token.symbol) !== null && _token$symbol2 !== void 0 && _token$symbol2.toLowerCase().startsWith(searchQuery.toLowerCase().trim())) {\n        return symbolSubtrings.push(token);\n      }\n      return rest.push(token);\n    });\n    return [...exactMatches, ...symbolSubtrings, ...rest];\n  }, [tokens, searchQuery]);\n}","map":{"version":3,"names":["useMemo","isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","s_","every","p","some","sp","startsWith","endsWith","symbol","name","useSortedTokensByQuery","searchQuery","symbolMatch","exactMatches","symbolSubtrings","rest","map","push","trim"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/components/SearchModal/filtering.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Token } from 'toolkit/sdk'\nimport { isAddress } from '../../utils'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter((token) => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter((s) => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s_) => s_.length > 0)\n\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter((token) => {\n    const { symbol, name } = token\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\n  })\n}\n\nexport function useSortedTokensByQuery(tokens: Token[] | undefined, searchQuery: string): Token[] {\n  return useMemo(() => {\n    if (!tokens) {\n      return []\n    }\n\n    const symbolMatch = searchQuery\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n\n    if (symbolMatch.length > 1) {\n      return tokens\n    }\n\n    const exactMatches: Token[] = []\n    const symbolSubtrings: Token[] = []\n    const rest: Token[] = []\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    tokens.map((token) => {\n      if (token.symbol?.toLowerCase() === symbolMatch[0]) {\n        return exactMatches.push(token)\n      }\n      if (token.symbol?.toLowerCase().startsWith(searchQuery.toLowerCase().trim())) {\n        return symbolSubtrings.push(token)\n      }\n      return rest.push(token)\n    })\n\n    return [...exactMatches, ...symbolSubtrings, ...rest]\n  }, [tokens, searchQuery])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}