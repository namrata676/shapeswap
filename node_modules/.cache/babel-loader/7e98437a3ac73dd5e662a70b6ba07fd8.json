{"ast":null,"code":"var _Currency;/* eslint-disable prefer-destructuring */import JSBI from'jsbi';import{SolidityType}from'../constants';import{validateSolidityTypeInstance}from'../utils';/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */export class Currency{/**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */constructor(decimals,symbol,name){this.decimals=void 0;this.symbol=void 0;this.name=void 0;validateSolidityTypeInstance(JSBI.BigInt(decimals),SolidityType.uint8);this.decimals=decimals;this.symbol=symbol;this.name=name;}}_Currency=Currency;/**\n   * The only instance of the base class `Currency`.\n   */Currency.ETHER=new _Currency(18,'BNB','BNB');const ETHER=Currency.ETHER;export{ETHER};","map":{"version":3,"names":["JSBI","SolidityType","validateSolidityTypeInstance","Currency","constructor","decimals","symbol","name","BigInt","uint8","_Currency","ETHER"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/currency.ts"],"sourcesContent":["/* eslint-disable prefer-destructuring */\nimport JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n\n  public readonly symbol?: string\n\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nexport { ETHER }\n"],"mappings":"cAAA,yCACA,MAAO,CAAAA,IAAI,KAAM,MAAM,CAEvB,OAASC,YAAY,KAAQ,cAAc,CAC3C,OAASC,4BAA4B,KAAQ,UAAU,CAEvD;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,QAAS,CAYpB;AACF;AACA;AACA;AACA;AACA,KACYC,WAAWA,CAACC,QAAgB,CAAEC,MAAe,CAAEC,IAAa,CAAE,MAjBxDF,QAAQ,aAERC,MAAM,aAENC,IAAI,QAclBL,4BAA4B,CAACF,IAAI,CAACQ,MAAM,CAACH,QAAQ,CAAC,CAAEJ,YAAY,CAACQ,KAAK,CAAC,CAEvE,IAAI,CAACJ,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAClB,CACF,CAACG,SAAA,CAzBYP,QAAQ,CAOnB;AACF;AACA,KATaA,QAAQ,CAUIQ,KAAK,CAAa,GAAI,CAAAR,SAAQ,CAAC,EAAE,CAAE,KAAK,CAAE,KAAK,CAAC,CAiBzE,KAAM,CAAAQ,KAAK,CAAGR,QAAQ,CAACQ,KAAK,CAE5B,OAASA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}