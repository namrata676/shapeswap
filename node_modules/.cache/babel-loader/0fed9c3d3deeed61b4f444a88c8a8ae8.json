{"ast":null,"code":"/* eslint-disable no-else-return */\nimport invariant from 'tiny-invariant';\nimport { ChainId } from '../constants';\nimport { validateAndParseAddress } from '../utils';\nimport { Currency } from './currency';\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  constructor(chainId, address, decimals, symbol, name) {\n    super(decimals, symbol, name);\n    this.chainId = void 0;\n    this.address = void 0;\n    this.chainId = chainId;\n    this.address = validateAndParseAddress(address);\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  sortsBefore(other) {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS');\n    invariant(this.address !== other.address, 'ADDRESSES');\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET,\n  // '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  process.env.REACT_APP_WBNB, 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET,\n  // '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n  process.env.REACT_APP_WBNB, 18, 'WBNB', 'Wrapped BNB')\n};","map":{"version":3,"names":["invariant","ChainId","validateAndParseAddress","Currency","Token","constructor","chainId","address","decimals","symbol","name","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","process","env","REACT_APP_WBNB","TESTNET"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/token.ts"],"sourcesContent":["/* eslint-disable no-else-return */\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    // '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    process.env.REACT_APP_WBNB,\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    // '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    process.env.REACT_APP_WBNB,\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n}\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,uBAAuB,QAAQ,UAAU;AAClD,SAASC,QAAQ,QAAQ,YAAY;;AAErC;AACA;AACA;AACA,OAAO,MAAMC,KAAK,SAASD,QAAQ,CAAC;EAK3BE,WAAW,CAACC,OAAgB,EAAEC,OAAe,EAAEC,QAAgB,EAAEC,MAAe,EAAEC,IAAa,EAAE;IACtG,KAAK,CAACF,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;IAAA,KALfJ,OAAO;IAAA,KAEPC,OAAO;IAIrB,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGL,uBAAuB,CAACK,OAAO,CAAC;EACjD;;EAEA;AACF;AACA;AACA;EACSI,MAAM,CAACC,KAAY,EAAW;IACnC;IACA,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;IACb;IACA,OAAO,IAAI,CAACN,OAAO,KAAKM,KAAK,CAACN,OAAO,IAAI,IAAI,CAACC,OAAO,KAAKK,KAAK,CAACL,OAAO;EACzE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSM,WAAW,CAACD,KAAY,EAAW;IACxCZ,SAAS,CAAC,IAAI,CAACM,OAAO,KAAKM,KAAK,CAACN,OAAO,EAAE,WAAW,CAAC;IACtDN,SAAS,CAAC,IAAI,CAACO,OAAO,KAAKK,KAAK,CAACL,OAAO,EAAE,WAAW,CAAC;IACtD,OAAO,IAAI,CAACA,OAAO,CAACO,WAAW,EAAE,GAAGF,KAAK,CAACL,OAAO,CAACO,WAAW,EAAE;EACjE;AACF;;AAEA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,SAAmB,EAAEC,SAAmB,EAAW;EAChF,IAAID,SAAS,YAAYZ,KAAK,IAAIa,SAAS,YAAYb,KAAK,EAAE;IAC5D,OAAOY,SAAS,CAACL,MAAM,CAACM,SAAS,CAAC;EACpC,CAAC,MAAM,IAAID,SAAS,YAAYZ,KAAK,EAAE;IACrC,OAAO,KAAK;EACd,CAAC,MAAM,IAAIa,SAAS,YAAYb,KAAK,EAAE;IACrC,OAAO,KAAK;EACd,CAAC,MAAM;IACL,OAAOY,SAAS,KAAKC,SAAS;EAChC;AACF;AAEA,OAAO,MAAMC,IAAI,GAAG;EAClB,CAACjB,OAAO,CAACkB,OAAO,GAAG,IAAIf,KAAK,CAC1BH,OAAO,CAACkB,OAAO;EACf;EACAC,OAAO,CAACC,GAAG,CAACC,cAAc,EAC1B,EAAE,EACF,MAAM,EACN,aAAa,CACd;EACD,CAACrB,OAAO,CAACsB,OAAO,GAAG,IAAInB,KAAK,CAC1BH,OAAO,CAACsB,OAAO;EACf;EACAH,OAAO,CAACC,GAAG,CAACC,cAAc,EAC1B,EAAE,EACF,MAAM,EACN,aAAa;AAEjB,CAAC"},"metadata":{},"sourceType":"module"}