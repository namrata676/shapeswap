{"ast":null,"code":"import { ChainId } from 'toolkit/sdk';\nimport addresses from 'config/constants/contracts';\nimport tokens from 'config/constants/tokens';\nexport const getAddress = address => {\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET];\n};\nexport const getCakeAddress = () => {\n  return getAddress(tokens.cake.address);\n};\nexport const getMasterChefAddress = () => {\n  return getAddress(addresses.masterChef);\n};\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall);\n};\nexport const getWbnbAddress = () => {\n  return getAddress(tokens.wbnb.address);\n};\nexport const getLotteryV2Address = () => {\n  return getAddress(addresses.lotteryV2);\n};\nexport const getPancakeProfileAddress = () => {\n  return getAddress(addresses.pancakeProfile);\n};\nexport const getPancakeRabbitsAddress = () => {\n  return getAddress(addresses.pancakeRabbits);\n};\nexport const getBunnyFactoryAddress = () => {\n  return getAddress(addresses.bunnyFactory);\n};\nexport const getClaimRefundAddress = () => {\n  return getAddress(addresses.claimRefund);\n};\nexport const getPointCenterIfoAddress = () => {\n  return getAddress(addresses.pointCenterIfo);\n};\nexport const getBunnySpecialAddress = () => {\n  return getAddress(addresses.bunnySpecial);\n};\nexport const getTradingCompetitionAddress = () => {\n  return getAddress(addresses.tradingCompetition);\n};\nexport const getEasterNftAddress = () => {\n  return getAddress(addresses.easterNft);\n};\nexport const getCakeVaultAddress = () => {\n  return getAddress(addresses.cakeVault);\n};\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions);\n};\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle);\n};\nexport const getBunnySpecialCakeVaultAddress = () => {\n  return getAddress(addresses.bunnySpecialCakeVault);\n};\nexport const getBunnySpecialPredictionAddress = () => {\n  return getAddress(addresses.bunnySpecialPrediction);\n};","map":{"version":3,"names":["ChainId","addresses","tokens","getAddress","address","chainId","process","env","REACT_APP_CHAIN_ID","MAINNET","getCakeAddress","cake","getMasterChefAddress","masterChef","getMulticallAddress","multiCall","getWbnbAddress","wbnb","getLotteryV2Address","lotteryV2","getPancakeProfileAddress","pancakeProfile","getPancakeRabbitsAddress","pancakeRabbits","getBunnyFactoryAddress","bunnyFactory","getClaimRefundAddress","claimRefund","getPointCenterIfoAddress","pointCenterIfo","getBunnySpecialAddress","bunnySpecial","getTradingCompetitionAddress","tradingCompetition","getEasterNftAddress","easterNft","getCakeVaultAddress","cakeVault","getPredictionsAddress","predictions","getChainlinkOracleAddress","chainlinkOracle","getBunnySpecialCakeVaultAddress","bunnySpecialCakeVault","getBunnySpecialPredictionAddress","bunnySpecialPrediction"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/addressHelpers.ts"],"sourcesContent":["import { ChainId } from 'toolkit/sdk'\nimport addresses from 'config/constants/contracts'\nimport tokens from 'config/constants/tokens'\nimport { Address } from 'config/constants/types'\n\nexport const getAddress = (address: Address): string => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\n}\n\nexport const getCakeAddress = () => {\n  return getAddress(tokens.cake.address)\n}\nexport const getMasterChefAddress = () => {\n  return getAddress(addresses.masterChef)\n}\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall)\n}\nexport const getWbnbAddress = () => {\n  return getAddress(tokens.wbnb.address)\n}\nexport const getLotteryV2Address = () => {\n  return getAddress(addresses.lotteryV2)\n}\nexport const getPancakeProfileAddress = () => {\n  return getAddress(addresses.pancakeProfile)\n}\nexport const getPancakeRabbitsAddress = () => {\n  return getAddress(addresses.pancakeRabbits)\n}\nexport const getBunnyFactoryAddress = () => {\n  return getAddress(addresses.bunnyFactory)\n}\nexport const getClaimRefundAddress = () => {\n  return getAddress(addresses.claimRefund)\n}\nexport const getPointCenterIfoAddress = () => {\n  return getAddress(addresses.pointCenterIfo)\n}\nexport const getBunnySpecialAddress = () => {\n  return getAddress(addresses.bunnySpecial)\n}\nexport const getTradingCompetitionAddress = () => {\n  return getAddress(addresses.tradingCompetition)\n}\nexport const getEasterNftAddress = () => {\n  return getAddress(addresses.easterNft)\n}\nexport const getCakeVaultAddress = () => {\n  return getAddress(addresses.cakeVault)\n}\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions)\n}\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle)\n}\nexport const getBunnySpecialCakeVaultAddress = () => {\n  return getAddress(addresses.bunnySpecialCakeVault)\n}\nexport const getBunnySpecialPredictionAddress = () => {\n  return getAddress(addresses.bunnySpecialPrediction)\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,MAAM,MAAM,yBAAyB;AAG5C,OAAO,MAAMC,UAAU,GAAIC,OAAgB,IAAa;EACtD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;EAC9C,OAAOJ,OAAO,CAACC,OAAO,CAAC,GAAGD,OAAO,CAACC,OAAO,CAAC,GAAGD,OAAO,CAACJ,OAAO,CAACS,OAAO,CAAC;AACvE,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAM;EAClC,OAAOP,UAAU,CAACD,MAAM,CAACS,IAAI,CAACP,OAAO,CAAC;AACxC,CAAC;AACD,OAAO,MAAMQ,oBAAoB,GAAG,MAAM;EACxC,OAAOT,UAAU,CAACF,SAAS,CAACY,UAAU,CAAC;AACzC,CAAC;AACD,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACvC,OAAOX,UAAU,CAACF,SAAS,CAACc,SAAS,CAAC;AACxC,CAAC;AACD,OAAO,MAAMC,cAAc,GAAG,MAAM;EAClC,OAAOb,UAAU,CAACD,MAAM,CAACe,IAAI,CAACb,OAAO,CAAC;AACxC,CAAC;AACD,OAAO,MAAMc,mBAAmB,GAAG,MAAM;EACvC,OAAOf,UAAU,CAACF,SAAS,CAACkB,SAAS,CAAC;AACxC,CAAC;AACD,OAAO,MAAMC,wBAAwB,GAAG,MAAM;EAC5C,OAAOjB,UAAU,CAACF,SAAS,CAACoB,cAAc,CAAC;AAC7C,CAAC;AACD,OAAO,MAAMC,wBAAwB,GAAG,MAAM;EAC5C,OAAOnB,UAAU,CAACF,SAAS,CAACsB,cAAc,CAAC;AAC7C,CAAC;AACD,OAAO,MAAMC,sBAAsB,GAAG,MAAM;EAC1C,OAAOrB,UAAU,CAACF,SAAS,CAACwB,YAAY,CAAC;AAC3C,CAAC;AACD,OAAO,MAAMC,qBAAqB,GAAG,MAAM;EACzC,OAAOvB,UAAU,CAACF,SAAS,CAAC0B,WAAW,CAAC;AAC1C,CAAC;AACD,OAAO,MAAMC,wBAAwB,GAAG,MAAM;EAC5C,OAAOzB,UAAU,CAACF,SAAS,CAAC4B,cAAc,CAAC;AAC7C,CAAC;AACD,OAAO,MAAMC,sBAAsB,GAAG,MAAM;EAC1C,OAAO3B,UAAU,CAACF,SAAS,CAAC8B,YAAY,CAAC;AAC3C,CAAC;AACD,OAAO,MAAMC,4BAA4B,GAAG,MAAM;EAChD,OAAO7B,UAAU,CAACF,SAAS,CAACgC,kBAAkB,CAAC;AACjD,CAAC;AACD,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACvC,OAAO/B,UAAU,CAACF,SAAS,CAACkC,SAAS,CAAC;AACxC,CAAC;AACD,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACvC,OAAOjC,UAAU,CAACF,SAAS,CAACoC,SAAS,CAAC;AACxC,CAAC;AACD,OAAO,MAAMC,qBAAqB,GAAG,MAAM;EACzC,OAAOnC,UAAU,CAACF,SAAS,CAACsC,WAAW,CAAC;AAC1C,CAAC;AACD,OAAO,MAAMC,yBAAyB,GAAG,MAAM;EAC7C,OAAOrC,UAAU,CAACF,SAAS,CAACwC,eAAe,CAAC;AAC9C,CAAC;AACD,OAAO,MAAMC,+BAA+B,GAAG,MAAM;EACnD,OAAOvC,UAAU,CAACF,SAAS,CAAC0C,qBAAqB,CAAC;AACpD,CAAC;AACD,OAAO,MAAMC,gCAAgC,GAAG,MAAM;EACpD,OAAOzC,UAAU,CAACF,SAAS,CAAC4C,sBAAsB,CAAC;AACrD,CAAC"},"metadata":{},"sourceType":"module"}