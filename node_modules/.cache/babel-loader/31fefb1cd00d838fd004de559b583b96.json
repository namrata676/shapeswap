{"ast":null,"code":"import ifosList from 'config/constants/ifo';\nimport { campaignMap } from 'config/constants/campaigns';\nimport { multicallv2 } from 'utils/multicall';\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers';\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json';\nexport const getAchievementTitle = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title\n        }\n      };\n    default:\n      return campaign.title;\n  }\n};\nexport const getAchievementDescription = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\n        data: {\n          title: campaign.title\n        }\n      };\n    default:\n      return campaign.description;\n  }\n};\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async account => {\n  const ifoCampaigns = ifosList.filter(ifoItem => ifoItem.campaignId !== undefined);\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatusCalls = ifoCampaigns.map(({\n    address\n  }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address]\n    };\n  });\n  const claimStatuses = await multicallv2(pointCenterIfoABI, claimStatusCalls, {\n    requireSuccess: false\n  });\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = await multicallv2(pointCenterIfoABI, claimStatuses.reduce((accum, claimStatusArr, index) => {\n    if (claimStatusArr === null) {\n      return accum;\n    }\n    const [claimStatus] = claimStatusArr;\n    if (claimStatus === true) {\n      return [...accum, {\n        address: getPointCenterIfoAddress(),\n        name: 'ifos',\n        params: [index]\n      }];\n    }\n    return accum;\n  }, []));\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const {\n      address\n    } = ifoCampaigns.find(ifoCampaign => ifoCampaign.campaignId === claimableIfoDataItem.campaignId);\n    return [...accum, {\n      address,\n      id: claimableIfoDataItem.campaignId,\n      type: 'ifo',\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: claimableIfoDataItem.numberPoints.toNumber()\n    }];\n  }, []);\n};","map":{"version":3,"names":["ifosList","campaignMap","multicallv2","getPointCenterIfoAddress","pointCenterIfoABI","getAchievementTitle","campaign","type","key","data","title","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","claimStatusCalls","map","address","name","params","claimStatuses","requireSuccess","claimableIfoData","reduce","accum","claimStatusArr","index","claimStatus","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","id","badge","points","numberPoints","toNumber"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/achievements.ts"],"sourcesContent":["import { ethers } from 'ethers'\nimport { Campaign } from 'config/constants/types'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement, TranslatableText } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: ethers.BigNumber\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address],\n    }\n  })\n\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\n    | [boolean][]\n    | null\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await multicallv2(\n    pointCenterIfoABI,\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\n      if (claimStatusArr === null) {\n        return accum\n      }\n\n      const [claimStatus] = claimStatusArr\n\n      if (claimStatus === true) {\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\n      }\n\n      return accum\n    }, []),\n  )) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: claimableIfoDataItem.numberPoints.toNumber(),\n      },\n    ]\n  }, [])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}