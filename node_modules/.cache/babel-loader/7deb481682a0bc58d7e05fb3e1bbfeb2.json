{"ast":null,"code":"// Set of helper functions to facilitate wallet setup\n\nimport { BASE_URL } from 'config';\nimport Web3 from \"web3\";\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\n\n// 0xa86a (hex) = 43114 (dec);\n// 0xa869 (hex) = 43113 (dec);\nconst chainMatic = `0x${137 .toString(16)}`;\nconst chainBinance = `0x${56 .toString(16)}`;\nconst chainCronos = `0x${25 .toString(16)}`;\nconst chainFantom = `0x${250 .toString(16)}`;\nconst chainEthereum = `0x${1 .toString(16)}`;\nconst chainAvax = `0x${43114 .toString(16)}`;\nconst chainTestAvax = `0x${43113 .toString(16)}`;\nconst chainArbitrum = `0x${42161 .toString(16)}`;\nconst chainOptimism = `0x${10 .toString(16)}`;\nconst avalancheParam = [{\n  chainId: chainAvax,\n  chainName: 'Avalanche Network',\n  rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'AVAX',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://snowtrace.io/']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst mumbaiParam = [{\n  chainId: chainMatic,\n  chainName: 'Polygon Mainnet',\n  rpcUrls: ['https://polygon-rpc.com/'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://polygonscan.com/']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst binanceParam = [{\n  chainId: chainBinance,\n  chainName: 'Smart Chain',\n  rpcUrls: ['https://bsc-dataseed.binance.org/'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'BNB',\n    symbol: 'BNB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://bscscan.com']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst cronosParam = [{\n  chainId: chainCronos,\n  chainName: 'Cronos',\n  rpcUrls: ['https://evm.cronos.org'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'CRO',\n    symbol: 'CRO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cronoscan.com/']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst fantomParam = [{\n  chainId: chainFantom,\n  chainName: 'Fantom Opera',\n  rpcUrls: ['https://rpc.ftm.tools'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'FTM',\n    symbol: 'FTM',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://ftmscan.com']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst ethereumParam = [{\n  chainId: chainEthereum,\n  chainName: 'mainnet',\n  rpcUrls: ['https://etherscan.io/block/16068872'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://etherscan.io']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst arbitrumParam = [{\n  chainId: chainArbitrum,\n  chainName: 'Arbitrum One',\n  rpcUrls: ['https://arb1.arbitrum.io/rpc'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'AETH',\n    symbol: 'AETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://arbiscan.io']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst optimismParam = [{\n  chainId: chainOptimism,\n  chainName: 'Optimism',\n  rpcUrls: ['https://mainnet.optimism.io'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'OP',\n    symbol: 'OP',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://optimistic.ethereum.io']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst avalancheTestParam = [{\n  chainId: chainTestAvax,\n  chainName: 'testnet',\n  rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n  nativeCurrency: {\n    name: 'Avax',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cchain.explorer.avax-test.network']\n  // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n}];\n\nconst getNetworkObject = chainId => {\n  let networkParam;\n  if (chainId === 1) {\n    networkParam = ethereumParam;\n  } else if (chainId === 137) {\n    networkParam = mumbaiParam;\n  } else if (chainId === 56) {\n    networkParam = binanceParam;\n  } else if (chainId === 250) {\n    networkParam = fantomParam;\n  } else if (chainId === 43114) {\n    networkParam = avalancheParam;\n  } else if (chainId === 25) {\n    networkParam = cronosParam;\n  } else if (chainId === 43113) {\n    networkParam = avalancheTestParam;\n  } else if (chainId === 42161) {\n    networkParam = arbitrumParam;\n  } else if (chainId === 10) {\n    networkParam = optimismParam;\n  }\n  return networkParam;\n};\nexport const setupNetwork = async () => {\n  const web3 = new Web3(window.ethereum);\n  const chainID = await web3.eth.net.getId();\n  console.log(\"chainId\", chainID);\n  console.log(\"chainId1\", chainID === 137);\n  console.log(\"entersetupnetwork\");\n  const provider = window.ethereum;\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: getNetworkObject(chainID)\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\nexport const setupNetwork1 = async chainId => {\n  const provider = window.ethereum;\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: getNetworkObject(chainId)\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\nexport const setupNetwork2 = async () => {\n  console.log(\"entersetupnetwork\");\n  const provider = window.ethereum;\n  if (provider) {\n    const chainId = 137;\n    const chainIdHex = `0x${chainId.toString(16)}`;\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: avalancheParam\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (tokenAddress, tokenSymbol, tokenDecimals) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`\n      }\n    }\n  });\n  return tokenAdded;\n};","map":{"version":3,"names":["BASE_URL","Web3","chainMatic","toString","chainBinance","chainCronos","chainFantom","chainEthereum","chainAvax","chainTestAvax","chainArbitrum","chainOptimism","avalancheParam","chainId","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","mumbaiParam","binanceParam","cronosParam","fantomParam","ethereumParam","arbitrumParam","optimismParam","avalancheTestParam","getNetworkObject","networkParam","setupNetwork","web3","window","ethereum","chainID","eth","net","getId","console","log","provider","request","method","params","error","setupNetwork1","setupNetwork2","chainIdHex","registerToken","tokenAddress","tokenSymbol","tokenDecimals","tokenAdded","type","options","address","image"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/wallet.ts"],"sourcesContent":["// Set of helper functions to facilitate wallet setup\nimport { ChainId } from 'toolkit/sdk'\nimport { BASE_URL, BASE_BSC_SCAN_URLS } from 'config'\nimport Web3 from \"web3\";\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\n\n\n// 0xa86a (hex) = 43114 (dec);\n// 0xa869 (hex) = 43113 (dec);\nconst chainMatic = `0x${(137).toString(16)}`\nconst chainBinance =  `0x${(56).toString(16)}`\nconst chainCronos = `0x${(25).toString(16)}`\nconst chainFantom =  `0x${(250).toString(16)}`\nconst chainEthereum = `0x${(1).toString(16)}`\nconst chainAvax = `0x${(43114).toString(16)}`\nconst chainTestAvax = `0x${(43113).toString(16)}`\nconst chainArbitrum = `0x${(42161).toString(16)}`\nconst chainOptimism =  `0x${(10).toString(16)}`\n\nconst avalancheParam = [\n  {    \n    chainId: chainAvax,\n    chainName:  'Avalanche Network',\n    rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'AVAX',\n      symbol: 'AVAX',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://snowtrace.io/'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst mumbaiParam = [\n  {\n    chainId:  chainMatic,\n    chainName:  'Polygon Mainnet',\n    rpcUrls: ['https://polygon-rpc.com/'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'MATIC',\n      symbol: 'MATIC',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://polygonscan.com/'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst binanceParam = [\n  {\n    chainId:  chainBinance,\n    chainName:  'Smart Chain',\n    rpcUrls: ['https://bsc-dataseed.binance.org/'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'BNB',\n      symbol: 'BNB',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://bscscan.com'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\n\nconst cronosParam = [\n  {\n    chainId:  chainCronos,\n    chainName:  'Cronos',\n    rpcUrls: ['https://evm.cronos.org'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'CRO',\n      symbol: 'CRO',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://cronoscan.com/'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\n\nconst fantomParam = [\n  {\n    chainId:  chainFantom,\n    chainName:  'Fantom Opera',\n    rpcUrls: ['https://rpc.ftm.tools'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'FTM',\n      symbol: 'FTM',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://ftmscan.com'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst ethereumParam = [\n  {\n    chainId:  chainEthereum,\n    chainName:  'mainnet',\n    rpcUrls: ['https://etherscan.io/block/16068872'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'ETH',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://etherscan.io'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst arbitrumParam = [\n  {\n    chainId:  chainArbitrum,\n    chainName:  'Arbitrum One',\n    rpcUrls: ['https://arb1.arbitrum.io/rpc'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'AETH',\n      symbol: 'AETH',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://arbiscan.io'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst optimismParam = [\n  {\n    chainId:  chainOptimism,\n    chainName:  'Optimism',\n    rpcUrls: ['https://mainnet.optimism.io'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'OP',\n      symbol: 'OP',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://optimistic.ethereum.io'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst avalancheTestParam = [\n  {\n    chainId:  chainTestAvax,\n    chainName:  'testnet',\n    rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    // rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    nativeCurrency: {\n      name: 'Avax',\n      symbol: 'AVAX',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n    // blockExplorerUrls: ['https://cchain.explorer.avax-test.network'],\n  },\n]\n\nconst getNetworkObject = (chainId) => {\n\nlet networkParam \nif (chainId === 1){\n  networkParam = ethereumParam\n} else if (chainId === 137){\n   networkParam = mumbaiParam\n} else if (chainId === 56){\n  networkParam = binanceParam\n} else if (chainId === 250){\n\n   networkParam = fantomParam\n} else if (chainId === 43114){\n  networkParam = avalancheParam\n} else if(chainId === 25){\n  networkParam = cronosParam\n} else if(chainId === 43113){\n  networkParam = avalancheTestParam\n} \nelse if (chainId === 42161) {\n  networkParam = arbitrumParam\n}\nelse if (chainId === 10) {\n  networkParam = optimismParam\n}\n  return networkParam\n}\n\n\nexport const setupNetwork = async () => {\n  \n\n  const web3 = new Web3(window.ethereum as any);\n  const chainID =  await web3.eth.net.getId();\n  console.log(\"chainId\",chainID)\n\n  console.log(\"chainId1\",chainID === 137)\n\n  console.log(\"entersetupnetwork\")\n  const provider = window.ethereum\n  if (provider) {\n    \n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: getNetworkObject(chainID),\n      })\n      return true\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\nexport const setupNetwork1 = async (chainId) => {\n\n  \n  const provider = window.ethereum\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: getNetworkObject(chainId),\n      })\n      return true\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\nexport const setupNetwork2 = async () => {\n  console.log(\"entersetupnetwork\")\n  const provider = window.ethereum\n  if (provider) {\n    const chainId = 137;\n    const chainIdHex = `0x${chainId.toString(16)}`;\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: avalancheParam,\n      })\n      return true\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the Avalanche network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n\n\n\n\n\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\n      },\n    },\n  })\n\n  return tokenAdded\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}