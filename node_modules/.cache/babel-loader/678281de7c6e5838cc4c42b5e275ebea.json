{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { getProfileContract } from 'utils/contractHelpers';\nimport { getNftByTokenId } from 'utils/collectibles';\nimport { getTeam } from 'state/teams/helpers';\nimport { transformProfileResponse } from './helpers';\nconst profileContract = getProfileContract();\nconst profileApi = process.env.REACT_APP_API_PROFILE;\nconst getUsername = async address => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`);\n    if (!response.ok) {\n      return '';\n    }\n    const {\n      username = ''\n    } = await response.json();\n    return username;\n  } catch (error) {\n    return '';\n  }\n};\nconst getProfile = async address => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address);\n    if (!hasRegistered) {\n      return {\n        hasRegistered,\n        profile: null\n      };\n    }\n    const profileResponse = await profileContract.getUserProfile(address);\n    const {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      nftAddress,\n      isActive\n    } = transformProfileResponse(profileResponse);\n    const team = await getTeam(teamId);\n    const username = await getUsername(address);\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft;\n    if (isActive) {\n      var _nft;\n      nft = await getNftByTokenId(nftAddress, tokenId);\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(`profile_${address}`, {\n        username,\n        avatar: `https://pancakeswap.finance/images/nfts/${(_nft = nft) === null || _nft === void 0 ? void 0 : _nft.images.sm}`\n      }, {\n        domain: 'pancakeswap.finance',\n        secure: true,\n        expires: 30\n      });\n    }\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team\n    };\n    return {\n      hasRegistered,\n      profile\n    };\n  } catch (error) {\n    return null;\n  }\n};\nexport default getProfile;","map":{"version":3,"names":["Cookies","getProfileContract","getNftByTokenId","getTeam","transformProfileResponse","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","response","fetch","ok","username","json","error","getProfile","hasRegistered","profile","profileResponse","getUserProfile","userId","points","teamId","tokenId","nftAddress","isActive","team","nft","set","avatar","images","sm","domain","secure","expires"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/profile/getProfile.ts"],"sourcesContent":["import Cookies from 'js-cookie'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { getNftByTokenId } from 'utils/collectibles'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.hasRegistered(address)) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      nft = await getNftByTokenId(nftAddress, tokenId)\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,kBAAkB,QAAQ,uBAAuB;AAE1D,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,wBAAwB,QAAQ,WAAW;AAEpD,MAAMC,eAAe,GAAGJ,kBAAkB,EAAE;AAC5C,MAAMK,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AAOpD,MAAMC,WAAW,GAAG,MAAOC,OAAe,IAAsB;EAC9D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,UAAW,cAAaK,OAAQ,EAAC,CAAC;IAElE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,OAAO,EAAE;IACX;IAEA,MAAM;MAAEC,QAAQ,GAAG;IAAG,CAAC,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;IAE/C,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAMC,UAAU,GAAG,MAAOP,OAAe,IAAkC;EACzE,IAAI;IACF,MAAMQ,aAAa,GAAI,MAAMd,eAAe,CAACc,aAAa,CAACR,OAAO,CAAa;IAE/E,IAAI,CAACQ,aAAa,EAAE;MAClB,OAAO;QAAEA,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC;IACzC;IAEA,MAAMC,eAAe,GAAG,MAAMhB,eAAe,CAACiB,cAAc,CAACX,OAAO,CAAC;IACrE,MAAM;MAAEY,MAAM;MAAEC,MAAM;MAAEC,MAAM;MAAEC,OAAO;MAAEC,UAAU;MAAEC;IAAS,CAAC,GAAGxB,wBAAwB,CAACiB,eAAe,CAAC;IAC3G,MAAMQ,IAAI,GAAG,MAAM1B,OAAO,CAACsB,MAAM,CAAC;IAClC,MAAMV,QAAQ,GAAG,MAAML,WAAW,CAACC,OAAO,CAAC;;IAE3C;IACA;IACA,IAAImB,GAAQ;IACZ,IAAIF,QAAQ,EAAE;MAAA;MACZE,GAAG,GAAG,MAAM5B,eAAe,CAACyB,UAAU,EAAED,OAAO,CAAC;;MAEhD;MACA1B,OAAO,CAAC+B,GAAG,CACR,WAAUpB,OAAQ,EAAC,EACpB;QACEI,QAAQ;QACRiB,MAAM,EAAG,2CAAwC,QAAEF,GAAG,yCAAH,KAAKG,MAAM,CAACC,EAAG;MACpE,CAAC,EACD;QAAEC,MAAM,EAAE,qBAAqB;QAAEC,MAAM,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAG,CAAC,CAC7D;IACH;IAEA,MAAMjB,OAAO,GAAG;MACdG,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPX,QAAQ;MACRY,UAAU;MACVC,QAAQ;MACRE,GAAG;MACHD;IACF,CAAY;IAEZ,OAAO;MAAEV,aAAa;MAAEC;IAAQ,CAAC;EACnC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAeC,UAAU"},"metadata":{},"sourceType":"module"}