{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue,\n    noLiquidity\n  }\n}) => {\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      };\n    }\n    // they're typing into a new field, store the other value\n\n    return {\n      ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: state.typedValue\n    };\n  }\n  return {\n    ...state,\n    independentField: field,\n    typedValue,\n    otherTypedValue: ''\n  };\n}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","payload","field","noLiquidity"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: state.typedValue,\n        }\n      }\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n        otherTypedValue: '',\n      }\n    }),\n)\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,KAAK,EAAEC,cAAc,EAAEC,SAAS,QAAQ,WAAW;AAQ5D,MAAMC,YAAuB,GAAG;EAC9BC,gBAAgB,EAAEJ,KAAK,CAACK,UAAU;EAClCC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;AAED,eAAeR,aAAa,CAAYI,YAAY,EAAGK,OAAO,IAC5DA,OAAO,CACJC,OAAO,CAACR,cAAc,EAAE,MAAME,YAAY,CAAC,CAC3CM,OAAO,CAACP,SAAS,EAAE,CAACQ,KAAK,EAAE;EAAEC,OAAO,EAAE;IAAEC,KAAK;IAAEN,UAAU;IAAEO;EAAY;AAAE,CAAC,KAAK;EAC9E,IAAIA,WAAW,EAAE;IACf;IACA,IAAID,KAAK,KAAKF,KAAK,CAACN,gBAAgB,EAAE;MACpC,OAAO;QACL,GAAGM,KAAK;QACRN,gBAAgB,EAAEQ,KAAK;QACvBN;MACF,CAAC;IACH;IACA;;IAEA,OAAO;MACL,GAAGI,KAAK;MACRN,gBAAgB,EAAEQ,KAAK;MACvBN,UAAU;MACVC,eAAe,EAAEG,KAAK,CAACJ;IACzB,CAAC;EACH;EACA,OAAO;IACL,GAAGI,KAAK;IACRN,gBAAgB,EAAEQ,KAAK;IACvBN,UAAU;IACVC,eAAe,EAAE;EACnB,CAAC;AACH,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}