{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addMulticallListeners, errorFetchingMulticallResults, fetchingMulticallResults, removeMulticallListeners, toCallKey, updateMulticallResults } from './actions';\nconst initialState = {\n  callResults: {}\n};\nexport default createReducer(initialState, builder => builder.addCase(addMulticallListeners, (state, _ref) => {\n  var _listeners$chainId;\n  let {\n    payload: {\n      calls,\n      chainId,\n      options: {\n        blocksPerFetch = 1\n      } = {}\n    }\n  } = _ref;\n  const listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n  listeners[chainId] = (_listeners$chainId = listeners[chainId]) !== null && _listeners$chainId !== void 0 ? _listeners$chainId : {};\n  calls.forEach(call => {\n    var _listeners$chainId$ca, _listeners$chainId$ca2;\n    const callKey = toCallKey(call);\n    listeners[chainId][callKey] = (_listeners$chainId$ca = listeners[chainId][callKey]) !== null && _listeners$chainId$ca !== void 0 ? _listeners$chainId$ca : {};\n    listeners[chainId][callKey][blocksPerFetch] = ((_listeners$chainId$ca2 = listeners[chainId][callKey][blocksPerFetch]) !== null && _listeners$chainId$ca2 !== void 0 ? _listeners$chainId$ca2 : 0) + 1;\n  });\n}).addCase(removeMulticallListeners, (state, _ref2) => {\n  let {\n    payload: {\n      chainId,\n      calls,\n      options: {\n        blocksPerFetch = 1\n      } = {}\n    }\n  } = _ref2;\n  const listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n  if (!listeners[chainId]) return;\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    if (!listeners[chainId][callKey]) return;\n    if (!listeners[chainId][callKey][blocksPerFetch]) return;\n    if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n      delete listeners[chainId][callKey][blocksPerFetch];\n    } else {\n      listeners[chainId][callKey][blocksPerFetch]--;\n    }\n  });\n}).addCase(fetchingMulticallResults, (state, _ref3) => {\n  var _state$callResults$ch;\n  let {\n    payload: {\n      chainId,\n      fetchingBlockNumber,\n      calls\n    }\n  } = _ref3;\n  state.callResults[chainId] = (_state$callResults$ch = state.callResults[chainId]) !== null && _state$callResults$ch !== void 0 ? _state$callResults$ch : {};\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    const current = state.callResults[chainId][callKey];\n    if (!current) {\n      state.callResults[chainId][callKey] = {\n        fetchingBlockNumber\n      };\n    } else {\n      var _current$fetchingBloc;\n      if (((_current$fetchingBloc = current.fetchingBlockNumber) !== null && _current$fetchingBloc !== void 0 ? _current$fetchingBloc : 0) >= fetchingBlockNumber) return;\n      state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\n    }\n  });\n}).addCase(errorFetchingMulticallResults, (state, _ref4) => {\n  var _state$callResults$ch2;\n  let {\n    payload: {\n      fetchingBlockNumber,\n      chainId,\n      calls\n    }\n  } = _ref4;\n  state.callResults[chainId] = (_state$callResults$ch2 = state.callResults[chainId]) !== null && _state$callResults$ch2 !== void 0 ? _state$callResults$ch2 : {};\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    const current = state.callResults[chainId][callKey];\n    if (!current) return; // only should be dispatched if we are already fetching\n    if (current.fetchingBlockNumber === fetchingBlockNumber) {\n      delete current.fetchingBlockNumber;\n      current.data = null;\n      current.blockNumber = fetchingBlockNumber;\n    }\n  });\n}).addCase(updateMulticallResults, (state, _ref5) => {\n  var _state$callResults$ch3;\n  let {\n    payload: {\n      chainId,\n      results,\n      blockNumber\n    }\n  } = _ref5;\n  state.callResults[chainId] = (_state$callResults$ch3 = state.callResults[chainId]) !== null && _state$callResults$ch3 !== void 0 ? _state$callResults$ch3 : {};\n  Object.keys(results).forEach(callKey => {\n    var _current$blockNumber;\n    const current = state.callResults[chainId][callKey];\n    if (((_current$blockNumber = current === null || current === void 0 ? void 0 : current.blockNumber) !== null && _current$blockNumber !== void 0 ? _current$blockNumber : 0) > blockNumber) return;\n    state.callResults[chainId][callKey] = {\n      data: results[callKey],\n      blockNumber\n    };\n  });\n}));","map":{"version":3,"names":["createReducer","addMulticallListeners","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","payload","calls","chainId","options","blocksPerFetch","listeners","callListeners","forEach","call","callKey","fetchingBlockNumber","current","data","blockNumber","results","Object","keys"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/multicall/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addMulticallListeners,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  removeMulticallListeners,\n  toCallKey,\n  updateMulticallResults,\n} from './actions'\n\nexport interface MulticallState {\n  callListeners?: {\n    // on a per-chain basis\n    [chainId: number]: {\n      // stores for each call key the listeners' preferences\n      [callKey: string]: {\n        // stores how many listeners there are per each blocks per fetch preference\n        [blocksPerFetch: number]: number\n      }\n    }\n  }\n\n  callResults: {\n    [chainId: number]: {\n      [callKey: string]: {\n        data?: string | null\n        blockNumber?: number\n        fetchingBlockNumber?: number\n      }\n    }\n  }\n}\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\n      const listeners: MulticallState['callListeners'] = state.callListeners\n        ? state.callListeners\n        : (state.callListeners = {})\n      listeners[chainId] = listeners[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n      })\n    })\n    .addCase(\n      removeMulticallListeners,\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n    )\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) {\n          state.callResults[chainId][callKey] = {\n            fetchingBlockNumber,\n          }\n        } else {\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) return // only should be dispatched if we are already fetching\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\n          delete current.fetchingBlockNumber\n          current.data = null\n          current.blockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      Object.keys(results).forEach((callKey) => {\n        const current = state.callResults[chainId][callKey]\n        if ((current?.blockNumber ?? 0) > blockNumber) return\n        state.callResults[chainId][callKey] = {\n          data: results[callKey],\n          blockNumber,\n        }\n      })\n    }),\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}