{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types *//* eslint-disable @typescript-eslint/no-inferrable-types */// import invariant from 'tiny-invariant'\nimport JSBI from'jsbi';import _Big from'big.js';import toFormat from'toformat';import{ETHER}from'../currency';import{Rounding,TEN,SolidityType}from'../../constants';import{parseBigintIsh,validateSolidityTypeInstance}from'../../utils';import{Fraction}from'./fraction';const Big=toFormat(_Big);export class CurrencyAmount extends Fraction{/**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */static ether(amount){return new CurrencyAmount(ETHER,amount);}// amount _must_ be raw, i.e. in the native representation\nconstructor(currency,amount){const parsedAmount=parseBigintIsh(amount);validateSolidityTypeInstance(parsedAmount,SolidityType.uint256);super(parsedAmount,JSBI.exponentiate(TEN,JSBI.BigInt(currency.decimals)));this.currency=void 0;this.currency=currency;}get raw(){return this.numerator;}add(other){// invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\nreturn new CurrencyAmount(this.currency,JSBI.add(this.raw,other.raw));}subtract(other){// invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\nreturn new CurrencyAmount(this.currency,JSBI.subtract(this.raw,other.raw));}toSignificant(){let significantDigits=arguments.length>0&&arguments[0]!==undefined?arguments[0]:6;let format=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_DOWN;return super.toSignificant(significantDigits,format,rounding);}toFixed(){let decimalPlaces=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.currency.decimals;let format=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_DOWN;// invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\nreturn super.toFixed(decimalPlaces,format,rounding);}toExact(){let format=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{groupSeparator:''};Big.DP=this.currency.decimals;return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);}}","map":{"version":3,"names":["JSBI","_Big","toFormat","ETHER","Rounding","TEN","SolidityType","parseBigintIsh","validateSolidityTypeInstance","Fraction","Big","CurrencyAmount","ether","amount","constructor","currency","parsedAmount","uint256","exponentiate","BigInt","decimals","raw","numerator","add","other","subtract","toSignificant","significantDigits","arguments","length","undefined","format","rounding","ROUND_DOWN","toFixed","decimalPlaces","toExact","groupSeparator","DP","toString","div","denominator"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/currencyAmount.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    // invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}