{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */// import invariant from 'tiny-invariant'\nimport JSBI from'jsbi';import _Decimal from'decimal.js-light';import _Big from'big.js';import toFormat from'toformat';import{Rounding,ONE}from'../../constants';import{parseBigintIsh}from'../../utils';const Decimal=toFormat(_Decimal);const Big=toFormat(_Big);const RoundDown=0;const RoundHalfUp=1;const RoundUp=3;const toSignificantRounding={[Rounding.ROUND_DOWN]:Decimal.ROUND_DOWN,[Rounding.ROUND_HALF_UP]:Decimal.ROUND_HALF_UP,[Rounding.ROUND_UP]:Decimal.ROUND_UP};const toFixedRounding={// [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n// [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n// [Rounding.ROUND_UP]: RoundingMode.RoundUp\n[Rounding.ROUND_DOWN]:RoundDown,[Rounding.ROUND_HALF_UP]:RoundHalfUp,[Rounding.ROUND_UP]:RoundUp};export class Fraction{constructor(numerator){let denominator=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ONE;this.numerator=void 0;this.denominator=void 0;this.numerator=parseBigintIsh(numerator);this.denominator=parseBigintIsh(denominator);}// performs floor division\nget quotient(){return JSBI.divide(this.numerator,this.denominator);}// remainder after floor division\nget remainder(){return new Fraction(JSBI.remainder(this.numerator,this.denominator),this.denominator);}invert(){return new Fraction(this.denominator,this.numerator);}add(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));if(JSBI.equal(this.denominator,otherParsed.denominator)){return new Fraction(JSBI.add(this.numerator,otherParsed.numerator),this.denominator);}return new Fraction(JSBI.add(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(otherParsed.numerator,this.denominator)),JSBI.multiply(this.denominator,otherParsed.denominator));}subtract(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));if(JSBI.equal(this.denominator,otherParsed.denominator)){return new Fraction(JSBI.subtract(this.numerator,otherParsed.numerator),this.denominator);}return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(otherParsed.numerator,this.denominator)),JSBI.multiply(this.denominator,otherParsed.denominator));}lessThan(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));return JSBI.lessThan(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(otherParsed.numerator,this.denominator));}equalTo(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));return JSBI.equal(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(otherParsed.numerator,this.denominator));}greaterThan(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));return JSBI.greaterThan(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(otherParsed.numerator,this.denominator));}multiply(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));return new Fraction(JSBI.multiply(this.numerator,otherParsed.numerator),JSBI.multiply(this.denominator,otherParsed.denominator));}divide(other){const otherParsed=other instanceof Fraction?other:new Fraction(parseBigintIsh(other));return new Fraction(JSBI.multiply(this.numerator,otherParsed.denominator),JSBI.multiply(this.denominator,otherParsed.numerator));}toSignificant(significantDigits){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{groupSeparator:''};let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_HALF_UP;// invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n// invariant(significantDigits > 0, `${significantDigits} is not positive.`)\nDecimal.set({precision:significantDigits+1,rounding:toSignificantRounding[rounding]});const quotient=new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);return quotient.toFormat(quotient.decimalPlaces(),format);}toFixed(decimalPlaces){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{groupSeparator:''};let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_HALF_UP;// invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n// invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\nBig.DP=decimalPlaces;Big.RM=toFixedRounding[rounding];return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces,format);}}","map":{"version":3,"names":["JSBI","_Decimal","_Big","toFormat","Rounding","ONE","parseBigintIsh","Decimal","Big","RoundDown","RoundHalfUp","RoundUp","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","arguments","length","undefined","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","groupSeparator","rounding","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/fraction.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\n\nconst RoundDown: RoundingMode = 0;\nconst RoundHalfUp: RoundingMode = 1;\nconst RoundUp: RoundingMode = 3;\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  // [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  // [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  // [Rounding.ROUND_UP]: RoundingMode.RoundUp\n  [Rounding.ROUND_DOWN]: RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  \n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    // invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    // invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    // invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    // invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n"],"mappings":"AAAA,iDACA;AACA,MAAO,CAAAA,IAAI,KAAM,MAAM,CACvB,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,CAAAC,IAAI,KAAwB,QAAQ,CAC3C,MAAO,CAAAC,QAAQ,KAAM,UAAU,CAE/B,OAAoBC,QAAQ,CAAEC,GAAG,KAAQ,iBAAiB,CAC1D,OAASC,cAAc,KAAQ,aAAa,CAE5C,KAAM,CAAAC,OAAO,CAAGJ,QAAQ,CAACF,QAAQ,CAAC,CAClC,KAAM,CAAAO,GAAG,CAAGL,QAAQ,CAACD,IAAI,CAAC,CAG1B,KAAM,CAAAO,SAAuB,CAAG,CAAC,CACjC,KAAM,CAAAC,WAAyB,CAAG,CAAC,CACnC,KAAM,CAAAC,OAAqB,CAAG,CAAC,CAE/B,KAAM,CAAAC,qBAAqB,CAAG,CAC5B,CAACR,QAAQ,CAACS,UAAU,EAAGN,OAAO,CAACM,UAAU,CACzC,CAACT,QAAQ,CAACU,aAAa,EAAGP,OAAO,CAACO,aAAa,CAC/C,CAACV,QAAQ,CAACW,QAAQ,EAAGR,OAAO,CAACQ,QAC/B,CAAC,CAED,KAAM,CAAAC,eAAe,CAAG,CACtB;AACA;AACA;AACA,CAACZ,QAAQ,CAACS,UAAU,EAAGJ,SAAS,CAChC,CAACL,QAAQ,CAACU,aAAa,EAAGJ,WAAW,CACrC,CAACN,QAAQ,CAACW,QAAQ,EAAGJ,OACvB,CAAC,CAED,MAAO,MAAM,CAAAM,QAAS,CAKbC,WAAWA,CAACC,SAAoB,CAAgC,IAA9B,CAAAC,WAAsB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGhB,GAAG,MAJrDc,SAAS,aAETC,WAAW,QAGzB,IAAI,CAACD,SAAS,CAAGb,cAAc,CAACa,SAAS,CAAC,CAC1C,IAAI,CAACC,WAAW,CAAGd,cAAc,CAACc,WAAW,CAAC,CAChD,CAEA;AACA,GAAW,CAAAI,QAAQA,CAAA,CAAS,CAC1B,MAAO,CAAAxB,IAAI,CAACyB,MAAM,CAAC,IAAI,CAACN,SAAS,CAAE,IAAI,CAACC,WAAW,CAAC,CACtD,CAEA;AACA,GAAW,CAAAM,SAASA,CAAA,CAAa,CAC/B,MAAO,IAAI,CAAAT,QAAQ,CAACjB,IAAI,CAAC0B,SAAS,CAAC,IAAI,CAACP,SAAS,CAAE,IAAI,CAACC,WAAW,CAAC,CAAE,IAAI,CAACA,WAAW,CAAC,CACzF,CAEOO,MAAMA,CAAA,CAAa,CACxB,MAAO,IAAI,CAAAV,QAAQ,CAAC,IAAI,CAACG,WAAW,CAAE,IAAI,CAACD,SAAS,CAAC,CACvD,CAEOS,GAAGA,CAACC,KAA2B,CAAY,CAChD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,GAAI7B,IAAI,CAAC+B,KAAK,CAAC,IAAI,CAACX,WAAW,CAAEU,WAAW,CAACV,WAAW,CAAC,CAAE,CACzD,MAAO,IAAI,CAAAH,QAAQ,CAACjB,IAAI,CAAC4B,GAAG,CAAC,IAAI,CAACT,SAAS,CAAEW,WAAW,CAACX,SAAS,CAAC,CAAE,IAAI,CAACC,WAAW,CAAC,CACxF,CACA,MAAO,IAAI,CAAAH,QAAQ,CACjBjB,IAAI,CAAC4B,GAAG,CACN5B,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAACF,WAAW,CAACX,SAAS,CAAE,IAAI,CAACC,WAAW,CACvD,CAAC,CACDpB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACZ,WAAW,CAAEU,WAAW,CAACV,WAAW,CACzD,CAAC,CACH,CAEOa,QAAQA,CAACJ,KAA2B,CAAY,CACrD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,GAAI7B,IAAI,CAAC+B,KAAK,CAAC,IAAI,CAACX,WAAW,CAAEU,WAAW,CAACV,WAAW,CAAC,CAAE,CACzD,MAAO,IAAI,CAAAH,QAAQ,CAACjB,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAACd,SAAS,CAAEW,WAAW,CAACX,SAAS,CAAC,CAAE,IAAI,CAACC,WAAW,CAAC,CAC7F,CACA,MAAO,IAAI,CAAAH,QAAQ,CACjBjB,IAAI,CAACiC,QAAQ,CACXjC,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAACF,WAAW,CAACX,SAAS,CAAE,IAAI,CAACC,WAAW,CACvD,CAAC,CACDpB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACZ,WAAW,CAAEU,WAAW,CAACV,WAAW,CACzD,CAAC,CACH,CAEOc,QAAQA,CAACL,KAA2B,CAAW,CACpD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,MAAO,CAAA7B,IAAI,CAACkC,QAAQ,CAClBlC,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAACF,WAAW,CAACX,SAAS,CAAE,IAAI,CAACC,WAAW,CACvD,CAAC,CACH,CAEOe,OAAOA,CAACN,KAA2B,CAAW,CACnD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,MAAO,CAAA7B,IAAI,CAAC+B,KAAK,CACf/B,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAACF,WAAW,CAACX,SAAS,CAAE,IAAI,CAACC,WAAW,CACvD,CAAC,CACH,CAEOgB,WAAWA,CAACP,KAA2B,CAAW,CACvD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,MAAO,CAAA7B,IAAI,CAACoC,WAAW,CACrBpC,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAACF,WAAW,CAACX,SAAS,CAAE,IAAI,CAACC,WAAW,CACvD,CAAC,CACH,CAEOY,QAAQA,CAACH,KAA2B,CAAY,CACrD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,MAAO,IAAI,CAAAZ,QAAQ,CACjBjB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACX,SAAS,CAAC,CACpDnB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACZ,WAAW,CAAEU,WAAW,CAACV,WAAW,CACzD,CAAC,CACH,CAEOK,MAAMA,CAACI,KAA2B,CAAY,CACnD,KAAM,CAAAC,WAAW,CAAGD,KAAK,WAAY,CAAAZ,QAAQ,CAAGY,KAAK,CAAG,GAAI,CAAAZ,QAAQ,CAACX,cAAc,CAACuB,KAAK,CAAC,CAAC,CAC3F,MAAO,IAAI,CAAAZ,QAAQ,CACjBjB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAEW,WAAW,CAACV,WAAW,CAAC,CACtDpB,IAAI,CAACgC,QAAQ,CAAC,IAAI,CAACZ,WAAW,CAAEU,WAAW,CAACX,SAAS,CACvD,CAAC,CACH,CAEOkB,aAAaA,CAClBC,iBAAyB,CAGjB,IAFR,CAAAC,MAAc,CAAAlB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAEmB,cAAc,CAAE,EAAG,CAAC,IACvC,CAAAC,QAAkB,CAAApB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGjB,QAAQ,CAACU,aAAa,CAE3C;AACA;AAEAP,OAAO,CAACmC,GAAG,CAAC,CAAEC,SAAS,CAAEL,iBAAiB,CAAG,CAAC,CAAEG,QAAQ,CAAE7B,qBAAqB,CAAC6B,QAAQ,CAAE,CAAC,CAAC,CAC5F,KAAM,CAAAjB,QAAQ,CAAG,GAAI,CAAAjB,OAAO,CAAC,IAAI,CAACY,SAAS,CAACyB,QAAQ,CAAC,CAAC,CAAC,CACpDC,GAAG,CAAC,IAAI,CAACzB,WAAW,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAChCE,mBAAmB,CAACR,iBAAiB,CAAC,CACzC,MAAO,CAAAd,QAAQ,CAACrB,QAAQ,CAACqB,QAAQ,CAACuB,aAAa,CAAC,CAAC,CAAER,MAAM,CAAC,CAC5D,CAEOS,OAAOA,CACZD,aAAqB,CAGb,IAFR,CAAAR,MAAc,CAAAlB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAEmB,cAAc,CAAE,EAAG,CAAC,IACvC,CAAAC,QAAkB,CAAApB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGjB,QAAQ,CAACU,aAAa,CAE3C;AACA;AAEAN,GAAG,CAACyC,EAAE,CAAGF,aAAa,CACtBvC,GAAG,CAAC0C,EAAE,CAAGlC,eAAe,CAACyB,QAAQ,CAAC,CAClC,MAAO,IAAI,CAAAjC,GAAG,CAAC,IAAI,CAACW,SAAS,CAACyB,QAAQ,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,CAACzB,WAAW,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAACzC,QAAQ,CAAC4C,aAAa,CAAER,MAAM,CAAC,CAC5G,CACF","ignoreList":[]},"metadata":{},"sourceType":"module"}