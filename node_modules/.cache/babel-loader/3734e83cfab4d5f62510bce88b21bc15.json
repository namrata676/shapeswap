{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { Rounding, ONE } from '../../constants';\nimport { parseBigintIsh } from '../../utils';\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\nconst RoundDown = 0;\nconst RoundHalfUp = 1;\nconst RoundUp = 3;\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n};\nconst toFixedRounding = {\n  // [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  // [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  // [Rounding.ROUND_UP]: RoundingMode.RoundUp\n  [Rounding.ROUND_DOWN]: RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundUp\n};\nexport class Fraction {\n  constructor(numerator, denominator = ONE) {\n    this.numerator = void 0;\n    this.denominator = void 0;\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  }\n\n  // performs floor division\n  get quotient() {\n    return JSBI.divide(this.numerator, this.denominator);\n  }\n\n  // remainder after floor division\n  get remainder() {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n  }\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n  add(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  subtract(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  lessThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  equalTo(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  greaterThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  multiply(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  divide(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  }\n  toSignificant(significantDigits, format = {\n    groupSeparator: ''\n  }, rounding = Rounding.ROUND_HALF_UP) {\n    // invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    // invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n  toFixed(decimalPlaces, format = {\n    groupSeparator: ''\n  }, rounding = Rounding.ROUND_HALF_UP) {\n    // invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    // invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n}","map":{"version":3,"names":["JSBI","_Decimal","_Big","toFormat","Rounding","ONE","parseBigintIsh","Decimal","Big","RoundDown","RoundHalfUp","RoundUp","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","groupSeparator","rounding","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/fraction.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\n\nconst RoundDown: RoundingMode = 0;\nconst RoundHalfUp: RoundingMode = 1;\nconst RoundUp: RoundingMode = 3;\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  // [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  // [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  // [Rounding.ROUND_UP]: RoundingMode.RoundUp\n  [Rounding.ROUND_DOWN]: RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  \n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    // invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    // invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    // invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    // invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,IAAI,MAAwB,QAAQ;AAC3C,OAAOC,QAAQ,MAAM,UAAU;AAE/B,SAAoBC,QAAQ,EAAEC,GAAG,QAAQ,iBAAiB;AAC1D,SAASC,cAAc,QAAQ,aAAa;AAE5C,MAAMC,OAAO,GAAGJ,QAAQ,CAACF,QAAQ,CAAC;AAClC,MAAMO,GAAG,GAAGL,QAAQ,CAACD,IAAI,CAAC;AAG1B,MAAMO,SAAuB,GAAG,CAAC;AACjC,MAAMC,WAAyB,GAAG,CAAC;AACnC,MAAMC,OAAqB,GAAG,CAAC;AAE/B,MAAMC,qBAAqB,GAAG;EAC5B,CAACR,QAAQ,CAACS,UAAU,GAAGN,OAAO,CAACM,UAAU;EACzC,CAACT,QAAQ,CAACU,aAAa,GAAGP,OAAO,CAACO,aAAa;EAC/C,CAACV,QAAQ,CAACW,QAAQ,GAAGR,OAAO,CAACQ;AAC/B,CAAC;AAED,MAAMC,eAAe,GAAG;EACtB;EACA;EACA;EACA,CAACZ,QAAQ,CAACS,UAAU,GAAGJ,SAAS;EAChC,CAACL,QAAQ,CAACU,aAAa,GAAGJ,WAAW;EACrC,CAACN,QAAQ,CAACW,QAAQ,GAAGJ;AACvB,CAAC;AAED,OAAO,MAAMM,QAAQ,CAAC;EAKbC,WAAWA,CAACC,SAAoB,EAAEC,WAAsB,GAAGf,GAAG,EAAE;IAAA,KAJvDc,SAAS;IAAA,KAETC,WAAW;IAGzB,IAAI,CAACD,SAAS,GAAGb,cAAc,CAACa,SAAS,CAAC;IAC1C,IAAI,CAACC,WAAW,GAAGd,cAAc,CAACc,WAAW,CAAC;EAChD;;EAEA;EACA,IAAWC,QAAQA,CAAA,EAAS;IAC1B,OAAOrB,IAAI,CAACsB,MAAM,CAAC,IAAI,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;EACtD;;EAEA;EACA,IAAWG,SAASA,CAAA,EAAa;IAC/B,OAAO,IAAIN,QAAQ,CAACjB,IAAI,CAACuB,SAAS,CAAC,IAAI,CAACJ,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,EAAE,IAAI,CAACA,WAAW,CAAC;EACzF;EAEOI,MAAMA,CAAA,EAAa;IACxB,OAAO,IAAIP,QAAQ,CAAC,IAAI,CAACG,WAAW,EAAE,IAAI,CAACD,SAAS,CAAC;EACvD;EAEOM,GAAGA,CAACC,KAA2B,EAAY;IAChD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,IAAI1B,IAAI,CAAC4B,KAAK,CAAC,IAAI,CAACR,WAAW,EAAEO,WAAW,CAACP,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIH,QAAQ,CAACjB,IAAI,CAACyB,GAAG,CAAC,IAAI,CAACN,SAAS,EAAEQ,WAAW,CAACR,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;IACxF;IACA,OAAO,IAAIH,QAAQ,CACjBjB,IAAI,CAACyB,GAAG,CACNzB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAACF,WAAW,CAACR,SAAS,EAAE,IAAI,CAACC,WAAW,CACvD,CAAC,EACDpB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACT,WAAW,EAAEO,WAAW,CAACP,WAAW,CACzD,CAAC;EACH;EAEOU,QAAQA,CAACJ,KAA2B,EAAY;IACrD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,IAAI1B,IAAI,CAAC4B,KAAK,CAAC,IAAI,CAACR,WAAW,EAAEO,WAAW,CAACP,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIH,QAAQ,CAACjB,IAAI,CAAC8B,QAAQ,CAAC,IAAI,CAACX,SAAS,EAAEQ,WAAW,CAACR,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;IAC7F;IACA,OAAO,IAAIH,QAAQ,CACjBjB,IAAI,CAAC8B,QAAQ,CACX9B,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAACF,WAAW,CAACR,SAAS,EAAE,IAAI,CAACC,WAAW,CACvD,CAAC,EACDpB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACT,WAAW,EAAEO,WAAW,CAACP,WAAW,CACzD,CAAC;EACH;EAEOW,QAAQA,CAACL,KAA2B,EAAW;IACpD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,OAAO1B,IAAI,CAAC+B,QAAQ,CAClB/B,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAACF,WAAW,CAACR,SAAS,EAAE,IAAI,CAACC,WAAW,CACvD,CAAC;EACH;EAEOY,OAAOA,CAACN,KAA2B,EAAW;IACnD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,OAAO1B,IAAI,CAAC4B,KAAK,CACf5B,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAACF,WAAW,CAACR,SAAS,EAAE,IAAI,CAACC,WAAW,CACvD,CAAC;EACH;EAEOa,WAAWA,CAACP,KAA2B,EAAW;IACvD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,OAAO1B,IAAI,CAACiC,WAAW,CACrBjC,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAACF,WAAW,CAACR,SAAS,EAAE,IAAI,CAACC,WAAW,CACvD,CAAC;EACH;EAEOS,QAAQA,CAACH,KAA2B,EAAY;IACrD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,OAAO,IAAIT,QAAQ,CACjBjB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACR,SAAS,CAAC,EACpDnB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACT,WAAW,EAAEO,WAAW,CAACP,WAAW,CACzD,CAAC;EACH;EAEOE,MAAMA,CAACI,KAA2B,EAAY;IACnD,MAAMC,WAAW,GAAGD,KAAK,YAAYT,QAAQ,GAAGS,KAAK,GAAG,IAAIT,QAAQ,CAACX,cAAc,CAACoB,KAAK,CAAC,CAAC;IAC3F,OAAO,IAAIT,QAAQ,CACjBjB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACV,SAAS,EAAEQ,WAAW,CAACP,WAAW,CAAC,EACtDpB,IAAI,CAAC6B,QAAQ,CAAC,IAAI,CAACT,WAAW,EAAEO,WAAW,CAACR,SAAS,CACvD,CAAC;EACH;EAEOe,aAAaA,CAClBC,iBAAyB,EACzBC,MAAc,GAAG;IAAEC,cAAc,EAAE;EAAG,CAAC,EACvCC,QAAkB,GAAGlC,QAAQ,CAACU,aAAa,EACnC;IACR;IACA;;IAEAP,OAAO,CAACgC,GAAG,CAAC;MAAEC,SAAS,EAAEL,iBAAiB,GAAG,CAAC;MAAEG,QAAQ,EAAE1B,qBAAqB,CAAC0B,QAAQ;IAAE,CAAC,CAAC;IAC5F,MAAMjB,QAAQ,GAAG,IAAId,OAAO,CAAC,IAAI,CAACY,SAAS,CAACsB,QAAQ,CAAC,CAAC,CAAC,CACpDC,GAAG,CAAC,IAAI,CAACtB,WAAW,CAACqB,QAAQ,CAAC,CAAC,CAAC,CAChCE,mBAAmB,CAACR,iBAAiB,CAAC;IACzC,OAAOd,QAAQ,CAAClB,QAAQ,CAACkB,QAAQ,CAACuB,aAAa,CAAC,CAAC,EAAER,MAAM,CAAC;EAC5D;EAEOS,OAAOA,CACZD,aAAqB,EACrBR,MAAc,GAAG;IAAEC,cAAc,EAAE;EAAG,CAAC,EACvCC,QAAkB,GAAGlC,QAAQ,CAACU,aAAa,EACnC;IACR;IACA;;IAEAN,GAAG,CAACsC,EAAE,GAAGF,aAAa;IACtBpC,GAAG,CAACuC,EAAE,GAAG/B,eAAe,CAACsB,QAAQ,CAAC;IAClC,OAAO,IAAI9B,GAAG,CAAC,IAAI,CAACW,SAAS,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,CAACtB,WAAW,CAACqB,QAAQ,CAAC,CAAC,CAAC,CAACtC,QAAQ,CAACyC,aAAa,EAAER,MAAM,CAAC;EAC5G;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}