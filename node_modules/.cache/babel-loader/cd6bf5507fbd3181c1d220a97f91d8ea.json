{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable no-useless-constructor */\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport { TokenAmount } from './entities/fractions/tokenAmount';\nimport { Pair } from './entities/pair';\nimport ERC20 from './abis/ERC20.json';\nimport { ChainId } from './constants';\nimport { Token } from './entities/token';\nlet TOKEN_DECIMALS_CACHE = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n};\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  static async fetchTokenData(chainId, address) {\n    var _TOKEN_DECIMALS_CACHE, _TOKEN_DECIMALS_CACHE2;\n    let provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultProvider(getNetwork(chainId));\n    let symbol = arguments.length > 3 ? arguments[3] : undefined;\n    let name = arguments.length > 4 ? arguments[4] : undefined;\n    const parsedDecimals = typeof ((_TOKEN_DECIMALS_CACHE = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE2 = _TOKEN_DECIMALS_CACHE[chainId]) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE2[address]) === 'number' ? TOKEN_DECIMALS_CACHE[chainId][address] : await new Contract(address, ERC20, provider).decimals().then(decimals => {\n      var _TOKEN_DECIMALS_CACHE3;\n      TOKEN_DECIMALS_CACHE = {\n        ...TOKEN_DECIMALS_CACHE,\n        [chainId]: {\n          ...((_TOKEN_DECIMALS_CACHE3 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[chainId]),\n          [address]: decimals\n        }\n      };\n      return decimals;\n    });\n    return new Token(chainId, address, parsedDecimals, symbol, name);\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  static async fetchPairData(tokenA, tokenB) {\n    let provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultProvider(getNetwork(tokenA.chainId));\n    // invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB);\n    const [reserves0, reserves1] = await new Contract(address, 'IPancakePair.abi', provider).getReserves();\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n  }\n}","map":{"version":3,"names":["Contract","getNetwork","getDefaultProvider","TokenAmount","Pair","ERC20","ChainId","Token","TOKEN_DECIMALS_CACHE","MAINNET","Fetcher","constructor","fetchTokenData","chainId","address","provider","symbol","name","parsedDecimals","decimals","then","fetchPairData","tokenA","tokenB","getAddress","reserves0","reserves1","getReserves","balances","sortsBefore"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/fetcher.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable no-useless-constructor */\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    // invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, 'IPancakePair.abi', provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,WAAW,QAAQ,kCAAkC;AAC9D,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,KAAK,QAAQ,kBAAkB;AAExC,IAAIC,oBAA0E,GAAG;EAC/E,CAACF,OAAO,CAACG,OAAO,GAAG;IACjB,4CAA4C,EAAE,CAAC,CAAC;EAClD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAeC,OAAO,CAAC;EAC5B;AACF;AACA;EACUC,WAAW,GAAG,CAAC;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,aAAoBC,cAAc,CAChCC,OAAgB,EAChBC,OAAe,EAIC;IAAA;IAAA,IAHhBC,QAAQ,uEAAGb,kBAAkB,CAACD,UAAU,CAACY,OAAO,CAAC,CAAC;IAAA,IAClDG,MAAe;IAAA,IACfC,IAAa;IAEb,MAAMC,cAAc,GAClB,iCAAOV,oBAAoB,oFAApB,sBAAuBK,OAAO,CAAC,2DAA/B,uBAAkCC,OAAO,CAAC,MAAK,QAAQ,GAC1DN,oBAAoB,CAACK,OAAO,CAAC,CAACC,OAAO,CAAC,GACtC,MAAM,IAAId,QAAQ,CAACc,OAAO,EAAET,KAAK,EAAEU,QAAQ,CAAC,CAACI,QAAQ,EAAE,CAACC,IAAI,CAAED,QAAgB,IAAa;MAAA;MACzFX,oBAAoB,GAAG;QACrB,GAAGA,oBAAoB;QACvB,CAACK,OAAO,GAAG;UACT,8BAAGL,oBAAoB,2DAApB,uBAAuBK,OAAO,CAAC;UAClC,CAACC,OAAO,GAAGK;QACb;MACF,CAAC;MACD,OAAOA,QAAQ;IACjB,CAAC,CAAC;IACR,OAAO,IAAIZ,KAAK,CAACM,OAAO,EAAEC,OAAO,EAAEI,cAAc,EAAEF,MAAM,EAAEC,IAAI,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,aAAoBI,aAAa,CAC/BC,MAAa,EACbC,MAAa,EAEE;IAAA,IADfR,QAAQ,uEAAGb,kBAAkB,CAACD,UAAU,CAACqB,MAAM,CAACT,OAAO,CAAC,CAAC;IAEzD;IACA,MAAMC,OAAO,GAAGV,IAAI,CAACoB,UAAU,CAACF,MAAM,EAAEC,MAAM,CAAC;IAC/C,MAAM,CAACE,SAAS,EAAEC,SAAS,CAAC,GAAG,MAAM,IAAI1B,QAAQ,CAACc,OAAO,EAAE,kBAAkB,EAAEC,QAAQ,CAAC,CAACY,WAAW,EAAE;IACtG,MAAMC,QAAQ,GAAGN,MAAM,CAACO,WAAW,CAACN,MAAM,CAAC,GAAG,CAACE,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACA,SAAS,EAAED,SAAS,CAAC;IAC7F,OAAO,IAAIrB,IAAI,CAAC,IAAID,WAAW,CAACmB,MAAM,EAAEM,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAIzB,WAAW,CAACoB,MAAM,EAAEK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7F;AACF"},"metadata":{},"sourceType":"module"}