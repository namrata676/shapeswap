{"ast":null,"code":"/**\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\n * @param farms Array of farms\n * @param preferredQuoteTokens Array of preferred quote tokens\n * @returns A preferred farm, if found - or the first element of the farms array\n */\nexport const filterFarmsByQuoteToken = function (farms) {\n  let preferredQuoteTokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['BUSD', 'wBNB'];\n  const preferredFarm = farms.find(farm => {\n    return preferredQuoteTokens.some(quoteToken => {\n      return farm.quoteToken.symbol === quoteToken;\n    });\n  });\n  return preferredFarm || farms[0];\n};\nexport default filterFarmsByQuoteToken;","map":{"version":3,"names":["filterFarmsByQuoteToken","farms","preferredQuoteTokens","preferredFarm","find","farm","some","quoteToken","symbol"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/utils/farmsPriceHelpers.ts"],"sourcesContent":["import { Farm } from 'state/types'\n\n/**\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\n * @param farms Array of farms\n * @param preferredQuoteTokens Array of preferred quote tokens\n * @returns A preferred farm, if found - or the first element of the farms array\n */\nexport const filterFarmsByQuoteToken = (farms: Farm[], preferredQuoteTokens: string[] = ['BUSD', 'wBNB']): Farm => {\n  const preferredFarm = farms.find((farm) => {\n    return preferredQuoteTokens.some((quoteToken) => {\n      return farm.quoteToken.symbol === quoteToken\n    })\n  })\n  return preferredFarm || farms[0]\n}\n\nexport default filterFarmsByQuoteToken\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAG,UAACC,KAAa,EAA8D;EAAA,IAA5DC,oBAA8B,uEAAG,CAAC,MAAM,EAAE,MAAM,CAAC;EACtG,MAAMC,aAAa,GAAGF,KAAK,CAACG,IAAI,CAAEC,IAAI,IAAK;IACzC,OAAOH,oBAAoB,CAACI,IAAI,CAAEC,UAAU,IAAK;MAC/C,OAAOF,IAAI,CAACE,UAAU,CAACC,MAAM,KAAKD,UAAU;IAC9C,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOJ,aAAa,IAAIF,KAAK,CAAC,CAAC,CAAC;AAClC,CAAC;AAED,eAAeD,uBAAuB"},"metadata":{},"sourceType":"module"}