{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { ETHER } from '../currency';\nimport { Rounding, TEN, SolidityType } from '../../constants';\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils';\nimport { Fraction } from './fraction';\nconst Big = toFormat(_Big);\nexport class CurrencyAmount extends Fraction {\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  static ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(currency, amount) {\n    const parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)));\n    this.currency = void 0;\n    this.currency = currency;\n  }\n  get raw() {\n    return this.numerator;\n  }\n  add(other) {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  }\n  subtract(other) {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_DOWN;\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currency.decimals;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_DOWN;\n    // invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n  toExact() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      groupSeparator: ''\n    };\n    Big.DP = this.currency.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}","map":{"version":3,"names":["JSBI","_Big","toFormat","ETHER","Rounding","TEN","SolidityType","parseBigintIsh","validateSolidityTypeInstance","Fraction","Big","CurrencyAmount","ether","amount","constructor","currency","parsedAmount","uint256","exponentiate","BigInt","decimals","raw","numerator","add","other","subtract","toSignificant","significantDigits","format","rounding","ROUND_DOWN","toFixed","decimalPlaces","toExact","groupSeparator","DP","toString","div","denominator"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/toolkit/sdk/entities/fractions/currencyAmount.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n// import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    // invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    // invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,UAAU;AAE/B,SAAmBC,KAAK,QAAQ,aAAa;AAE7C,SAAoBC,QAAQ,EAAEC,GAAG,EAAEC,YAAY,QAAQ,iBAAiB;AACxE,SAASC,cAAc,EAAEC,4BAA4B,QAAQ,aAAa;AAC1E,SAASC,QAAQ,QAAQ,YAAY;AAErC,MAAMC,GAAG,GAAGR,QAAQ,CAACD,IAAI,CAAC;AAE1B,OAAO,MAAMU,cAAc,SAASF,QAAQ,CAAC;EAG3C;AACF;AACA;AACA;EACE,OAAcG,KAAK,CAACC,MAAiB,EAAkB;IACrD,OAAO,IAAIF,cAAc,CAACR,KAAK,EAAEU,MAAM,CAAC;EAC1C;;EAEA;EACUC,WAAW,CAACC,QAAkB,EAAEF,MAAiB,EAAE;IAC3D,MAAMG,YAAY,GAAGT,cAAc,CAACM,MAAM,CAAC;IAC3CL,4BAA4B,CAACQ,YAAY,EAAEV,YAAY,CAACW,OAAO,CAAC;IAEhE,KAAK,CAACD,YAAY,EAAEhB,IAAI,CAACkB,YAAY,CAACb,GAAG,EAAEL,IAAI,CAACmB,MAAM,CAACJ,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC;IAAA,KAf7DL,QAAQ;IAgBtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEA,IAAWM,GAAG,GAAS;IACrB,OAAO,IAAI,CAACC,SAAS;EACvB;EAEOC,GAAG,CAACC,KAAqB,EAAkB;IAChD;IACA,OAAO,IAAIb,cAAc,CAAC,IAAI,CAACI,QAAQ,EAAEf,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACF,GAAG,EAAEG,KAAK,CAACH,GAAG,CAAC,CAAC;EACzE;EAEOI,QAAQ,CAACD,KAAqB,EAAkB;IACrD;IACA,OAAO,IAAIb,cAAc,CAAC,IAAI,CAACI,QAAQ,EAAEf,IAAI,CAACyB,QAAQ,CAAC,IAAI,CAACJ,GAAG,EAAEG,KAAK,CAACH,GAAG,CAAC,CAAC;EAC9E;EAEOK,aAAa,GAIV;IAAA,IAHRC,iBAAyB,uEAAG,CAAC;IAAA,IAC7BC,MAAe;IAAA,IACfC,QAAkB,uEAAGzB,QAAQ,CAAC0B,UAAU;IAExC,OAAO,KAAK,CAACJ,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;EACjE;EAEOE,OAAO,GAIJ;IAAA,IAHRC,aAAqB,uEAAG,IAAI,CAACjB,QAAQ,CAACK,QAAQ;IAAA,IAC9CQ,MAAe;IAAA,IACfC,QAAkB,uEAAGzB,QAAQ,CAAC0B,UAAU;IAExC;IACA,OAAO,KAAK,CAACC,OAAO,CAACC,aAAa,EAAEJ,MAAM,EAAEC,QAAQ,CAAC;EACvD;EAEOI,OAAO,GAAkD;IAAA,IAAjDL,MAAc,uEAAG;MAAEM,cAAc,EAAE;IAAG,CAAC;IACpDxB,GAAG,CAACyB,EAAE,GAAG,IAAI,CAACpB,QAAQ,CAACK,QAAQ;IAC/B,OAAO,IAAIV,GAAG,CAAC,IAAI,CAACY,SAAS,CAACc,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,IAAI,CAACC,WAAW,CAACF,QAAQ,EAAE,CAAC,CAAClC,QAAQ,CAAC0B,MAAM,CAAC;EAC7F;AACF"},"metadata":{},"sourceType":"module"}