{"ast":null,"code":"import { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from 'toolkit/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash';\nimport useWeb3Provider from './useActiveWeb3React';\nfunction useFetchListCallback() {\n  const {\n    library\n  } = useWeb3Provider();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const ensResolver = useCallback(ensName => {\n    if (chainId !== ChainId.MAINNET) {\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]);\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(async function (listUrl) {\n    let sendDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const requestId = nanoid();\n    if (sendDispatch) {\n      dispatch(fetchTokenList.pending({\n        requestId,\n        url: listUrl\n      }));\n    }\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      if (sendDispatch) {\n        dispatch(fetchTokenList.fulfilled({\n          url: listUrl,\n          tokenList,\n          requestId\n        }));\n      }\n      return tokenList;\n    }).catch(error => {\n      console.error(`Failed to get list at url ${listUrl}`, error);\n      if (sendDispatch) {\n        dispatch(fetchTokenList.rejected({\n          url: listUrl,\n          requestId,\n          errorMessage: 'error.message'\n        }));\n      }\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\nexport default useFetchListCallback;","map":{"version":3,"names":["nanoid","ChainId","useCallback","useDispatch","useActiveWeb3React","fetchTokenList","getTokenList","resolveENSContentHash","useWeb3Provider","useFetchListCallback","library","chainId","dispatch","ensResolver","ensName","MAINNET","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","rejected","errorMessage"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { ChainId } from 'toolkit/sdk'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash'\nimport useWeb3Provider from './useActiveWeb3React'\n\nfunction useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const { library } = useWeb3Provider()\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (chainId !== ChainId.MAINNET) {\n        throw new Error('Could not construct mainnet ENS resolver')\n      }\n      return resolveENSContentHash(ensName, library)\n    },\n    [chainId, library],\n  )\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      if (sendDispatch) {\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      }\n      return getTokenList(listUrl, ensResolver)\n        .then((tokenList) => {\n          if (sendDispatch) {\n            dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          }\n          return tokenList\n        })\n        .catch((error) => {\n          console.error(`Failed to get list at url ${listUrl}`, error)\n          if (sendDispatch) {\n            dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: 'error.message' }))\n          }\n          throw error\n        })\n    },\n    [dispatch, ensResolver],\n  )\n}\n\nexport default useFetchListCallback\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,kBAAkB;AACzC,SAASC,OAAO,QAAQ,aAAa;AAErC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,kBAAkB,MAAM,0BAA0B;AAEzD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,OAAOC,eAAe,MAAM,sBAAsB;AAElD,SAASC,oBAAoB,GAAoE;EAC/F,MAAM;IAAEC;EAAQ,CAAC,GAAGF,eAAe,EAAE;EACrC,MAAM;IAAEG;EAAQ,CAAC,GAAGP,kBAAkB,EAAE;EACxC,MAAMQ,QAAQ,GAAGT,WAAW,EAAe;EAE3C,MAAMU,WAAW,GAAGX,WAAW,CAC5BY,OAAe,IAAK;IACnB,IAAIH,OAAO,KAAKV,OAAO,CAACc,OAAO,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACA,OAAOT,qBAAqB,CAACO,OAAO,EAAEJ,OAAO,CAAC;EAChD,CAAC,EACD,CAACC,OAAO,EAAED,OAAO,CAAC,CACnB;;EAED;EACA,OAAOR,WAAW,CAChB,gBAAOe,OAAe,EAA0B;IAAA,IAAxBC,YAAY,uEAAG,IAAI;IACzC,MAAMC,SAAS,GAAGnB,MAAM,EAAE;IAC1B,IAAIkB,YAAY,EAAE;MAChBN,QAAQ,CAACP,cAAc,CAACe,OAAO,CAAC;QAAED,SAAS;QAAEE,GAAG,EAAEJ;MAAQ,CAAC,CAAC,CAAC;IAC/D;IACA,OAAOX,YAAY,CAACW,OAAO,EAAEJ,WAAW,CAAC,CACtCS,IAAI,CAAEC,SAAS,IAAK;MACnB,IAAIL,YAAY,EAAE;QAChBN,QAAQ,CAACP,cAAc,CAACmB,SAAS,CAAC;UAAEH,GAAG,EAAEJ,OAAO;UAAEM,SAAS;UAAEJ;QAAU,CAAC,CAAC,CAAC;MAC5E;MACA,OAAOI,SAAS;IAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAE,6BAA4BT,OAAQ,EAAC,EAAES,KAAK,CAAC;MAC5D,IAAIR,YAAY,EAAE;QAChBN,QAAQ,CAACP,cAAc,CAACuB,QAAQ,CAAC;UAAEP,GAAG,EAAEJ,OAAO;UAAEE,SAAS;UAAEU,YAAY,EAAE;QAAgB,CAAC,CAAC,CAAC;MAC/F;MACA,MAAMH,KAAK;IACb,CAAC,CAAC;EACN,CAAC,EACD,CAACd,QAAQ,EAAEC,WAAW,CAAC,CACxB;AACH;AAEA,eAAeJ,oBAAoB"},"metadata":{},"sourceType":"module"}