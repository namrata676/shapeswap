{"ast":null,"code":"import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import{useDispatch}from'react-redux';import farmsReducer from'./farms';import predictionsReducer from'./predictions';import profileReducer from'./profile';import teamsReducer from'./teams';import achievementsReducer from'./achievements';import blockReducer from'./block';import collectiblesReducer from'./collectibles';import votingReducer from'./voting';import lotteryReducer from'./lottery';import application from'./application/reducer';import{updateVersion}from'./global/actions';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import mint from'./mint/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import multicall from'./multicall/reducer';const PERSISTED_KEYS=['user','transactions','lists'];const store=configureStore({devTools:process.env.NODE_ENV!=='production',reducer:{achievements:achievementsReducer,block:blockReducer,farms:farmsReducer,predictions:predictionsReducer,profile:profileReducer,teams:teamsReducer,collectibles:collectiblesReducer,voting:votingReducer,lottery:lotteryReducer,// Exchange\napplication,user,transactions,swap,mint,burn,multicall,lists},middleware:[...getDefaultMiddleware({thunk:true}),save({states:PERSISTED_KEYS})],preloadedState:load({states:PERSISTED_KEYS})});store.dispatch(updateVersion());/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */export const useAppDispatch=()=>useDispatch();export default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","useDispatch","farmsReducer","predictionsReducer","profileReducer","teamsReducer","achievementsReducer","blockReducer","collectiblesReducer","votingReducer","lotteryReducer","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","PERSISTED_KEYS","store","devTools","process","env","NODE_ENV","reducer","achievements","block","farms","predictions","profile","teams","collectibles","voting","lottery","middleware","thunk","states","preloadedState","dispatch","useAppDispatch"],"sources":["/Users/namratapatel/upwork/SmartFinance-OmniDex/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\nimport { useDispatch } from 'react-redux'\nimport farmsReducer from './farms'\n\nimport predictionsReducer from './predictions'\nimport profileReducer from './profile'\nimport teamsReducer from './teams'\nimport achievementsReducer from './achievements'\nimport blockReducer from './block'\nimport collectiblesReducer from './collectibles'\nimport votingReducer from './voting'\nimport lotteryReducer from './lottery'\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    block: blockReducer,\n    farms: farmsReducer,    \n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    collectibles: collectiblesReducer,\n    voting: votingReducer,\n    lottery: lotteryReducer,\n\n    // Exchange\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n})\n\nstore.dispatch(updateVersion())\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppDispatch = () => useDispatch()\n\nexport default store\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,oBAAoB,KAAQ,kBAAkB,CACvE,OAASC,IAAI,CAAEC,IAAI,KAAQ,2BAA2B,CACtD,OAASC,WAAW,KAAQ,aAAa,CACzC,MAAO,CAAAC,YAAY,KAAM,SAAS,CAElC,MAAO,CAAAC,kBAAkB,KAAM,eAAe,CAC9C,MAAO,CAAAC,cAAc,KAAM,WAAW,CACtC,MAAO,CAAAC,YAAY,KAAM,SAAS,CAClC,MAAO,CAAAC,mBAAmB,KAAM,gBAAgB,CAChD,MAAO,CAAAC,YAAY,KAAM,SAAS,CAClC,MAAO,CAAAC,mBAAmB,KAAM,gBAAgB,CAChD,MAAO,CAAAC,aAAa,KAAM,UAAU,CACpC,MAAO,CAAAC,cAAc,KAAM,WAAW,CACtC,MAAO,CAAAC,WAAW,KAAM,uBAAuB,CAC/C,OAASC,aAAa,KAAQ,kBAAkB,CAChD,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,YAAY,KAAM,wBAAwB,CACjD,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CACnC,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,SAAS,KAAM,qBAAqB,CAE3C,KAAM,CAAAC,cAAwB,CAAG,CAAC,MAAM,CAAE,cAAc,CAAE,OAAO,CAAC,CAElE,KAAM,CAAAC,KAAK,CAAGxB,cAAc,CAAC,CAC3ByB,QAAQ,CAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAC/CC,OAAO,CAAE,CACPC,YAAY,CAAErB,mBAAmB,CACjCsB,KAAK,CAAErB,YAAY,CACnBsB,KAAK,CAAE3B,YAAY,CACnB4B,WAAW,CAAE3B,kBAAkB,CAC/B4B,OAAO,CAAE3B,cAAc,CACvB4B,KAAK,CAAE3B,YAAY,CACnB4B,YAAY,CAAEzB,mBAAmB,CACjC0B,MAAM,CAAEzB,aAAa,CACrB0B,OAAO,CAAEzB,cAAc,CAEvB;AACAC,WAAW,CACXE,IAAI,CACJC,YAAY,CACZC,IAAI,CACJC,IAAI,CACJE,IAAI,CACJC,SAAS,CACTF,KACF,CAAC,CACDmB,UAAU,CAAE,CAAC,GAAGtC,oBAAoB,CAAC,CAAEuC,KAAK,CAAE,IAAK,CAAC,CAAC,CAAEtC,IAAI,CAAC,CAAEuC,MAAM,CAAElB,cAAe,CAAC,CAAC,CAAC,CACxFmB,cAAc,CAAEvC,IAAI,CAAC,CAAEsC,MAAM,CAAElB,cAAe,CAAC,CACjD,CAAC,CAAC,CAEFC,KAAK,CAACmB,QAAQ,CAAC5B,aAAa,CAAC,CAAC,CAAC,CAE/B;AACA;AACA,GAGA,MAAO,MAAM,CAAA6B,cAAc,CAAGA,CAAA,GAAMxC,WAAW,CAAC,CAAC,CAEjD,cAAe,CAAAoB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}